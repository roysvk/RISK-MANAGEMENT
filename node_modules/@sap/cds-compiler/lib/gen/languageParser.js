/* eslint-disable */
// @ts-nocheck

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Generated from language.g4 by ANTLR 4.9.3
// jshint ignore: start
const antlr4_1 = __importDefault(require("antlr4"));
const genericAntlrParser_js_1 = __importDefault(require("./genericAntlrParser.js"));
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0098\u0d6b\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0003\u0002\u0007\u0002",
    "\u00f8\n\u0002\f\u0002\u000e\u0002\u00fb\u000b\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u0100\n\u0002\f\u0002\u000e\u0002\u0103",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u0108\n",
    "\u0002\f\u0002\u000e\u0002\u010b\u000b\u0002\u0005\u0002\u010d\n\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0129\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u012e\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0007\u0006",
    "\u0137\n\u0006\f\u0006\u000e\u0006\u013a\u000b\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0141\n\u0006",
    "\u0005\u0006\u0143\n\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0005\u0007\u014f\n\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0005",
    "\t\u0155\n\t\u0003\t\u0003\t\u0003\t\u0005\t\u015a\n\t\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0162\n\n\f\n\u000e\n\u0165",
    "\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u016e\n\u000b\u0003\u000b\u0003\u000b\u0005",
    "\u000b\u0172\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f",
    "\u0179\n\f\u0003\f\u0003\f\u0003\f\u0005\f\u017e\n\f\u0005\f\u0180\n",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u018c\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0005\r\u0193\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0005\r\u019c\n\r\u0005\r\u019e\n\r\u0005\r\u01a0\n\r\u0005\r\u01a2",
    "\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01a7\n\u000e\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u01ab\n\u000f\u0003\u0010\u0003\u0010",
    "\u0007\u0010\u01af\n\u0010\f\u0010\u000e\u0010\u01b2\u000b\u0010\u0003",
    "\u0010\u0005\u0010\u01b5\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u01bf\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01c8\n\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u01cd\n\u0010\u0003\u0011\u0003",
    "\u0011\u0005\u0011\u01d1\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0007\u0011\u01d6\n\u0011\f\u0011\u000e\u0011\u01d9\u000b\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u01de\n\u0011\f\u0011\u000e",
    "\u0011\u01e1\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u01e7\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u01ed\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u01f3\n\u0012\u0003\u0012\u0003\u0012\u0007",
    "\u0012\u01f7\n\u0012\f\u0012\u000e\u0012\u01fa\u000b\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0007\u0012\u01ff\n\u0012\f\u0012\u000e\u0012",
    "\u0202\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u0208\n\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0007\u0013\u020e\n\u0013\f\u0013\u000e\u0013\u0211\u000b\u0013\u0003",
    "\u0013\u0005\u0013\u0214\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0007\u0013\u021b\n\u0013\f\u0013\u000e\u0013",
    "\u021e\u000b\u0013\u0005\u0013\u0220\n\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0007\u0013\u0225\n\u0013\f\u0013\u000e\u0013\u0228\u000b",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u0230\n\u0013\f\u0013\u000e\u0013\u0233\u000b\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0237\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0007\u0013\u0241\n\u0013\f\u0013\u000e\u0013\u0244\u000b\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u024a\n",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0007\u0013\u0253\n\u0013\f\u0013\u000e\u0013\u0256",
    "\u000b\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u025a\n\u0013\u0003",
    "\u0013\u0003\u0013\u0005\u0013\u025e\n\u0013\u0005\u0013\u0260\n\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0005\u0014\u0269\n\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u026f\n\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u0273\n\u0014\u0003\u0014\u0005\u0014\u0276\n\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u027c\n\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0007\u0015\u0286\n\u0015\f\u0015\u000e\u0015",
    "\u0289\u000b\u0015\u0005\u0015\u028b\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0291\n\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0005\u0015\u0296\n\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u029b\n\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u02a4",
    "\n\u0016\f\u0016\u000e\u0016\u02a7\u000b\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u02b5\n",
    "\u0018\f\u0018\u000e\u0018\u02b8\u000b\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0007\u0018\u02bd\n\u0018\f\u0018\u000e\u0018\u02c0\u000b",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u02c5\n\u0018",
    "\u0003\u0018\u0003\u0018\u0007\u0018\u02c9\n\u0018\f\u0018\u000e\u0018",
    "\u02cc\u000b\u0018\u0003\u0018\u0005\u0018\u02cf\n\u0018\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0007\u0019\u02d4\n\u0019\f\u0019\u000e\u0019",
    "\u02d7\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0007\u0019\u02df\n\u0019\f\u0019\u000e\u0019\u02e2",
    "\u000b\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u02e6\n\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u02ed",
    "\n\u0019\f\u0019\u000e\u0019\u02f0\u000b\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0005\u0019\u02f6\n\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u02fd\n\u001a",
    "\u0003\u001a\u0003\u001a\u0007\u001a\u0301\n\u001a\f\u001a\u000e\u001a",
    "\u0304\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0007\u001a\u030c\n\u001a\f\u001a\u000e\u001a\u030f",
    "\u000b\u001a\u0005\u001a\u0311\n\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u0318\n\u001a\f\u001a\u000e",
    "\u001a\u031b\u000b\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u031f\n",
    "\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007",
    "\u001a\u0326\n\u001a\f\u001a\u000e\u001a\u0329\u000b\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u032f\n\u001a\u0003",
    "\u001b\u0003\u001b\u0007\u001b\u0333\n\u001b\f\u001b\u000e\u001b\u0336",
    "\u000b\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u033c\n\u001b\f\u001b\u000e\u001b\u033f\u000b\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0344\n\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0007\u001b\u034a\n\u001b\f\u001b\u000e\u001b",
    "\u034d\u000b\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0352",
    "\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c",
    "\u0358\n\u001c\f\u001c\u000e\u001c\u035b\u000b\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0005\u001c\u0360\n\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0007\u001c\u0366\n\u001c\f\u001c\u000e\u001c",
    "\u0369\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u036e",
    "\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0007\u001d",
    "\u0374\n\u001d\f\u001d\u000e\u001d\u0377\u000b\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u0383\n\u001d\f\u001d\u000e",
    "\u001d\u0386\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0007\u001d\u038d\n\u001d\f\u001d\u000e\u001d\u0390\u000b",
    "\u001d\u0003\u001d\u0005\u001d\u0393\n\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d",
    "\u039c\n\u001d\u0005\u001d\u039e\n\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u03a3\n\u001e\u0003\u001e\u0005\u001e\u03a6\n\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u03ab\n\u001e\f\u001e",
    "\u000e\u001e\u03ae\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u03b5\n\u001e\f\u001e\u000e\u001e\u03b8",
    "\u000b\u001e\u0005\u001e\u03ba\n\u001e\u0005\u001e\u03bc\n\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u03c1\n\u001e\f\u001e\u000e",
    "\u001e\u03c4\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0007\u001e\u03cc\n\u001e\f\u001e\u000e\u001e",
    "\u03cf\u000b\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u03d3\n\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0007\u001f\u03db\n\u001f\f\u001f\u000e\u001f\u03de\u000b\u001f\u0003",
    "\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003!\u0003!",
    "\u0003!\u0003!\u0007!\u03eb\n!\f!\u000e!\u03ee\u000b!\u0003!\u0003!",
    "\u0003\"\u0003\"\u0003\"\u0005\"\u03f5\n\"\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u03fa\n\"\f\"\u000e\"\u03fd\u000b\"\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u0402\n\"\f\"\u000e\"\u0405\u000b\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u040c\n\"\u0003\"\u0003\"\u0003\"\u0007\"\u0411\n",
    "\"\f\"\u000e\"\u0414\u000b\"\u0003\"\u0003\"\u0003\"\u0007\"\u0419\n",
    "\"\f\"\u000e\"\u041c\u000b\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"",
    "\u0007\"\u0423\n\"\f\"\u000e\"\u0426\u000b\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u0432",
    "\n\"\f\"\u000e\"\u0435\u000b\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u0442\n\"",
    "\f\"\u000e\"\u0445\u000b\"\u0005\"\u0447\n\"\u0003\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u0450\n\"\f\"\u000e\"\u0453",
    "\u000b\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u045c\n\"\f\"\u000e\"\u045f\u000b\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007\"\u0469\n\"\f\"\u000e\"\u046c",
    "\u000b\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u0474",
    "\n\"\u0005\"\u0476\n\"\u0003#\u0003#\u0003#\u0007#\u047b\n#\f#\u000e",
    "#\u047e\u000b#\u0003#\u0003#\u0003#\u0007#\u0483\n#\f#\u000e#\u0486",
    "\u000b#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u048d\n#\f#\u000e",
    "#\u0490\u000b#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0005#\u049a\n#\u0003#\u0003#\u0007#\u049e\n#\f#\u000e#\u04a1\u000b",
    "#\u0003#\u0003#\u0003#\u0007#\u04a6\n#\f#\u000e#\u04a9\u000b#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0005#\u04b0\n#\u0005#\u04b2\n#\u0003",
    "$\u0003$\u0003$\u0005$\u04b7\n$\u0003$\u0003$\u0003$\u0005$\u04bc\n",
    "$\u0003$\u0003$\u0007$\u04c0\n$\f$\u000e$\u04c3\u000b$\u0003$\u0003",
    "$\u0003$\u0007$\u04c8\n$\f$\u000e$\u04cb\u000b$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0007$\u04d4\n$\f$\u000e$\u04d7\u000b",
    "$\u0003$\u0003$\u0003$\u0005$\u04dc\n$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0007$\u04e3\n$\f$\u000e$\u04e6\u000b$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u04f2\n$\f$\u000e",
    "$\u04f5\u000b$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0007$\u04ff\n$\f$\u000e$\u0502\u000b$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0005$\u0509\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007$\u0510",
    "\n$\f$\u000e$\u0513\u000b$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005",
    "$\u051a\n$\u0003%\u0003%\u0007%\u051e\n%\f%\u000e%\u0521\u000b%\u0003",
    "%\u0003%\u0003%\u0007%\u0526\n%\f%\u000e%\u0529\u000b%\u0003%\u0003",
    "%\u0003%\u0007%\u052e\n%\f%\u000e%\u0531\u000b%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0005%\u0538\n%\u0003&\u0003&\u0007&\u053c\n&\f&\u000e",
    "&\u053f\u000b&\u0003&\u0003&\u0003&\u0007&\u0544\n&\f&\u000e&\u0547",
    "\u000b&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0007&\u054f\n&\f",
    "&\u000e&\u0552\u000b&\u0003&\u0003&\u0003&\u0003&\u0005&\u0558\n&\u0003",
    "&\u0003&\u0003&\u0003&\u0007&\u055e\n&\f&\u000e&\u0561\u000b&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0005&\u0568\n&\u0003\'\u0003\'\u0007",
    "\'\u056c\n\'\f\'\u000e\'\u056f\u000b\'\u0003\'\u0003\'\u0003\'\u0007",
    "\'\u0574\n\'\f\'\u000e\'\u0577\u000b\'\u0003(\u0003(\u0007(\u057b\n",
    "(\f(\u000e(\u057e\u000b(\u0003(\u0003(\u0003(\u0007(\u0583\n(\f(\u000e",
    "(\u0586\u000b(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0005",
    "(\u058f\n(\u0003(\u0003(\u0005(\u0593\n(\u0003(\u0003(\u0007(\u0597",
    "\n(\f(\u000e(\u059a\u000b(\u0005(\u059c\n(\u0003(\u0003(\u0003)\u0003",
    ")\u0003)\u0003)\u0003*\u0003*\u0007*\u05a6\n*\f*\u000e*\u05a9\u000b",
    "*\u0003*\u0003*\u0003*\u0005*\u05ae\n*\u0003+\u0003+\u0007+\u05b2\n",
    "+\f+\u000e+\u05b5\u000b+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0005,\u05c0\n,\u0003,\u0005,\u05c3\n,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0005,\u05ca\n,\u0005,\u05cc\n,\u0003,\u0003",
    ",\u0003,\u0003,\u0005,\u05d2\n,\u0003,\u0003,\u0003-\u0003-\u0003-\u0005",
    "-\u05d9\n-\u0003-\u0003-\u0005-\u05dd\n-\u0003-\u0003-\u0005-\u05e1",
    "\n-\u0003-\u0005-\u05e4\n-\u0003-\u0003-\u0003-\u0007-\u05e9\n-\f-\u000e",
    "-\u05ec\u000b-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u05f3\n-\u0003",
    "-\u0003-\u0003-\u0005-\u05f8\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005",
    "-\u0613\n-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u061a\n-\u0003",
    "-\u0003-\u0005-\u061e\n-\u0003-\u0003-\u0005-\u0622\n-\u0003-\u0003",
    "-\u0007-\u0626\n-\f-\u000e-\u0629\u000b-\u0003-\u0003-\u0005-\u062d",
    "\n-\u0003-\u0003-\u0007-\u0631\n-\f-\u000e-\u0634\u000b-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0007-\u063b\n-\f-\u000e-\u063e\u000b-\u0003",
    "-\u0003-\u0003-\u0005-\u0643\n-\u0005-\u0645\n-\u0005-\u0647\n-\u0003",
    "-\u0003-\u0003-\u0003-\u0005-\u064d\n-\u0003-\u0003-\u0007-\u0651\n",
    "-\f-\u000e-\u0654\u000b-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0007-\u065d\n-\f-\u000e-\u0660\u000b-\u0003-\u0003-\u0003-\u0007",
    "-\u0665\n-\f-\u000e-\u0668\u000b-\u0005-\u066a\n-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0007-\u0671\n-\f-\u000e-\u0674\u000b-\u0003-\u0003",
    "-\u0003-\u0003-\u0007-\u067a\n-\f-\u000e-\u067d\u000b-\u0003-\u0003",
    "-\u0003-\u0005-\u0682\n-\u0003-\u0003-\u0003-\u0007-\u0687\n-\f-\u000e",
    "-\u068a\u000b-\u0005-\u068c\n-\u0003-\u0003-\u0005-\u0690\n-\u0003-",
    "\u0003-\u0003-\u0003-\u0003-\u0007-\u0697\n-\f-\u000e-\u069a\u000b-",
    "\u0003-\u0003-\u0005-\u069e\n-\u0003.\u0003.\u0005.\u06a2\n.\u0003.",
    "\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0007/\u06ac\n/\f",
    "/\u000e/\u06af\u000b/\u0003/\u0003/\u0003/\u0005/\u06b4\n/\u0003/\u0003",
    "/\u0005/\u06b8\n/\u0003/\u0005/\u06bb\n/\u00030\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u06c8\n0\u0003",
    "0\u00030\u00030\u00030\u00050\u06ce\n0\u00030\u00030\u00030\u00030\u0005",
    "0\u06d4\n0\u00030\u00030\u00050\u06d8\n0\u00050\u06da\n0\u00030\u0003",
    "0\u00050\u06de\n0\u00030\u00030\u00030\u00030\u00050\u06e4\n0\u0003",
    "0\u00030\u00070\u06e8\n0\f0\u000e0\u06eb\u000b0\u00030\u00030\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00070\u06f5\n0\f0\u000e0\u06f8",
    "\u000b0\u00050\u06fa\n0\u00030\u00030\u00030\u00070\u06ff\n0\f0\u000e",
    "0\u0702\u000b0\u00030\u00030\u00030\u00070\u0707\n0\f0\u000e0\u070a",
    "\u000b0\u00030\u00030\u00030\u00030\u00050\u0710\n0\u00030\u00050\u0713",
    "\n0\u00030\u00030\u00050\u0717\n0\u00050\u0719\n0\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00071\u0721\n1\f1\u000e1\u0724\u000b1\u0005",
    "1\u0726\n1\u00031\u00031\u00031\u00032\u00032\u00032\u00032\u00032\u0003",
    "2\u00072\u0731\n2\f2\u000e2\u0734\u000b2\u00052\u0736\n2\u00032\u0003",
    "2\u00032\u00033\u00033\u00033\u00033\u00073\u073f\n3\f3\u000e3\u0742",
    "\u000b3\u00033\u00053\u0745\n3\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00074\u074d\n4\f4\u000e4\u0750\u000b4\u00054\u0752\n4\u00034\u0003",
    "4\u00034\u00035\u00035\u00075\u0759\n5\f5\u000e5\u075c\u000b5\u0003",
    "5\u00035\u00035\u00075\u0761\n5\f5\u000e5\u0764\u000b5\u00035\u0003",
    "5\u00055\u0768\n5\u00035\u00035\u00075\u076c\n5\f5\u000e5\u076f\u000b",
    "5\u00036\u00036\u00036\u00036\u00036\u00056\u0776\n6\u00037\u00037\u0005",
    "7\u077a\n7\u00037\u00037\u00057\u077e\n7\u00037\u00037\u00037\u0005",
    "7\u0783\n7\u00038\u00038\u00038\u00038\u00078\u0789\n8\f8\u000e8\u078c",
    "\u000b8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00078\u0795",
    "\n8\f8\u000e8\u0798\u000b8\u00038\u00038\u00058\u079c\n8\u00038\u0003",
    "8\u00038\u00038\u00038\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003",
    ":\u0005:\u07aa\n:\u0003:\u0003:\u0003:\u0005:\u07af\n:\u0003:\u0003",
    ":\u0005:\u07b3\n:\u0003:\u0003:\u0003:\u0003:\u0007:\u07b9\n:\f:\u000e",
    ":\u07bc\u000b:\u0003:\u0003:\u0005:\u07c0\n:\u0005:\u07c2\n:\u0005:",
    "\u07c4\n:\u0003;\u0003;\u0003;\u0003;\u0005;\u07ca\n;\u0003;\u0003;",
    "\u0003;\u0005;\u07cf\n;\u0003;\u0003;\u0005;\u07d3\n;\u0003;\u0003;",
    "\u0003;\u0003;\u0007;\u07d9\n;\f;\u000e;\u07dc\u000b;\u0003;\u0003;",
    "\u0005;\u07e0\n;\u0005;\u07e2\n;\u0003;\u0003;\u0003<\u0003<\u0003<",
    "\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005",
    "<\u07f2\n<\u0003<\u0005<\u07f5\n<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0005<\u07fd\n<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0005<\u0806\n<\u0003<\u0003<\u0005<\u080a\n<\u0003<\u0003<\u0003",
    "<\u0003<\u0005<\u0810\n<\u0003<\u0003<\u0007<\u0814\n<\f<\u000e<\u0817",
    "\u000b<\u0003<\u0003<\u0003<\u0003<\u0005<\u081d\n<\u0003<\u0003<\u0007",
    "<\u0821\n<\f<\u000e<\u0824\u000b<\u0003<\u0003<\u0003<\u0003<\u0003",
    "<\u0007<\u082b\n<\f<\u000e<\u082e\u000b<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0005<\u0836\n<\u0003<\u0005<\u0839\n<\u0005<\u083b",
    "\n<\u0003<\u0003<\u0005<\u083f\n<\u0003<\u0003<\u0007<\u0843\n<\f<\u000e",
    "<\u0846\u000b<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u084e",
    "\n<\u0003<\u0003<\u0007<\u0852\n<\f<\u000e<\u0855\u000b<\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003<\u0003<\u0003<\u0005<\u085f\n<\u0003<\u0003",
    "<\u0007<\u0863\n<\f<\u000e<\u0866\u000b<\u0003<\u0003<\u0003<\u0003",
    "<\u0007<\u086c\n<\f<\u000e<\u086f\u000b<\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003<\u0005<\u0877\n<\u0003<\u0005<\u087a\n<\u0003<\u0005",
    "<\u087d\n<\u0003<\u0003<\u0003<\u0003<\u0007<\u0883\n<\f<\u000e<\u0886",
    "\u000b<\u0003<\u0003<\u0003<\u0005<\u088b\n<\u0005<\u088d\n<\u0005<",
    "\u088f\n<\u0003=\u0003=\u0003=\u0007=\u0894\n=\f=\u000e=\u0897\u000b",
    "=\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0007>\u089f\n>\f>\u000e",
    ">\u08a2\u000b>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0005?\u08ac\n?\u0003?\u0003?\u0005?\u08b0\n?\u0003?\u0003?\u0005",
    "?\u08b4\n?\u0003?\u0003?\u0005?\u08b8\n?\u0003?\u0003?\u0003?\u0003",
    "?\u0007?\u08be\n?\f?\u000e?\u08c1\u000b?\u0003?\u0003?\u0005?\u08c5",
    "\n?\u0005?\u08c7\n?\u0003@\u0003@\u0005@\u08cb\n@\u0003@\u0003@\u0003",
    "@\u0003@\u0005@\u08d1\n@\u0003@\u0003@\u0005@\u08d5\n@\u0003@\u0003",
    "@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0007A\u08df\nA\fA\u000e",
    "A\u08e2\u000bA\u0005A\u08e4\nA\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0005A\u08ec\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0007B\u08f4",
    "\nB\fB\u000eB\u08f7\u000bB\u0005B\u08f9\nB\u0003B\u0003B\u0003B\u0005",
    "B\u08fe\nB\u0003B\u0003B\u0003B\u0003B\u0003B\u0005B\u0905\nB\u0003",
    "B\u0003B\u0007B\u0909\nB\fB\u000eB\u090c\u000bB\u0003B\u0003B\u0003",
    "C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u0920\nE\u0003E\u0003E\u0003",
    "E\u0005E\u0925\nE\u0003E\u0003E\u0003E\u0003E\u0005E\u092b\nE\u0005",
    "E\u092d\nE\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0005F\u0935\n",
    "F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005",
    "G\u0940\nG\u0003H\u0003H\u0003H\u0003H\u0003H\u0005H\u0947\nH\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0005I\u0955\nI\u0007I\u0957\nI\fI\u000eI\u095a\u000bI\u0003",
    "I\u0003I\u0003I\u0003I\u0007I\u0960\nI\fI\u000eI\u0963\u000bI\u0005",
    "I\u0965\nI\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0007",
    "J\u096f\nJ\fJ\u000eJ\u0972\u000bJ\u0003J\u0003J\u0003K\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u097f\nK\u0003L\u0003",
    "L\u0003L\u0003L\u0005L\u0985\nL\u0003L\u0003L\u0005L\u0989\nL\u0003",
    "L\u0003L\u0005L\u098d\nL\u0005L\u098f\nL\u0003L\u0003L\u0003L\u0007",
    "L\u0994\nL\fL\u000eL\u0997\u000bL\u0003L\u0003L\u0003L\u0005L\u099c",
    "\nL\u0003L\u0003L\u0003L\u0005L\u09a1\nL\u0003M\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u09ac\nM\fM\u000eM\u09af",
    "\u000bM\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "N\u0007N\u09ba\nN\fN\u000eN\u09bd\u000bN\u0003O\u0003O\u0003O\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0007O\u09c8\nO\fO\u000eO\u09cb",
    "\u000bO\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0007P\u09d6\nP\fP\u000eP\u09d9\u000bP\u0003Q\u0003Q\u0003Q\u0003",
    "Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0005R\u09ea\nR\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0005S\u09f4\nS\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0005T\u09ff\nT\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0005U\u0a07\nU\u0003U\u0003U\u0003U\u0005U\u0a0c\nU\u0003U\u0003",
    "U\u0003U\u0005U\u0a11\nU\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0005V\u0a1b\nV\u0003V\u0003V\u0003V\u0005V\u0a20\nV\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u0a28\nW\u0003W\u0003W\u0003",
    "W\u0005W\u0a2d\nW\u0003X\u0003X\u0003X\u0003X\u0005X\u0a33\nX\u0003",
    "X\u0003X\u0003X\u0007X\u0a38\nX\fX\u000eX\u0a3b\u000bX\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0007Y\u0a4a\nY\fY\u000eY\u0a4d\u000bY\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u0a52\nY\u0003Y\u0003Y\u0005Y\u0a56\nY\u0003Y\u0005Y\u0a59",
    "\nY\u0003Y\u0005Y\u0a5c\nY\u0003Y\u0003Y\u0005Y\u0a60\nY\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0007Y\u0a67\nY\fY\u000eY\u0a6a\u000bY\u0003",
    "Y\u0003Y\u0003Y\u0005Y\u0a6f\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u0a75",
    "\nY\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u0a7f",
    "\nY\fY\u000eY\u0a82\u000bY\u0005Y\u0a84\nY\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u0a8a\nY\u0005Y\u0a8c\nY\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0006Z\u0a95\nZ\rZ\u000eZ\u0a96\u0005Z\u0a99\nZ\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0007[\u0aaa\n[\f[\u000e[\u0aad\u000b",
    "[\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u0ab3\n\\\u0003\\\u0003\\",
    "\u0003\\\u0003\\\u0005\\\u0ab9\n\\\u0003\\\u0005\\\u0abc\n\\\u0003\\",
    "\u0003\\\u0003\\\u0003\\\u0005\\\u0ac2\n\\\u0003\\\u0005\\\u0ac5\n\\",
    "\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u0acb\n\\\u0003\\\u0005\\\u0ace",
    "\n\\\u0003\\\u0003\\\u0005\\\u0ad2\n\\\u0003\\\u0003\\\u0003]\u0005",
    "]\u0ad7\n]\u0003]\u0003]\u0003]\u0003]\u0005]\u0add\n]\u0003]\u0003",
    "]\u0005]\u0ae1\n]\u0003]\u0003]\u0003]\u0003]\u0005]\u0ae7\n]\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0005^\u0aee\n^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0005^\u0af7\n^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005^\u0b06",
    "\n^\u0003^\u0003^\u0003^\u0003^\u0005^\u0b0c\n^\u0005^\u0b0e\n^\u0003",
    "_\u0003_\u0003_\u0003_\u0005_\u0b14\n_\u0003_\u0005_\u0b17\n_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0005_\u0b1e\n_\u0003_\u0005_\u0b21\n",
    "_\u0007_\u0b23\n_\f_\u000e_\u0b26\u000b_\u0003`\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0007`\u0b2e\n`\f`\u000e`\u0b31\u000b`\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0007a\u0b39\na\fa\u000ea\u0b3c\u000b",
    "a\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u0b4d\nb\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0005b\u0b54\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0005b\u0b5d\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003",
    "b\u0003b\u0003b\u0003b\u0005b\u0b69\nb\u0005b\u0b6b\nb\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\u0b7f\nc\u0005c\u0b81",
    "\nc\u0003d\u0003d\u0003d\u0003d\u0003d\u0003d\u0007d\u0b89\nd\fd\u000e",
    "d\u0b8c\u000bd\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0007e\u0b94",
    "\ne\fe\u000ee\u0b97\u000be\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0007f\u0b9f\nf\ff\u000ef\u0ba2\u000bf\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0006g\u0bb8\ng\rg\u000e",
    "g\u0bb9\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0006g\u0bc2\ng\r",
    "g\u000eg\u0bc3\u0005g\u0bc6\ng\u0003g\u0003g\u0003g\u0003g\u0005g\u0bcc",
    "\ng\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0005g\u0bda\ng\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0005g\u0be2\ng\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0007g\u0bf2\ng\fg\u000e",
    "g\u0bf5\u000bg\u0003g\u0003g\u0003g\u0005g\u0bfa\ng\u0005g\u0bfc\ng",
    "\u0005g\u0bfe\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0003i\u0003i\u0003i\u0003i\u0005i\u0c0e\ni\u0003i\u0005",
    "i\u0c11\ni\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0c18\ni\u0003",
    "i\u0005i\u0c1b\ni\u0007i\u0c1d\ni\fi\u000ei\u0c20\u000bi\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0007",
    "j\u0c2d\nj\fj\u000ej\u0c30\u000bj\u0003j\u0003j\u0003j\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0007k\u0c42\nk\fk\u000ek\u0c45\u000bk\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0007k\u0c51\nk\f",
    "k\u000ek\u0c54\u000bk\u0003k\u0003k\u0003k\u0003k\u0003k\u0007k\u0c5b",
    "\nk\fk\u000ek\u0c5e\u000bk\u0003k\u0003k\u0003k\u0005k\u0c63\nk\u0003",
    "k\u0005k\u0c66\nk\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0003m\u0003",
    "m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0003m\u0005m\u0c7b\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u0c82",
    "\nm\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005",
    "m\u0c8d\nm\u0006m\u0c8f\nm\rm\u000em\u0c90\u0005m\u0c93\nm\u0003n\u0003",
    "n\u0005n\u0c97\nn\u0003n\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003p\u0003p\u0003p\u0003q\u0003q\u0005q\u0ca8\nq\u0003",
    "q\u0003q\u0005q\u0cac\nq\u0005q\u0cae\nq\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0007r\u0cb6\nr\fr\u000er\u0cb9\u000br\u0003r\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0003r\u0005",
    "r\u0cc6\nr\u0003r\u0005r\u0cc9\nr\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0003r\u0005r\u0cd5\nr\u0003r\u0005r\u0cd8",
    "\nr\u0007r\u0cda\nr\fr\u000er\u0cdd\u000br\u0005r\u0cdf\nr\u0003r\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0003r\u0005r\u0ce8\nr\u0003r\u0003r\u0005",
    "r\u0cec\nr\u0003s\u0005s\u0cef\ns\u0003s\u0003s\u0005s\u0cf3\ns\u0003",
    "s\u0003s\u0003s\u0005s\u0cf8\ns\u0003s\u0003s\u0003t\u0005t\u0cfd\n",
    "t\u0003t\u0003t\u0003t\u0003t\u0003t\u0005t\u0d04\nt\u0003t\u0003t\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0007u\u0d0f\nu\fu\u000e",
    "u\u0d12\u000bu\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0007u\u0d1f\nu\fu\u000eu\u0d22\u000bu\u0005",
    "u\u0d24\nu\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u0d2c\n",
    "u\u0003u\u0003u\u0003u\u0005u\u0d31\nu\u0003u\u0003u\u0005u\u0d35\n",
    "u\u0005u\u0d37\nu\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0005v\u0d47\nv\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0007w\u0d4f\nw\fw\u000ew\u0d52\u000b",
    "w\u0003x\u0003x\u0003x\u0003x\u0005x\u0d58\nx\u0003x\u0003x\u0003x\u0007",
    "x\u0d5d\nx\fx\u000ex\u0d60\u000bx\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003z\u0003z\u0003{\u0003{\u0003{\u0002\u0002|\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086",
    "\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e",
    "\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6",
    "\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce",
    "\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6",
    "\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u0002\u000f\u0004\u0002F",
    "FVV\u0004\u0002<<\u0093\u0093\u0004\u0002((..\u0004\u0002^^jj\u0004",
    "\u0002\u0013\u0013\u0093\u0093\u0004\u0002\u000b\u000b\u0014\u0019\u0004",
    "\u0002()99\u0003\u0002\f\r\u0004\u0002\u000e\u000e\u001b\u001b\u0006",
    "\u0002\u000e\u000e((..\u0093\u0093\u0007\u000201<<cc\u008d\u008d\u0093",
    "\u0093\u0004\u0002((\u0093\u0093\u0003\u0002>\u008d\u0002\u0f13\u0002",
    "\u00f9\u0003\u0002\u0002\u0002\u0004\u0110\u0003\u0002\u0002\u0002\u0006",
    "\u0114\u0003\u0002\u0002\u0002\b\u0118\u0003\u0002\u0002\u0002\n\u011c",
    "\u0003\u0002\u0002\u0002\f\u0146\u0003\u0002\u0002\u0002\u000e\u0150",
    "\u0003\u0002\u0002\u0002\u0010\u0152\u0003\u0002\u0002\u0002\u0012\u015b",
    "\u0003\u0002\u0002\u0002\u0014\u0168\u0003\u0002\u0002\u0002\u0016\u0173",
    "\u0003\u0002\u0002\u0002\u0018\u0181\u0003\u0002\u0002\u0002\u001a\u01a6",
    "\u0003\u0002\u0002\u0002\u001c\u01a8\u0003\u0002\u0002\u0002\u001e\u01ac",
    "\u0003\u0002\u0002\u0002 \u01d0\u0003\u0002\u0002\u0002\"\u01ec\u0003",
    "\u0002\u0002\u0002$\u0209\u0003\u0002\u0002\u0002&\u0261\u0003\u0002",
    "\u0002\u0002(\u027b\u0003\u0002\u0002\u0002*\u029c\u0003\u0002\u0002",
    "\u0002,\u02ab\u0003\u0002\u0002\u0002.\u02ae\u0003\u0002\u0002\u0002",
    "0\u02f5\u0003\u0002\u0002\u00022\u02f7\u0003\u0002\u0002\u00024\u0330",
    "\u0003\u0002\u0002\u00026\u036d\u0003\u0002\u0002\u00028\u036f\u0003",
    "\u0002\u0002\u0002:\u03a5\u0003\u0002\u0002\u0002<\u03d6\u0003\u0002",
    "\u0002\u0002>\u03e1\u0003\u0002\u0002\u0002@\u03e6\u0003\u0002\u0002",
    "\u0002B\u03f1\u0003\u0002\u0002\u0002D\u04b1\u0003\u0002\u0002\u0002",
    "F\u04b3\u0003\u0002\u0002\u0002H\u051b\u0003\u0002\u0002\u0002J\u0539",
    "\u0003\u0002\u0002\u0002L\u0569\u0003\u0002\u0002\u0002N\u0578\u0003",
    "\u0002\u0002\u0002P\u059f\u0003\u0002\u0002\u0002R\u05a3\u0003\u0002",
    "\u0002\u0002T\u05af\u0003\u0002\u0002\u0002V\u05b8\u0003\u0002\u0002",
    "\u0002X\u05d5\u0003\u0002\u0002\u0002Z\u06a1\u0003\u0002\u0002\u0002",
    "\\\u06ba\u0003\u0002\u0002\u0002^\u06bc\u0003\u0002\u0002\u0002`\u071a",
    "\u0003\u0002\u0002\u0002b\u072a\u0003\u0002\u0002\u0002d\u0744\u0003",
    "\u0002\u0002\u0002f\u0746\u0003\u0002\u0002\u0002h\u0756\u0003\u0002",
    "\u0002\u0002j\u0775\u0003\u0002\u0002\u0002l\u0782\u0003\u0002\u0002",
    "\u0002n\u0784\u0003\u0002\u0002\u0002p\u07a2\u0003\u0002\u0002\u0002",
    "r\u07c3\u0003\u0002\u0002\u0002t\u07c5\u0003\u0002\u0002\u0002v\u088e",
    "\u0003\u0002\u0002\u0002x\u0890\u0003\u0002\u0002\u0002z\u089b\u0003",
    "\u0002\u0002\u0002|\u08ab\u0003\u0002\u0002\u0002~\u08d4\u0003\u0002",
    "\u0002\u0002\u0080\u08eb\u0003\u0002\u0002\u0002\u0082\u0904\u0003\u0002",
    "\u0002\u0002\u0084\u090f\u0003\u0002\u0002\u0002\u0086\u0913\u0003\u0002",
    "\u0002\u0002\u0088\u0917\u0003\u0002\u0002\u0002\u008a\u0930\u0003\u0002",
    "\u0002\u0002\u008c\u0938\u0003\u0002\u0002\u0002\u008e\u0941\u0003\u0002",
    "\u0002\u0002\u0090\u0948\u0003\u0002\u0002\u0002\u0092\u0969\u0003\u0002",
    "\u0002\u0002\u0094\u0975\u0003\u0002\u0002\u0002\u0096\u0980\u0003\u0002",
    "\u0002\u0002\u0098\u09a2\u0003\u0002\u0002\u0002\u009a\u09b0\u0003\u0002",
    "\u0002\u0002\u009c\u09be\u0003\u0002\u0002\u0002\u009e\u09cc\u0003\u0002",
    "\u0002\u0002\u00a0\u09da\u0003\u0002\u0002\u0002\u00a2\u09e9\u0003\u0002",
    "\u0002\u0002\u00a4\u09f3\u0003\u0002\u0002\u0002\u00a6\u09fe\u0003\u0002",
    "\u0002\u0002\u00a8\u0a00\u0003\u0002\u0002\u0002\u00aa\u0a14\u0003\u0002",
    "\u0002\u0002\u00ac\u0a21\u0003\u0002\u0002\u0002\u00ae\u0a2e\u0003\u0002",
    "\u0002\u0002\u00b0\u0a8b\u0003\u0002\u0002\u0002\u00b2\u0a8d\u0003\u0002",
    "\u0002\u0002\u00b4\u0a9a\u0003\u0002\u0002\u0002\u00b6\u0ad1\u0003\u0002",
    "\u0002\u0002\u00b8\u0adc\u0003\u0002\u0002\u0002\u00ba\u0b0d\u0003\u0002",
    "\u0002\u0002\u00bc\u0b0f\u0003\u0002\u0002\u0002\u00be\u0b27\u0003\u0002",
    "\u0002\u0002\u00c0\u0b32\u0003\u0002\u0002\u0002\u00c2\u0b6a\u0003\u0002",
    "\u0002\u0002\u00c4\u0b80\u0003\u0002\u0002\u0002\u00c6\u0b82\u0003\u0002",
    "\u0002\u0002\u00c8\u0b8d\u0003\u0002\u0002\u0002\u00ca\u0b98\u0003\u0002",
    "\u0002\u0002\u00cc\u0bfd\u0003\u0002\u0002\u0002\u00ce\u0bff\u0003\u0002",
    "\u0002\u0002\u00d0\u0c09\u0003\u0002\u0002\u0002\u00d2\u0c21\u0003\u0002",
    "\u0002\u0002\u00d4\u0c34\u0003\u0002\u0002\u0002\u00d6\u0c6a\u0003\u0002",
    "\u0002\u0002\u00d8\u0c7a\u0003\u0002\u0002\u0002\u00da\u0c94\u0003\u0002",
    "\u0002\u0002\u00dc\u0c9d\u0003\u0002\u0002\u0002\u00de\u0ca2\u0003\u0002",
    "\u0002\u0002\u00e0\u0cad\u0003\u0002\u0002\u0002\u00e2\u0ceb\u0003\u0002",
    "\u0002\u0002\u00e4\u0cee\u0003\u0002\u0002\u0002\u00e6\u0cfc\u0003\u0002",
    "\u0002\u0002\u00e8\u0d36\u0003\u0002\u0002\u0002\u00ea\u0d46\u0003\u0002",
    "\u0002\u0002\u00ec\u0d48\u0003\u0002\u0002\u0002\u00ee\u0d53\u0003\u0002",
    "\u0002\u0002\u00f0\u0d61\u0003\u0002\u0002\u0002\u00f2\u0d66\u0003\u0002",
    "\u0002\u0002\u00f4\u0d68\u0003\u0002\u0002\u0002\u00f6\u00f8\u0005\n",
    "\u0006\u0002\u00f7\u00f6\u0003\u0002\u0002\u0002\u00f8\u00fb\u0003\u0002",
    "\u0002\u0002\u00f9\u00f7\u0003\u0002\u0002\u0002\u00f9\u00fa\u0003\u0002",
    "\u0002\u0002\u00fa\u010c\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003\u0002",
    "\u0002\u0002\u00fc\u0101\u0005\b\u0005\u0002\u00fd\u0100\u0005\n\u0006",
    "\u0002\u00fe\u0100\u0005\u001e\u0010\u0002\u00ff\u00fd\u0003\u0002\u0002",
    "\u0002\u00ff\u00fe\u0003\u0002\u0002\u0002\u0100\u0103\u0003\u0002\u0002",
    "\u0002\u0101\u00ff\u0003\u0002\u0002\u0002\u0101\u0102\u0003\u0002\u0002",
    "\u0002\u0102\u010d\u0003\u0002\u0002\u0002\u0103\u0101\u0003\u0002\u0002",
    "\u0002\u0104\u0109\u0005\u001e\u0010\u0002\u0105\u0108\u0005\n\u0006",
    "\u0002\u0106\u0108\u0005\u001e\u0010\u0002\u0107\u0105\u0003\u0002\u0002",
    "\u0002\u0107\u0106\u0003\u0002\u0002\u0002\u0108\u010b\u0003\u0002\u0002",
    "\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002",
    "\u0002\u010a\u010d\u0003\u0002\u0002\u0002\u010b\u0109\u0003\u0002\u0002",
    "\u0002\u010c\u00fc\u0003\u0002\u0002\u0002\u010c\u0104\u0003\u0002\u0002",
    "\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d\u010e\u0003\u0002\u0002",
    "\u0002\u010e\u010f\u0007\u0002\u0002\u0003\u010f\u0003\u0003\u0002\u0002",
    "\u0002\u0110\u0111\u0005\u0096L\u0002\u0111\u0112\b\u0003\u0001\u0002",
    "\u0112\u0113\u0007\u0002\u0002\u0003\u0113\u0005\u0003\u0002\u0002\u0002",
    "\u0114\u0115\u0005\u00be`\u0002\u0115\u0116\b\u0004\u0001\u0002\u0116",
    "\u0117\u0007\u0002\u0002\u0003\u0117\u0007\u0003\u0002\u0002\u0002\u0118",
    "\u0119\u0007s\u0002\u0002\u0119\u011a\u0005\u00ecw\u0002\u011a\u011b",
    "\u0007\u0003\u0002\u0002\u011b\t\u0003\u0002\u0002\u0002\u011c\u011d",
    "\b\u0006\u0001\u0002\u011d\u0142\u0007\u008a\u0002\u0002\u011e\u011f",
    "\u00070\u0002\u0002\u011f\u0120\u0007#\u0002\u0002\u0120\u0143\b\u0006",
    "\u0001\u0002\u0121\u0122\u0005\u000e\b\u0002\u0122\u0128\b\u0006\u0001",
    "\u0002\u0123\u0124\u0007*\u0002\u0002\u0124\u0125\u0005\u00f4{\u0002",
    "\u0125\u0126\b\u0006\u0001\u0002\u0126\u0129\u0003\u0002\u0002\u0002",
    "\u0127\u0129\b\u0006\u0001\u0002\u0128\u0123\u0003\u0002\u0002\u0002",
    "\u0128\u0127\u0003\u0002\u0002\u0002\u0129\u012d\u0003\u0002\u0002\u0002",
    "\u012a\u012b\u00070\u0002\u0002\u012b\u012c\u0007#\u0002\u0002\u012c",
    "\u012e\b\u0006\u0001\u0002\u012d\u012a\u0003\u0002\u0002\u0002\u012d",
    "\u012e\u0003\u0002\u0002\u0002\u012e\u0143\u0003\u0002\u0002\u0002\u012f",
    "\u0130\b\u0006\u0001\u0002\u0130\u0131\u0007\u0004\u0002\u0002\u0131",
    "\u0132\b\u0006\u0001\u0002\u0132\u0138\u0005\f\u0007\u0002\u0133\u0134",
    "\u0007\u0005\u0002\u0002\u0134\u0135\b\u0006\u0001\u0002\u0135\u0137",
    "\u0005\f\u0007\u0002\u0136\u0133\u0003\u0002\u0002\u0002\u0137\u013a",
    "\u0003\u0002\u0002\u0002\u0138\u0136\u0003\u0002\u0002\u0002\u0138\u0139",
    "\u0003\u0002\u0002\u0002\u0139\u013b\u0003\u0002\u0002\u0002\u013a\u0138",
    "\u0003\u0002\u0002\u0002\u013b\u013c\u0007\u0006\u0002\u0002\u013c\u0140",
    "\b\u0006\u0001\u0002\u013d\u013e\u00070\u0002\u0002\u013e\u013f\u0007",
    "#\u0002\u0002\u013f\u0141\b\u0006\u0001\u0002\u0140\u013d\u0003\u0002",
    "\u0002\u0002\u0140\u0141\u0003\u0002\u0002\u0002\u0141\u0143\u0003\u0002",
    "\u0002\u0002\u0142\u011e\u0003\u0002\u0002\u0002\u0142\u0121\u0003\u0002",
    "\u0002\u0002\u0142\u012f\u0003\u0002\u0002\u0002\u0143\u0144\u0003\u0002",
    "\u0002\u0002\u0144\u0145\u0007\u0003\u0002\u0002\u0145\u000b\u0003\u0002",
    "\u0002\u0002\u0146\u0147\b\u0007\u0001\u0002\u0147\u0148\u0005\u000e",
    "\b\u0002\u0148\u014e\b\u0007\u0001\u0002\u0149\u014a\u0007*\u0002\u0002",
    "\u014a\u014b\u0005\u00f4{\u0002\u014b\u014c\b\u0007\u0001\u0002\u014c",
    "\u014f\u0003\u0002\u0002\u0002\u014d\u014f\b\u0007\u0001\u0002\u014e",
    "\u0149\u0003\u0002\u0002\u0002\u014e\u014d\u0003\u0002\u0002\u0002\u014f",
    "\r\u0003\u0002\u0002\u0002\u0150\u0151\u0005\u00ecw\u0002\u0151\u000f",
    "\u0003\u0002\u0002\u0002\u0152\u0154\u0005\u00eex\u0002\u0153\u0155",
    "\u0005\u00f0y\u0002\u0154\u0153\u0003\u0002\u0002\u0002\u0154\u0155",
    "\u0003\u0002\u0002\u0002\u0155\u0159\u0003\u0002\u0002\u0002\u0156\u0157",
    "\u0007\u0007\u0002\u0002\u0157\u0158\b\t\u0001\u0002\u0158\u015a\u0005",
    "\u00e0q\u0002\u0159\u0156\u0003\u0002\u0002\u0002\u0159\u015a\u0003",
    "\u0002\u0002\u0002\u015a\u0011\u0003\u0002\u0002\u0002\u015b\u015c\u0007",
    "\b\u0002\u0002\u015c\u015d\b\n\u0001\u0002\u015d\u0163\u0005\u0010\t",
    "\u0002\u015e\u015f\u0007\u0005\u0002\u0002\u015f\u0160\b\n\u0001\u0002",
    "\u0160\u0162\u0005\u0010\t\u0002\u0161\u015e\u0003\u0002\u0002\u0002",
    "\u0162\u0165\u0003\u0002\u0002\u0002\u0163\u0161\u0003\u0002\u0002\u0002",
    "\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0166\u0003\u0002\u0002\u0002",
    "\u0165\u0163\u0003\u0002\u0002\u0002\u0166\u0167\u0007\t\u0002\u0002",
    "\u0167\u0013\u0003\u0002\u0002\u0002\u0168\u0171\u0007\n\u0002\u0002",
    "\u0169\u0172\u0005\u0012\n\u0002\u016a\u016b\b\u000b\u0001\u0002\u016b",
    "\u016d\u0005\u00eex\u0002\u016c\u016e\u0005\u00f0y\u0002\u016d\u016c",
    "\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002\u016e\u016f",
    "\u0003\u0002\u0002\u0002\u016f\u0170\b\u000b\u0001\u0002\u0170\u0172",
    "\u0003\u0002\u0002\u0002\u0171\u0169\u0003\u0002\u0002\u0002\u0171\u016a",
    "\u0003\u0002\u0002\u0002\u0172\u0015\u0003\u0002\u0002\u0002\u0173\u017f",
    "\u0007\n\u0002\u0002\u0174\u0180\u0005\u0012\n\u0002\u0175\u0176\b\f",
    "\u0001\u0002\u0176\u0178\u0005\u00eex\u0002\u0177\u0179\u0005\u00f0",
    "y\u0002\u0178\u0177\u0003\u0002\u0002\u0002\u0178\u0179\u0003\u0002",
    "\u0002\u0002\u0179\u017d\u0003\u0002\u0002\u0002\u017a\u017b\u0007\u0007",
    "\u0002\u0002\u017b\u017c\b\f\u0001\u0002\u017c\u017e\u0005\u00e0q\u0002",
    "\u017d\u017a\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002",
    "\u017e\u0180\u0003\u0002\u0002\u0002\u017f\u0174\u0003\u0002\u0002\u0002",
    "\u017f\u0175\u0003\u0002\u0002\u0002\u0180\u0017\u0003\u0002\u0002\u0002",
    "\u0181\u01a1\u0007\n\u0002\u0002\u0182\u01a2\u0005\u0012\n\u0002\u0183",
    "\u0184\b\r\u0001\u0002\u0184\u0185\u0005\u00eex\u0002\u0185\u018b\b",
    "\r\u0001\u0002\u0186\u0187\u0007\u0091\u0002\u0002\u0187\u0188\b\r\u0001",
    "\u0002\u0188\u0189\u0005\u00f4{\u0002\u0189\u018a\b\r\u0001\u0002\u018a",
    "\u018c\u0003\u0002\u0002\u0002\u018b\u0186\u0003\u0002\u0002\u0002\u018b",
    "\u018c\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d",
    "\u019f\b\r\u0001\u0002\u018e\u018f\u0007\u0092\u0002\u0002\u018f\u019d",
    "\b\r\u0001\u0002\u0190\u019e\u0005\u00e2r\u0002\u0191\u0193\u0007\n",
    "\u0002\u0002\u0192\u0191\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002",
    "\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u0195\u0005\u00ee",
    "x\u0002\u0195\u019b\b\r\u0001\u0002\u0196\u0197\u0007\u0091\u0002\u0002",
    "\u0197\u0198\b\r\u0001\u0002\u0198\u0199\u0005\u00f4{\u0002\u0199\u019a",
    "\b\r\u0001\u0002\u019a\u019c\u0003\u0002\u0002\u0002\u019b\u0196\u0003",
    "\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019e\u0003",
    "\u0002\u0002\u0002\u019d\u0190\u0003\u0002\u0002\u0002\u019d\u0192\u0003",
    "\u0002\u0002\u0002\u019e\u01a0\u0003\u0002\u0002\u0002\u019f\u018e\u0003",
    "\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a2\u0003",
    "\u0002\u0002\u0002\u01a1\u0182\u0003\u0002\u0002\u0002\u01a1\u0183\u0003",
    "\u0002\u0002\u0002\u01a2\u0019\u0003\u0002\u0002\u0002\u01a3\u01a7\u0007",
    "\u0003\u0002\u0002\u01a4\u01a5\b\u000e\u0001\u0002\u01a5\u01a7\u0007",
    "\u0006\u0002\u0002\u01a6\u01a3\u0003\u0002\u0002\u0002\u01a6\u01a4\u0003",
    "\u0002\u0002\u0002\u01a7\u001b\u0003\u0002\u0002\u0002\u01a8\u01aa\b",
    "\u000f\u0001\u0002\u01a9\u01ab\u0007\u0003\u0002\u0002\u01aa\u01a9\u0003",
    "\u0002\u0002\u0002\u01aa\u01ab\u0003\u0002\u0002\u0002\u01ab\u001d\u0003",
    "\u0002\u0002\u0002\u01ac\u01b0\b\u0010\u0001\u0002\u01ad\u01af\u0005",
    "\u0016\f\u0002\u01ae\u01ad\u0003\u0002\u0002\u0002\u01af\u01b2\u0003",
    "\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003",
    "\u0002\u0002\u0002\u01b1\u01cc\u0003\u0002\u0002\u0002\u01b2\u01b0\u0003",
    "\u0002\u0002\u0002\u01b3\u01b5\u0007O\u0002\u0002\u01b4\u01b3\u0003",
    "\u0002\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5\u01be\u0003",
    "\u0002\u0002\u0002\u01b6\u01bf\u0005 \u0011\u0002\u01b7\u01bf\u0005",
    "$\u0013\u0002\u01b8\u01bf\u0005<\u001f\u0002\u01b9\u01bf\u0005:\u001e",
    "\u0002\u01ba\u01bf\u0005@!\u0002\u01bb\u01bf\u0005n8\u0002\u01bc\u01bf",
    "\u00058\u001d\u0002\u01bd\u01bf\u00056\u001c\u0002\u01be\u01b6\u0003",
    "\u0002\u0002\u0002\u01be\u01b7\u0003\u0002\u0002\u0002\u01be\u01b8\u0003",
    "\u0002\u0002\u0002\u01be\u01b9\u0003\u0002\u0002\u0002\u01be\u01ba\u0003",
    "\u0002\u0002\u0002\u01be\u01bb\u0003\u0002\u0002\u0002\u01be\u01bc\u0003",
    "\u0002\u0002\u0002\u01be\u01bd\u0003\u0002\u0002\u0002\u01bf\u01cd\u0003",
    "\u0002\u0002\u0002\u01c0\u01c1\u0007]\u0002\u0002\u01c1\u01c7\b\u0010",
    "\u0001\u0002\u01c2\u01c8\u0005\"\u0012\u0002\u01c3\u01c8\u0005.\u0018",
    "\u0002\u01c4\u01c8\u00052\u001a\u0002\u01c5\u01c8\u0005> \u0002\u01c6",
    "\u01c8\u0005B\"\u0002\u01c7\u01c2\u0003\u0002\u0002\u0002\u01c7\u01c3",
    "\u0003\u0002\u0002\u0002\u01c7\u01c4\u0003\u0002\u0002\u0002\u01c7\u01c5",
    "\u0003\u0002\u0002\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c8\u01cd",
    "\u0003\u0002\u0002\u0002\u01c9\u01ca\u0007B\u0002\u0002\u01ca\u01cb",
    "\b\u0010\u0001\u0002\u01cb\u01cd\u0005F$\u0002\u01cc\u01b4\u0003\u0002",
    "\u0002\u0002\u01cc\u01c0\u0003\u0002\u0002\u0002\u01cc\u01c9\u0003\u0002",
    "\u0002\u0002\u01cd\u001f\u0003\u0002\u0002\u0002\u01ce\u01d1\u0007K",
    "\u0002\u0002\u01cf\u01d1\u0007\u0083\u0002\u0002\u01d0\u01ce\u0003\u0002",
    "\u0002\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002",
    "\u0002\u0002\u01d2\u01d3\u0005\u00ecw\u0002\u01d3\u01d7\b\u0011\u0001",
    "\u0002\u01d4\u01d6\u0005\u0014\u000b\u0002\u01d5\u01d4\u0003\u0002\u0002",
    "\u0002\u01d6\u01d9\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003\u0002\u0002",
    "\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01e6\u0003\u0002\u0002",
    "\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01da\u01db\u0007\u0004\u0002",
    "\u0002\u01db\u01df\b\u0011\u0001\u0002\u01dc\u01de\u0005\u001e\u0010",
    "\u0002\u01dd\u01dc\u0003\u0002\u0002\u0002\u01de\u01e1\u0003\u0002\u0002",
    "\u0002\u01df\u01dd\u0003\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002",
    "\u0002\u01e0\u01e2\u0003\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002",
    "\u0002\u01e2\u01e3\u0007\u0006\u0002\u0002\u01e3\u01e4\b\u0011\u0001",
    "\u0002\u01e4\u01e7\u0005\u001c\u000f\u0002\u01e5\u01e7\u0005\u001a\u000e",
    "\u0002\u01e6\u01da\u0003\u0002\u0002\u0002\u01e6\u01e5\u0003\u0002\u0002",
    "\u0002\u01e7!\u0003\u0002\u0002\u0002\u01e8\u01e9\u0007K\u0002\u0002",
    "\u01e9\u01ed\b\u0012\u0001\u0002\u01ea\u01eb\u0007\u0083\u0002\u0002",
    "\u01eb\u01ed\b\u0012\u0001\u0002\u01ec\u01e8\u0003\u0002\u0002\u0002",
    "\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002\u0002",
    "\u01ee\u01ef\u0005\u00ecw\u0002\u01ef\u01f2\b\u0012\u0001\u0002\u01f0",
    "\u01f1\u0007<\u0002\u0002\u01f1\u01f3\b\u0012\u0001\u0002\u01f2\u01f0",
    "\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01f4",
    "\u0003\u0002\u0002\u0002\u01f4\u01f8\b\u0012\u0001\u0002\u01f5\u01f7",
    "\u0005\u0016\f\u0002\u01f6\u01f5\u0003\u0002\u0002\u0002\u01f7\u01fa",
    "\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002\u0002\u0002\u01f8\u01f9",
    "\u0003\u0002\u0002\u0002\u01f9\u0207\u0003\u0002\u0002\u0002\u01fa\u01f8",
    "\u0003\u0002\u0002\u0002\u01fb\u01fc\u0007\u0004\u0002\u0002\u01fc\u0200",
    "\b\u0012\u0001\u0002\u01fd\u01ff\u0005\u001e\u0010\u0002\u01fe\u01fd",
    "\u0003\u0002\u0002\u0002\u01ff\u0202\u0003\u0002\u0002\u0002\u0200\u01fe",
    "\u0003\u0002\u0002\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201\u0203",
    "\u0003\u0002\u0002\u0002\u0202\u0200\u0003\u0002\u0002\u0002\u0203\u0204",
    "\u0007\u0006\u0002\u0002\u0204\u0205\b\u0012\u0001\u0002\u0205\u0208",
    "\u0005\u001c\u000f\u0002\u0206\u0208\u0005\u001a\u000e\u0002\u0207\u01fb",
    "\u0003\u0002\u0002\u0002\u0207\u0206\u0003\u0002\u0002\u0002\u0208#",
    "\u0003\u0002\u0002\u0002\u0209\u020a\u0007V\u0002\u0002\u020a\u020b",
    "\u0005\u00ecw\u0002\u020b\u020f\b\u0013\u0001\u0002\u020c\u020e\u0005",
    "\u0014\u000b\u0002\u020d\u020c\u0003\u0002\u0002\u0002\u020e\u0211\u0003",
    "\u0002\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u020f\u0210\u0003",
    "\u0002\u0002\u0002\u0210\u0213\u0003\u0002\u0002\u0002\u0211\u020f\u0003",
    "\u0002\u0002\u0002\u0212\u0214\u0005f4\u0002\u0213\u0212\u0003\u0002",
    "\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u025f\u0003\u0002",
    "\u0002\u0002\u0215\u0216\u0007\u0007\u0002\u0002\u0216\u021c\u0005p",
    "9\u0002\u0217\u0218\u0007\u0005\u0002\u0002\u0218\u0219\b\u0013\u0001",
    "\u0002\u0219\u021b\u0005p9\u0002\u021a\u0217\u0003\u0002\u0002\u0002",
    "\u021b\u021e\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002\u0002\u0002",
    "\u021c\u021d\u0003\u0002\u0002\u0002\u021d\u0220\u0003\u0002\u0002\u0002",
    "\u021e\u021c\u0003\u0002\u0002\u0002\u021f\u0215\u0003\u0002\u0002\u0002",
    "\u021f\u0220\u0003\u0002\u0002\u0002\u0220\u0221\u0003\u0002\u0002\u0002",
    "\u0221\u0222\u0007\u0004\u0002\u0002\u0222\u0226\b\u0013\u0001\u0002",
    "\u0223\u0225\u0005T+\u0002\u0224\u0223\u0003\u0002\u0002\u0002\u0225",
    "\u0228\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002\u0226",
    "\u0227\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002\u0002\u0228",
    "\u0226\u0003\u0002\u0002\u0002\u0229\u022a\u0007\u0006\u0002\u0002\u022a",
    "\u0236\b\u0013\u0001\u0002\u022b\u022c\u0007@\u0002\u0002\u022c\u022d",
    "\u0007\u0004\u0002\u0002\u022d\u0231\b\u0013\u0001\u0002\u022e\u0230",
    "\u00054\u001b\u0002\u022f\u022e\u0003\u0002\u0002\u0002\u0230\u0233",
    "\u0003\u0002\u0002\u0002\u0231\u022f\u0003\u0002\u0002\u0002\u0231\u0232",
    "\u0003\u0002\u0002\u0002\u0232\u0234\u0003\u0002\u0002\u0002\u0233\u0231",
    "\u0003\u0002\u0002\u0002\u0234\u0235\u0007\u0006\u0002\u0002\u0235\u0237",
    "\b\u0013\u0001\u0002\u0236\u022b\u0003\u0002\u0002\u0002\u0236\u0237",
    "\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238\u0260",
    "\u0005\u001c\u000f\u0002\u0239\u025d\u0007*\u0002\u0002\u023a\u023b",
    "\u0005\u0096L\u0002\u023b\u0249\b\u0013\u0001\u0002\u023c\u023d\u0007",
    "@\u0002\u0002\u023d\u023e\u0007\u0004\u0002\u0002\u023e\u0242\b\u0013",
    "\u0001\u0002\u023f\u0241\u00054\u001b\u0002\u0240\u023f\u0003\u0002",
    "\u0002\u0002\u0241\u0244\u0003\u0002\u0002\u0002\u0242\u0240\u0003\u0002",
    "\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u0245\u0003\u0002",
    "\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002\u0245\u0246\u0007\u0006",
    "\u0002\u0002\u0246\u0247\b\u0013\u0001\u0002\u0247\u024a\u0005\u001c",
    "\u000f\u0002\u0248\u024a\u0005\u001a\u000e\u0002\u0249\u023c\u0003\u0002",
    "\u0002\u0002\u0249\u0248\u0003\u0002\u0002\u0002\u024a\u025e\u0003\u0002",
    "\u0002\u0002\u024b\u024c\u0005&\u0014\u0002\u024c\u024d\b\u0013\u0001",
    "\u0002\u024d\u0259\u0005(\u0015\u0002\u024e\u024f\u0007@\u0002\u0002",
    "\u024f\u0250\u0007\u0004\u0002\u0002\u0250\u0254\b\u0013\u0001\u0002",
    "\u0251\u0253\u00054\u001b\u0002\u0252\u0251\u0003\u0002\u0002\u0002",
    "\u0253\u0256\u0003\u0002\u0002\u0002\u0254\u0252\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0003\u0002\u0002\u0002\u0255\u0257\u0003\u0002\u0002\u0002",
    "\u0256\u0254\u0003\u0002\u0002\u0002\u0257\u0258\u0007\u0006\u0002\u0002",
    "\u0258\u025a\b\u0013\u0001\u0002\u0259\u024e\u0003\u0002\u0002\u0002",
    "\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002",
    "\u025b\u025c\u0005\u001c\u000f\u0002\u025c\u025e\u0003\u0002\u0002\u0002",
    "\u025d\u023a\u0003\u0002\u0002\u0002\u025d\u024b\u0003\u0002\u0002\u0002",
    "\u025e\u0260\u0003\u0002\u0002\u0002\u025f\u021f\u0003\u0002\u0002\u0002",
    "\u025f\u0239\u0003\u0002\u0002\u0002\u0260%\u0003\u0002\u0002\u0002",
    "\u0261\u0262\u0007}\u0002\u0002\u0262\u0263\u00077\u0002\u0002\u0263",
    "\u0264\b\u0014\u0001\u0002\u0264\u0268\u0005\u00bc_\u0002\u0265\u0266",
    "\u0007\u0007\u0002\u0002\u0266\u0267\b\u0014\u0001\u0002\u0267\u0269",
    "\u0005\u00bc_\u0002\u0268\u0265\u0003\u0002\u0002\u0002\u0268\u0269",
    "\u0003\u0002\u0002\u0002\u0269\u026e\u0003\u0002\u0002\u0002\u026a\u026b",
    "\u0007*\u0002\u0002\u026b\u026c\u0005\u00f4{\u0002\u026c\u026d\b\u0014",
    "\u0001\u0002\u026d\u026f\u0003\u0002\u0002\u0002\u026e\u026a\u0003\u0002",
    "\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0270\u0003\u0002",
    "\u0002\u0002\u0270\u0272\b\u0014\u0001\u0002\u0271\u0273\u0005`1\u0002",
    "\u0272\u0271\u0003\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002",
    "\u0273\u0275\u0003\u0002\u0002\u0002\u0274\u0276\u0005*\u0016\u0002",
    "\u0275\u0274\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002\u0002",
    "\u0276\'\u0003\u0002\u0002\u0002\u0277\u0278\u0007;\u0002\u0002\u0278",
    "\u0279\u0005\u00be`\u0002\u0279\u027a\b\u0015\u0001\u0002\u027a\u027c",
    "\u0003\u0002\u0002\u0002\u027b\u0277\u0003\u0002\u0002\u0002\u027b\u027c",
    "\u0003\u0002\u0002\u0002\u027c\u028a\u0003\u0002\u0002\u0002\u027d\u027e",
    "\u0007c\u0002\u0002\u027e\u027f\u0007+\u0002\u0002\u027f\u0280\u0005",
    "\u00c6d\u0002\u0280\u0287\b\u0015\u0001\u0002\u0281\u0282\u0007\u0005",
    "\u0002\u0002\u0282\u0283\u0005\u00c6d\u0002\u0283\u0284\b\u0015\u0001",
    "\u0002\u0284\u0286\u0003\u0002\u0002\u0002\u0285\u0281\u0003\u0002\u0002",
    "\u0002\u0286\u0289\u0003\u0002\u0002\u0002\u0287\u0285\u0003\u0002\u0002",
    "\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u028b\u0003\u0002\u0002",
    "\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u028a\u027d\u0003\u0002\u0002",
    "\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b\u0290\u0003\u0002\u0002",
    "\u0002\u028c\u028d\u0007d\u0002\u0002\u028d\u028e\u0005\u00be`\u0002",
    "\u028e\u028f\b\u0015\u0001\u0002\u028f\u0291\u0003\u0002\u0002\u0002",
    "\u0290\u028c\u0003\u0002\u0002\u0002\u0290\u0291\u0003\u0002\u0002\u0002",
    "\u0291\u0295\u0003\u0002\u0002\u0002\u0292\u0293\u0005\u0098M\u0002",
    "\u0293\u0294\b\u0015\u0001\u0002\u0294\u0296\u0003\u0002\u0002\u0002",
    "\u0295\u0292\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002",
    "\u0296\u029a\u0003\u0002\u0002\u0002\u0297\u0298\u0005\u00aaV\u0002",
    "\u0298\u0299\b\u0015\u0001\u0002\u0299\u029b\u0003\u0002\u0002\u0002",
    "\u029a\u0297\u0003\u0002\u0002\u0002\u029a\u029b\u0003\u0002\u0002\u0002",
    "\u029b)\u0003\u0002\u0002\u0002\u029c\u029d\u0007\\\u0002\u0002\u029d",
    "\u029e\u0007\u0004\u0002\u0002\u029e\u029f\b\u0016\u0001\u0002\u029f",
    "\u02a5\u0005,\u0017\u0002\u02a0\u02a1\u0007\u0005\u0002\u0002\u02a1",
    "\u02a2\b\u0016\u0001\u0002\u02a2\u02a4\u0005,\u0017\u0002\u02a3\u02a0",
    "\u0003\u0002\u0002\u0002\u02a4\u02a7\u0003\u0002\u0002\u0002\u02a5\u02a3",
    "\u0003\u0002\u0002\u0002\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a8",
    "\u0003\u0002\u0002\u0002\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a8\u02a9",
    "\u0007\u0006\u0002\u0002\u02a9\u02aa\b\u0016\u0001\u0002\u02aa+\u0003",
    "\u0002\u0002\u0002\u02ab\u02ac\u0005\u00f4{\u0002\u02ac\u02ad\b\u0017",
    "\u0001\u0002\u02ad-\u0003\u0002\u0002\u0002\u02ae\u02af\t\u0002\u0002",
    "\u0002\u02af\u02b0\u0005\u00ecw\u0002\u02b0\u02ce\b\u0018\u0001\u0002",
    "\u02b1\u02b2\u0007<\u0002\u0002\u02b2\u02b6\b\u0018\u0001\u0002\u02b3",
    "\u02b5\u0005\u0016\f\u0002\u02b4\u02b3\u0003\u0002\u0002\u0002\u02b5",
    "\u02b8\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b6",
    "\u02b7\u0003\u0002\u0002\u0002\u02b7\u02c4\u0003\u0002\u0002\u0002\u02b8",
    "\u02b6\u0003\u0002\u0002\u0002\u02b9\u02be\u0005p9\u0002\u02ba\u02bb",
    "\u0007\u0005\u0002\u0002\u02bb\u02bd\u0005p9\u0002\u02bc\u02ba\u0003",
    "\u0002\u0002\u0002\u02bd\u02c0\u0003\u0002\u0002\u0002\u02be\u02bc\u0003",
    "\u0002\u0002\u0002\u02be\u02bf\u0003\u0002\u0002\u0002\u02bf\u02c1\u0003",
    "\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c1\u02c2\u0005",
    "\u001a\u000e\u0002\u02c2\u02c5\u0003\u0002\u0002\u0002\u02c3\u02c5\u0005",
    "0\u0019\u0002\u02c4\u02b9\u0003\u0002\u0002\u0002\u02c4\u02c3\u0003",
    "\u0002\u0002\u0002\u02c5\u02cf\u0003\u0002\u0002\u0002\u02c6\u02ca\b",
    "\u0018\u0001\u0002\u02c7\u02c9\u0005\u0016\f\u0002\u02c8\u02c7\u0003",
    "\u0002\u0002\u0002\u02c9\u02cc\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003",
    "\u0002\u0002\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb\u02cd\u0003",
    "\u0002\u0002\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cd\u02cf\u0005",
    "0\u0019\u0002\u02ce\u02b1\u0003\u0002\u0002\u0002\u02ce\u02c6\u0003",
    "\u0002\u0002\u0002\u02cf/\u0003\u0002\u0002\u0002\u02d0\u02d1\u0007",
    "\u0004\u0002\u0002\u02d1\u02d5\b\u0019\u0001\u0002\u02d2\u02d4\u0005",
    "R*\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d4\u02d7\u0003\u0002",
    "\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d5\u02d6\u0003\u0002",
    "\u0002\u0002\u02d6\u02d8\u0003\u0002\u0002\u0002\u02d7\u02d5\u0003\u0002",
    "\u0002\u0002\u02d8\u02d9\u0007\u0006\u0002\u0002\u02d9\u02e5\b\u0019",
    "\u0001\u0002\u02da\u02db\u0007@\u0002\u0002\u02db\u02dc\u0007\u0004",
    "\u0002\u0002\u02dc\u02e0\b\u0019\u0001\u0002\u02dd\u02df\u00054\u001b",
    "\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02df\u02e2\u0003\u0002\u0002",
    "\u0002\u02e0\u02de\u0003\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002\u0002",
    "\u0002\u02e1\u02e3\u0003\u0002\u0002\u0002\u02e2\u02e0\u0003\u0002\u0002",
    "\u0002\u02e3\u02e4\u0007\u0006\u0002\u0002\u02e4\u02e6\b\u0019\u0001",
    "\u0002\u02e5\u02da\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002",
    "\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02f6\u0005\u001c\u000f",
    "\u0002\u02e8\u02e9\u0007@\u0002\u0002\u02e9\u02ea\u0007\u0004\u0002",
    "\u0002\u02ea\u02ee\b\u0019\u0001\u0002\u02eb\u02ed\u00054\u001b\u0002",
    "\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ed\u02f0\u0003\u0002\u0002\u0002",
    "\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002",
    "\u02ef\u02f1\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002",
    "\u02f1\u02f2\u0007\u0006\u0002\u0002\u02f2\u02f3\b\u0019\u0001\u0002",
    "\u02f3\u02f6\u0005\u001c\u000f\u0002\u02f4\u02f6\u0005\u001a\u000e\u0002",
    "\u02f5\u02d0\u0003\u0002\u0002\u0002\u02f5\u02e8\u0003\u0002\u0002\u0002",
    "\u02f5\u02f4\u0003\u0002\u0002\u0002\u02f61\u0003\u0002\u0002\u0002",
    "\u02f7\u02f8\u0007}\u0002\u0002\u02f8\u02f9\u0005\u00ecw\u0002\u02f9",
    "\u02fc\b\u001a\u0001\u0002\u02fa\u02fb\u0007<\u0002\u0002\u02fb\u02fd",
    "\b\u001a\u0001\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fc\u02fd",
    "\u0003\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002\u02fe\u0302",
    "\b\u001a\u0001\u0002\u02ff\u0301\u0005\u0016\f\u0002\u0300\u02ff\u0003",
    "\u0002\u0002\u0002\u0301\u0304\u0003\u0002\u0002\u0002\u0302\u0300\u0003",
    "\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u032e\u0003",
    "\u0002\u0002\u0002\u0304\u0302\u0003\u0002\u0002\u0002\u0305\u0306\u0007",
    "\u0004\u0002\u0002\u0306\u0310\b\u001a\u0001\u0002\u0307\u030d\u0005",
    "\\/\u0002\u0308\u0309\u0007\u0005\u0002\u0002\u0309\u030a\b\u001a\u0001",
    "\u0002\u030a\u030c\u0005\\/\u0002\u030b\u0308\u0003\u0002\u0002\u0002",
    "\u030c\u030f\u0003\u0002\u0002\u0002\u030d\u030b\u0003\u0002\u0002\u0002",
    "\u030d\u030e\u0003\u0002\u0002\u0002\u030e\u0311\u0003\u0002\u0002\u0002",
    "\u030f\u030d\u0003\u0002\u0002\u0002\u0310\u0307\u0003\u0002\u0002\u0002",
    "\u0310\u0311\u0003\u0002\u0002\u0002\u0311\u0312\u0003\u0002\u0002\u0002",
    "\u0312\u031e\u0007\u0006\u0002\u0002\u0313\u0314\u0007@\u0002\u0002",
    "\u0314\u0315\u0007\u0004\u0002\u0002\u0315\u0319\b\u001a\u0001\u0002",
    "\u0316\u0318\u00054\u001b\u0002\u0317\u0316\u0003\u0002\u0002\u0002",
    "\u0318\u031b\u0003\u0002\u0002\u0002\u0319\u0317\u0003\u0002\u0002\u0002",
    "\u0319\u031a\u0003\u0002\u0002\u0002\u031a\u031c\u0003\u0002\u0002\u0002",
    "\u031b\u0319\u0003\u0002\u0002\u0002\u031c\u031d\u0007\u0006\u0002\u0002",
    "\u031d\u031f\b\u001a\u0001\u0002\u031e\u0313\u0003\u0002\u0002\u0002",
    "\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002",
    "\u0320\u032f\u0005\u001c\u000f\u0002\u0321\u0322\u0007@\u0002\u0002",
    "\u0322\u0323\u0007\u0004\u0002\u0002\u0323\u0327\b\u001a\u0001\u0002",
    "\u0324\u0326\u00054\u001b\u0002\u0325\u0324\u0003\u0002\u0002\u0002",
    "\u0326\u0329\u0003\u0002\u0002\u0002\u0327\u0325\u0003\u0002\u0002\u0002",
    "\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u032a\u0003\u0002\u0002\u0002",
    "\u0329\u0327\u0003\u0002\u0002\u0002\u032a\u032b\u0007\u0006\u0002\u0002",
    "\u032b\u032c\b\u001a\u0001\u0002\u032c\u032f\u0005\u001c\u000f\u0002",
    "\u032d\u032f\u0005\u001a\u000e\u0002\u032e\u0305\u0003\u0002\u0002\u0002",
    "\u032e\u0321\u0003\u0002\u0002\u0002\u032e\u032d\u0003\u0002\u0002\u0002",
    "\u032f3\u0003\u0002\u0002\u0002\u0330\u0334\b\u001b\u0001\u0002\u0331",
    "\u0333\u0005\u0016\f\u0002\u0332\u0331\u0003\u0002\u0002\u0002\u0333",
    "\u0336\u0003\u0002\u0002\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0334",
    "\u0335\u0003\u0002\u0002\u0002\u0335\u0351\u0003\u0002\u0002\u0002\u0336",
    "\u0334\u0003\u0002\u0002\u0002\u0337\u0338\u0007?\u0002\u0002\u0338",
    "\u0339\u0005\u00f4{\u0002\u0339\u033d\b\u001b\u0001\u0002\u033a\u033c",
    "\u0005\u0014\u000b\u0002\u033b\u033a\u0003\u0002\u0002\u0002\u033c\u033f",
    "\u0003\u0002\u0002\u0002\u033d\u033b\u0003\u0002\u0002\u0002\u033d\u033e",
    "\u0003\u0002\u0002\u0002\u033e\u0340\u0003\u0002\u0002\u0002\u033f\u033d",
    "\u0003\u0002\u0002\u0002\u0340\u0343\u0005f4\u0002\u0341\u0344\u0005",
    "t;\u0002\u0342\u0344\u0005\u001a\u000e\u0002\u0343\u0341\u0003\u0002",
    "\u0002\u0002\u0343\u0342\u0003\u0002\u0002\u0002\u0344\u0352\u0003\u0002",
    "\u0002\u0002\u0345\u0346\u0007b\u0002\u0002\u0346\u0347\u0005\u00f4",
    "{\u0002\u0347\u034b\b\u001b\u0001\u0002\u0348\u034a\u0005\u0014\u000b",
    "\u0002\u0349\u0348\u0003\u0002\u0002\u0002\u034a\u034d\u0003\u0002\u0002",
    "\u0002\u034b\u0349\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002",
    "\u0002\u034c\u034e\u0003\u0002\u0002\u0002\u034d\u034b\u0003\u0002\u0002",
    "\u0002\u034e\u034f\u0005f4\u0002\u034f\u0350\u0005t;\u0002\u0350\u0352",
    "\u0003\u0002\u0002\u0002\u0351\u0337\u0003\u0002\u0002\u0002\u0351\u0345",
    "\u0003\u0002\u0002\u0002\u03525\u0003\u0002\u0002\u0002\u0353\u0354",
    "\u0007?\u0002\u0002\u0354\u0355\u0005\u00ecw\u0002\u0355\u0359\b\u001c",
    "\u0001\u0002\u0356\u0358\u0005\u0014\u000b\u0002\u0357\u0356\u0003\u0002",
    "\u0002\u0002\u0358\u035b\u0003\u0002\u0002\u0002\u0359\u0357\u0003\u0002",
    "\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u035c\u0003\u0002",
    "\u0002\u0002\u035b\u0359\u0003\u0002\u0002\u0002\u035c\u035f\u0005f",
    "4\u0002\u035d\u0360\u0005t;\u0002\u035e\u0360\u0005\u001a\u000e\u0002",
    "\u035f\u035d\u0003\u0002\u0002\u0002\u035f\u035e\u0003\u0002\u0002\u0002",
    "\u0360\u036e\u0003\u0002\u0002\u0002\u0361\u0362\u0007b\u0002\u0002",
    "\u0362\u0363\u0005\u00ecw\u0002\u0363\u0367\b\u001c\u0001\u0002\u0364",
    "\u0366\u0005\u0014\u000b\u0002\u0365\u0364\u0003\u0002\u0002\u0002\u0366",
    "\u0369\u0003\u0002\u0002\u0002\u0367\u0365\u0003\u0002\u0002\u0002\u0367",
    "\u0368\u0003\u0002\u0002\u0002\u0368\u036a\u0003\u0002\u0002\u0002\u0369",
    "\u0367\u0003\u0002\u0002\u0002\u036a\u036b\u0005f4\u0002\u036b\u036c",
    "\u0005t;\u0002\u036c\u036e\u0003\u0002\u0002\u0002\u036d\u0353\u0003",
    "\u0002\u0002\u0002\u036d\u0361\u0003\u0002\u0002\u0002\u036e7\u0003",
    "\u0002\u0002\u0002\u036f\u0370\u0007X\u0002\u0002\u0370\u0371\u0005",
    "\u00ecw\u0002\u0371\u0375\b\u001d\u0001\u0002\u0372\u0374\u0005\u0014",
    "\u000b\u0002\u0373\u0372\u0003\u0002\u0002\u0002\u0374\u0377\u0003\u0002",
    "\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002",
    "\u0002\u0002\u0376\u039d\u0003\u0002\u0002\u0002\u0377\u0375\u0003\u0002",
    "\u0002\u0002\u0378\u0379\u0005x=\u0002\u0379\u037a\u0005\u001c\u000f",
    "\u0002\u037a\u039e\u0003\u0002\u0002\u0002\u037b\u039b\u0007\u0007\u0002",
    "\u0002\u037c\u037d\b\u001d\u0001\u0002\u037d\u0392\u0005\u00ecw\u0002",
    "\u037e\u0384\b\u001d\u0001\u0002\u037f\u0380\u0007\u0005\u0002\u0002",
    "\u0380\u0381\b\u001d\u0001\u0002\u0381\u0383\u0005p9\u0002\u0382\u037f",
    "\u0003\u0002\u0002\u0002\u0383\u0386\u0003\u0002\u0002\u0002\u0384\u0382",
    "\u0003\u0002\u0002\u0002\u0384\u0385\u0003\u0002\u0002\u0002\u0385\u0387",
    "\u0003\u0002\u0002\u0002\u0386\u0384\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0005x=\u0002\u0388\u0389\u0005\u001c\u000f\u0002\u0389\u0393\u0003",
    "\u0002\u0002\u0002\u038a\u038e\b\u001d\u0001\u0002\u038b\u038d\u0005",
    "\u0016\f\u0002\u038c\u038b\u0003\u0002\u0002\u0002\u038d\u0390\u0003",
    "\u0002\u0002\u0002\u038e\u038c\u0003\u0002\u0002\u0002\u038e\u038f\u0003",
    "\u0002\u0002\u0002\u038f\u0391\u0003\u0002\u0002\u0002\u0390\u038e\u0003",
    "\u0002\u0002\u0002\u0391\u0393\u0005\u001a\u000e\u0002\u0392\u037e\u0003",
    "\u0002\u0002\u0002\u0392\u038a\u0003\u0002\u0002\u0002\u0393\u039c\u0003",
    "\u0002\u0002\u0002\u0394\u0395\u0005x=\u0002\u0395\u0396\u0005\u001c",
    "\u000f\u0002\u0396\u039c\u0003\u0002\u0002\u0002\u0397\u0398\u0005&",
    "\u0014\u0002\u0398\u0399\b\u001d\u0001\u0002\u0399\u039a\u0005\u001c",
    "\u000f\u0002\u039a\u039c\u0003\u0002\u0002\u0002\u039b\u037c\u0003\u0002",
    "\u0002\u0002\u039b\u0394\u0003\u0002\u0002\u0002\u039b\u0397\u0003\u0002",
    "\u0002\u0002\u039c\u039e\u0003\u0002\u0002\u0002\u039d\u0378\u0003\u0002",
    "\u0002\u0002\u039d\u037b\u0003\u0002\u0002\u0002\u039e9\u0003\u0002",
    "\u0002\u0002\u039f\u03a6\u0007F\u0002\u0002\u03a0\u03a3\u0007>\u0002",
    "\u0002\u03a1\u03a3\u0007\u0093\u0002\u0002\u03a2\u03a0\u0003\u0002\u0002",
    "\u0002\u03a2\u03a1\u0003\u0002\u0002\u0002\u03a3\u03a4\u0003\u0002\u0002",
    "\u0002\u03a4\u03a6\u0007V\u0002\u0002\u03a5\u039f\u0003\u0002\u0002",
    "\u0002\u03a5\u03a2\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002",
    "\u0002\u03a7\u03a8\u0005\u00ecw\u0002\u03a8\u03ac\b\u001e\u0001\u0002",
    "\u03a9\u03ab\u0005\u0014\u000b\u0002\u03aa\u03a9\u0003\u0002\u0002\u0002",
    "\u03ab\u03ae\u0003\u0002\u0002\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002",
    "\u03ac\u03ad\u0003\u0002\u0002\u0002\u03ad\u03bb\u0003\u0002\u0002\u0002",
    "\u03ae\u03ac\u0003\u0002\u0002\u0002\u03af\u03b9\u0007\u0007\u0002\u0002",
    "\u03b0\u03b6\u0005p9\u0002\u03b1\u03b2\u0007\u0005\u0002\u0002\u03b2",
    "\u03b3\b\u001e\u0001\u0002\u03b3\u03b5\u0005p9\u0002\u03b4\u03b1\u0003",
    "\u0002\u0002\u0002\u03b5\u03b8\u0003\u0002\u0002\u0002\u03b6\u03b4\u0003",
    "\u0002\u0002\u0002\u03b6\u03b7\u0003\u0002\u0002\u0002\u03b7\u03ba\u0003",
    "\u0002\u0002\u0002\u03b8\u03b6\u0003\u0002\u0002\u0002\u03b9\u03b0\u0003",
    "\u0002\u0002\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bc\u0003",
    "\u0002\u0002\u0002\u03bb\u03af\u0003\u0002\u0002\u0002\u03bb\u03bc\u0003",
    "\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002\u0002\u0002\u03bd\u03be\u0007",
    "\u0004\u0002\u0002\u03be\u03c2\b\u001e\u0001\u0002\u03bf\u03c1\u0005",
    "T+\u0002\u03c0\u03bf\u0003\u0002\u0002\u0002\u03c1\u03c4\u0003\u0002",
    "\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002",
    "\u0002\u0002\u03c3\u03c5\u0003\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002",
    "\u0002\u0002\u03c5\u03c6\u0007\u0006\u0002\u0002\u03c6\u03d2\b\u001e",
    "\u0001\u0002\u03c7\u03c8\u0007@\u0002\u0002\u03c8\u03c9\u0007\u0004",
    "\u0002\u0002\u03c9\u03cd\b\u001e\u0001\u0002\u03ca\u03cc\u00054\u001b",
    "\u0002\u03cb\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cf\u0003\u0002\u0002",
    "\u0002\u03cd\u03cb\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002",
    "\u0002\u03ce\u03d0\u0003\u0002\u0002\u0002\u03cf\u03cd\u0003\u0002\u0002",
    "\u0002\u03d0\u03d1\u0007\u0006\u0002\u0002\u03d1\u03d3\b\u001e\u0001",
    "\u0002\u03d2\u03c7\u0003\u0002\u0002\u0002\u03d2\u03d3\u0003\u0002\u0002",
    "\u0002\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4\u03d5\u0005\u001c\u000f",
    "\u0002\u03d5;\u0003\u0002\u0002\u0002\u03d6\u03d7\u0007\u0086\u0002",
    "\u0002\u03d7\u03d8\u0005\u00ecw\u0002\u03d8\u03dc\b\u001f\u0001\u0002",
    "\u03d9\u03db\u0005\u0014\u000b\u0002\u03da\u03d9\u0003\u0002\u0002\u0002",
    "\u03db\u03de\u0003\u0002\u0002\u0002\u03dc\u03da\u0003\u0002\u0002\u0002",
    "\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03df\u0003\u0002\u0002\u0002",
    "\u03de\u03dc\u0003\u0002\u0002\u0002\u03df\u03e0\u0005v<\u0002\u03e0",
    "=\u0003\u0002\u0002\u0002\u03e1\u03e2\u0007\u0086\u0002\u0002\u03e2",
    "\u03e3\u0005\u00ecw\u0002\u03e3\u03e4\b \u0001\u0002\u03e4\u03e5\u0005",
    "D#\u0002\u03e5?\u0003\u0002\u0002\u0002\u03e6\u03e7\u0007C\u0002\u0002",
    "\u03e7\u03e8\u0005\u00ecw\u0002\u03e8\u03ec\b!\u0001\u0002\u03e9\u03eb",
    "\u0005\u0014\u000b\u0002\u03ea\u03e9\u0003\u0002\u0002\u0002\u03eb\u03ee",
    "\u0003\u0002\u0002\u0002\u03ec\u03ea\u0003\u0002\u0002\u0002\u03ec\u03ed",
    "\u0003\u0002\u0002\u0002\u03ed\u03ef\u0003\u0002\u0002\u0002\u03ee\u03ec",
    "\u0003\u0002\u0002\u0002\u03ef\u03f0\u0005v<\u0002\u03f0A\u0003\u0002",
    "\u0002\u0002\u03f1\u03f4\u0005\u00ecw\u0002\u03f2\u03f3\u0007\u0007",
    "\u0002\u0002\u03f3\u03f5\u0005\u00ecw\u0002\u03f4\u03f2\u0003\u0002",
    "\u0002\u0002\u03f4\u03f5\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002",
    "\u0002\u0002\u03f6\u0475\b\"\u0001\u0002\u03f7\u03fb\b\"\u0001\u0002",
    "\u03f8\u03fa\u0005\u0016\f\u0002\u03f9\u03f8\u0003\u0002\u0002\u0002",
    "\u03fa\u03fd\u0003\u0002\u0002\u0002\u03fb\u03f9\u0003\u0002\u0002\u0002",
    "\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc\u040b\u0003\u0002\u0002\u0002",
    "\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fe\u03ff\u0007\u0004\u0002\u0002",
    "\u03ff\u0403\b\"\u0001\u0002\u0400\u0402\u0005R*\u0002\u0401\u0400\u0003",
    "\u0002\u0002\u0002\u0402\u0405\u0003\u0002\u0002\u0002\u0403\u0401\u0003",
    "\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002\u0404\u0406\u0003",
    "\u0002\u0002\u0002\u0405\u0403\u0003\u0002\u0002\u0002\u0406\u0407\u0007",
    "\u0006\u0002\u0002\u0407\u0408\b\"\u0001\u0002\u0408\u0409\b\"\u0001",
    "\u0002\u0409\u040c\u0005\u001c\u000f\u0002\u040a\u040c\u0005\u001a\u000e",
    "\u0002\u040b\u03fe\u0003\u0002\u0002\u0002\u040b\u040a\u0003\u0002\u0002",
    "\u0002\u040c\u0476\u0003\u0002\u0002\u0002\u040d\u040e\u0007<\u0002",
    "\u0002\u040e\u0412\b\"\u0001\u0002\u040f\u0411\u0005\u0016\f\u0002\u0410",
    "\u040f\u0003\u0002\u0002\u0002\u0411\u0414\u0003\u0002\u0002\u0002\u0412",
    "\u0410\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002\u0413",
    "\u0473\u0003\u0002\u0002\u0002\u0414\u0412\u0003\u0002\u0002\u0002\u0415",
    "\u041a\u0005p9\u0002\u0416\u0417\u0007\u0005\u0002\u0002\u0417\u0419",
    "\u0005p9\u0002\u0418\u0416\u0003\u0002\u0002\u0002\u0419\u041c\u0003",
    "\u0002\u0002\u0002\u041a\u0418\u0003\u0002\u0002\u0002\u041a\u041b\u0003",
    "\u0002\u0002\u0002\u041b\u041d\u0003\u0002\u0002\u0002\u041c\u041a\u0003",
    "\u0002\u0002\u0002\u041d\u041e\u0005\u001a\u000e\u0002\u041e\u0474\u0003",
    "\u0002\u0002\u0002\u041f\u0420\u0007\u0004\u0002\u0002\u0420\u0424\b",
    "\"\u0001\u0002\u0421\u0423\u0005R*\u0002\u0422\u0421\u0003\u0002\u0002",
    "\u0002\u0423\u0426\u0003\u0002\u0002\u0002\u0424\u0422\u0003\u0002\u0002",
    "\u0002\u0424\u0425\u0003\u0002\u0002\u0002\u0425\u0427\u0003\u0002\u0002",
    "\u0002\u0426\u0424\u0003\u0002\u0002\u0002\u0427\u0428\u0007\u0006\u0002",
    "\u0002\u0428\u0429\b\"\u0001\u0002\u0429\u042a\b\"\u0001\u0002\u042a",
    "\u0474\u0005\u001c\u000f\u0002\u042b\u0474\u0005\u001a\u000e\u0002\u042c",
    "\u042d\b\"\u0001\u0002\u042d\u042e\u0007P\u0002\u0002\u042e\u042f\u0007",
    "\u0004\u0002\u0002\u042f\u0433\b\"\u0001\u0002\u0430\u0432\u0005\u001e",
    "\u0010\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0432\u0435\u0003\u0002",
    "\u0002\u0002\u0433\u0431\u0003\u0002\u0002\u0002\u0433\u0434\u0003\u0002",
    "\u0002\u0002\u0434\u0436\u0003\u0002\u0002\u0002\u0435\u0433\u0003\u0002",
    "\u0002\u0002\u0436\u0437\u0007\u0006\u0002\u0002\u0437\u0438\b\"\u0001",
    "\u0002\u0438\u0474\u0005\u001c\u000f\u0002\u0439\u043a\b\"\u0001\u0002",
    "\u043a\u043b\u0007I\u0002\u0002\u043b\u043c\u0007\u0004\u0002\u0002",
    "\u043c\u0446\b\"\u0001\u0002\u043d\u0443\u0005\\/\u0002\u043e\u043f",
    "\u0007\u0005\u0002\u0002\u043f\u0440\b\"\u0001\u0002\u0440\u0442\u0005",
    "\\/\u0002\u0441\u043e\u0003\u0002\u0002\u0002\u0442\u0445\u0003\u0002",
    "\u0002\u0002\u0443\u0441\u0003\u0002\u0002\u0002\u0443\u0444\u0003\u0002",
    "\u0002\u0002\u0444\u0447\u0003\u0002\u0002\u0002\u0445\u0443\u0003\u0002",
    "\u0002\u0002\u0446\u043d\u0003\u0002\u0002\u0002\u0446\u0447\u0003\u0002",
    "\u0002\u0002\u0447\u0448\u0003\u0002\u0002\u0002\u0448\u0449\u0007\u0006",
    "\u0002\u0002\u0449\u0474\u0005\u001c\u000f\u0002\u044a\u044b\b\"\u0001",
    "\u0002\u044b\u044c\u0007@\u0002\u0002\u044c\u044d\u0007\u0004\u0002",
    "\u0002\u044d\u0451\b\"\u0001\u0002\u044e\u0450\u00054\u001b\u0002\u044f",
    "\u044e\u0003\u0002\u0002\u0002\u0450\u0453\u0003\u0002\u0002\u0002\u0451",
    "\u044f\u0003\u0002\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452",
    "\u0454\u0003\u0002\u0002\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0454",
    "\u0455\u0007\u0006\u0002\u0002\u0455\u0456\b\"\u0001\u0002\u0456\u0474",
    "\u0005\u001c\u000f\u0002\u0457\u0458\u0007S\u0002\u0002\u0458\u0459",
    "\u0007\u0004\u0002\u0002\u0459\u045d\b\"\u0001\u0002\u045a\u045c\u0005",
    "R*\u0002\u045b\u045a\u0003\u0002\u0002\u0002\u045c\u045f\u0003\u0002",
    "\u0002\u0002\u045d\u045b\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002",
    "\u0002\u0002\u045e\u0460\u0003\u0002\u0002\u0002\u045f\u045d\u0003\u0002",
    "\u0002\u0002\u0460\u0461\u0007\u0006\u0002\u0002\u0461\u0462\b\"\u0001",
    "\u0002\u0462\u0463\b\"\u0001\u0002\u0463\u0474\u0005\u001c\u000f\u0002",
    "\u0464\u0465\u0007W\u0002\u0002\u0465\u0466\u0007\u0004\u0002\u0002",
    "\u0466\u046a\b\"\u0001\u0002\u0467\u0469\u0005N(\u0002\u0468\u0467\u0003",
    "\u0002\u0002\u0002\u0469\u046c\u0003\u0002\u0002\u0002\u046a\u0468\u0003",
    "\u0002\u0002\u0002\u046a\u046b\u0003\u0002\u0002\u0002\u046b\u046d\u0003",
    "\u0002\u0002\u0002\u046c\u046a\u0003\u0002\u0002\u0002\u046d\u046e\u0007",
    "\u0006\u0002\u0002\u046e\u046f\b\"\u0001\u0002\u046f\u0474\u0005\u001c",
    "\u000f\u0002\u0470\u0471\u0005\u0092J\u0002\u0471\u0472\u0005\u001a",
    "\u000e\u0002\u0472\u0474\u0003\u0002\u0002\u0002\u0473\u0415\u0003\u0002",
    "\u0002\u0002\u0473\u041f\u0003\u0002\u0002\u0002\u0473\u042b\u0003\u0002",
    "\u0002\u0002\u0473\u042c\u0003\u0002\u0002\u0002\u0473\u0439\u0003\u0002",
    "\u0002\u0002\u0473\u044a\u0003\u0002\u0002\u0002\u0473\u0457\u0003\u0002",
    "\u0002\u0002\u0473\u0464\u0003\u0002\u0002\u0002\u0473\u0470\u0003\u0002",
    "\u0002\u0002\u0474\u0476\u0003\u0002\u0002\u0002\u0475\u03f7\u0003\u0002",
    "\u0002\u0002\u0475\u040d\u0003\u0002\u0002\u0002\u0476C\u0003\u0002",
    "\u0002\u0002\u0477\u0478\u0007<\u0002\u0002\u0478\u047c\b#\u0001\u0002",
    "\u0479\u047b\u0005\u0016\f\u0002\u047a\u0479\u0003\u0002\u0002\u0002",
    "\u047b\u047e\u0003\u0002\u0002\u0002\u047c\u047a\u0003\u0002\u0002\u0002",
    "\u047c\u047d\u0003\u0002\u0002\u0002\u047d\u0499\u0003\u0002\u0002\u0002",
    "\u047e\u047c\u0003\u0002\u0002\u0002\u047f\u0484\u0005p9\u0002\u0480",
    "\u0481\u0007\u0005\u0002\u0002\u0481\u0483\u0005p9\u0002\u0482\u0480",
    "\u0003\u0002\u0002\u0002\u0483\u0486\u0003\u0002\u0002\u0002\u0484\u0482",
    "\u0003\u0002\u0002\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u0487",
    "\u0003\u0002\u0002\u0002\u0486\u0484\u0003\u0002\u0002\u0002\u0487\u0488",
    "\u0005\u001a\u000e\u0002\u0488\u049a\u0003\u0002\u0002\u0002\u0489\u048a",
    "\u0007\u0004\u0002\u0002\u048a\u048e\b#\u0001\u0002\u048b\u048d\u0005",
    "R*\u0002\u048c\u048b\u0003\u0002\u0002\u0002\u048d\u0490\u0003\u0002",
    "\u0002\u0002\u048e\u048c\u0003\u0002\u0002\u0002\u048e\u048f\u0003\u0002",
    "\u0002\u0002\u048f\u0491\u0003\u0002\u0002\u0002\u0490\u048e\u0003\u0002",
    "\u0002\u0002\u0491\u0492\u0007\u0006\u0002\u0002\u0492\u0493\b#\u0001",
    "\u0002\u0493\u0494\b#\u0001\u0002\u0494\u049a\u0005\u001c\u000f\u0002",
    "\u0495\u0496\u0005\u0092J\u0002\u0496\u0497\u0005\u001a\u000e\u0002",
    "\u0497\u049a\u0003\u0002\u0002\u0002\u0498\u049a\u0005\u001a\u000e\u0002",
    "\u0499\u047f\u0003\u0002\u0002\u0002\u0499\u0489\u0003\u0002\u0002\u0002",
    "\u0499\u0495\u0003\u0002\u0002\u0002\u0499\u0498\u0003\u0002\u0002\u0002",
    "\u049a\u04b2\u0003\u0002\u0002\u0002\u049b\u049f\b#\u0001\u0002\u049c",
    "\u049e\u0005\u0016\f\u0002\u049d\u049c\u0003\u0002\u0002\u0002\u049e",
    "\u04a1\u0003\u0002\u0002\u0002\u049f\u049d\u0003\u0002\u0002\u0002\u049f",
    "\u04a0\u0003\u0002\u0002\u0002\u04a0\u04af\u0003\u0002\u0002\u0002\u04a1",
    "\u049f\u0003\u0002\u0002\u0002\u04a2\u04a3\u0007\u0004\u0002\u0002\u04a3",
    "\u04a7\b#\u0001\u0002\u04a4\u04a6\u0005R*\u0002\u04a5\u04a4\u0003\u0002",
    "\u0002\u0002\u04a6\u04a9\u0003\u0002\u0002\u0002\u04a7\u04a5\u0003\u0002",
    "\u0002\u0002\u04a7\u04a8\u0003\u0002\u0002\u0002\u04a8\u04aa\u0003\u0002",
    "\u0002\u0002\u04a9\u04a7\u0003\u0002\u0002\u0002\u04aa\u04ab\u0007\u0006",
    "\u0002\u0002\u04ab\u04ac\b#\u0001\u0002\u04ac\u04ad\b#\u0001\u0002\u04ad",
    "\u04b0\u0005\u001c\u000f\u0002\u04ae\u04b0\u0005\u001a\u000e\u0002\u04af",
    "\u04a2\u0003\u0002\u0002\u0002\u04af\u04ae\u0003\u0002\u0002\u0002\u04b0",
    "\u04b2\u0003\u0002\u0002\u0002\u04b1\u0477\u0003\u0002\u0002\u0002\u04b1",
    "\u049b\u0003\u0002\u0002\u0002\u04b2E\u0003\u0002\u0002\u0002\u04b3",
    "\u04b6\u0005\u00ecw\u0002\u04b4\u04b5\u0007\u0007\u0002\u0002\u04b5",
    "\u04b7\u0005\u00ecw\u0002\u04b6\u04b4\u0003\u0002\u0002\u0002\u04b6",
    "\u04b7\u0003\u0002\u0002\u0002\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8",
    "\u04bb\b$\u0001\u0002\u04b9\u04ba\u0007<\u0002\u0002\u04ba\u04bc\b$",
    "\u0001\u0002\u04bb\u04b9\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002",
    "\u0002\u0002\u04bc\u04bd\u0003\u0002\u0002\u0002\u04bd\u04c1\b$\u0001",
    "\u0002\u04be\u04c0\u0005\u0016\f\u0002\u04bf\u04be\u0003\u0002\u0002",
    "\u0002\u04c0\u04c3\u0003\u0002\u0002\u0002\u04c1\u04bf\u0003\u0002\u0002",
    "\u0002\u04c1\u04c2\u0003\u0002\u0002\u0002\u04c2\u0519\u0003\u0002\u0002",
    "\u0002\u04c3\u04c1\u0003\u0002\u0002\u0002\u04c4\u04c5\u0007\u0004\u0002",
    "\u0002\u04c5\u04c9\b$\u0001\u0002\u04c6\u04c8\u0005H%\u0002\u04c7\u04c6",
    "\u0003\u0002\u0002\u0002\u04c8\u04cb\u0003\u0002\u0002\u0002\u04c9\u04c7",
    "\u0003\u0002\u0002\u0002\u04c9\u04ca\u0003\u0002\u0002\u0002\u04ca\u04cc",
    "\u0003\u0002\u0002\u0002\u04cb\u04c9\u0003\u0002\u0002\u0002\u04cc\u04cd",
    "\u0007\u0006\u0002\u0002\u04cd\u04ce\b$\u0001\u0002\u04ce\u04db\b$\u0001",
    "\u0002\u04cf\u04d0\u0007@\u0002\u0002\u04d0\u04d1\u0007\u0004\u0002",
    "\u0002\u04d1\u04d5\b$\u0001\u0002\u04d2\u04d4\u0005J&\u0002\u04d3\u04d2",
    "\u0003\u0002\u0002\u0002\u04d4\u04d7\u0003\u0002\u0002\u0002\u04d5\u04d3",
    "\u0003\u0002\u0002\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d8",
    "\u0003\u0002\u0002\u0002\u04d7\u04d5\u0003\u0002\u0002\u0002\u04d8\u04d9",
    "\u0007\u0006\u0002\u0002\u04d9\u04da\b$\u0001\u0002\u04da\u04dc\b$\u0001",
    "\u0002\u04db\u04cf\u0003\u0002\u0002\u0002\u04db\u04dc\u0003\u0002\u0002",
    "\u0002\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd\u051a\u0005\u001c\u000f",
    "\u0002\u04de\u04df\u0007@\u0002\u0002\u04df\u04e0\u0007\u0004\u0002",
    "\u0002\u04e0\u04e4\b$\u0001\u0002\u04e1\u04e3\u0005J&\u0002\u04e2\u04e1",
    "\u0003\u0002\u0002\u0002\u04e3\u04e6\u0003\u0002\u0002\u0002\u04e4\u04e2",
    "\u0003\u0002\u0002\u0002\u04e4\u04e5\u0003\u0002\u0002\u0002\u04e5\u04e7",
    "\u0003\u0002\u0002\u0002\u04e6\u04e4\u0003\u0002\u0002\u0002\u04e7\u04e8",
    "\u0007\u0006\u0002\u0002\u04e8\u04e9\b$\u0001\u0002\u04e9\u04ea\b$\u0001",
    "\u0002\u04ea\u051a\u0005\u001c\u000f\u0002\u04eb\u04ec\u0007\b\u0002",
    "\u0002\u04ec\u04ed\b$\u0001\u0002\u04ed\u04f3\u0005L\'\u0002\u04ee\u04ef",
    "\u0007\u0005\u0002\u0002\u04ef\u04f0\b$\u0001\u0002\u04f0\u04f2\u0005",
    "L\'\u0002\u04f1\u04ee\u0003\u0002\u0002\u0002\u04f2\u04f5\u0003\u0002",
    "\u0002\u0002\u04f3\u04f1\u0003\u0002\u0002\u0002\u04f3\u04f4\u0003\u0002",
    "\u0002\u0002\u04f4\u04f6\u0003\u0002\u0002\u0002\u04f5\u04f3\u0003\u0002",
    "\u0002\u0002\u04f6\u04f7\u0007\t\u0002\u0002\u04f7\u04f8\b$\u0001\u0002",
    "\u04f8\u0508\b$\u0001\u0002\u04f9\u04fa\u0007\u007f\u0002\u0002\u04fa",
    "\u04fb\b$\u0001\u0002\u04fb\u04fc\u0007\u0004\u0002\u0002\u04fc\u0500",
    "\b$\u0001\u0002\u04fd\u04ff\u0005H%\u0002\u04fe\u04fd\u0003\u0002\u0002",
    "\u0002\u04ff\u0502\u0003\u0002\u0002\u0002\u0500\u04fe\u0003\u0002\u0002",
    "\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501\u0503\u0003\u0002\u0002",
    "\u0002\u0502\u0500\u0003\u0002\u0002\u0002\u0503\u0504\u0007\u0006\u0002",
    "\u0002\u0504\u0505\b$\u0001\u0002\u0505\u0506\b$\u0001\u0002\u0506\u0509",
    "\u0005\u001c\u000f\u0002\u0507\u0509\u0005\u001a\u000e\u0002\u0508\u04f9",
    "\u0003\u0002\u0002\u0002\u0508\u0507\u0003\u0002\u0002\u0002\u0509\u051a",
    "\u0003\u0002\u0002\u0002\u050a\u050b\u0007\u007f\u0002\u0002\u050b\u050c",
    "\b$\u0001\u0002\u050c\u050d\u0007\u0004\u0002\u0002\u050d\u0511\b$\u0001",
    "\u0002\u050e\u0510\u0005H%\u0002\u050f\u050e\u0003\u0002\u0002\u0002",
    "\u0510\u0513\u0003\u0002\u0002\u0002\u0511\u050f\u0003\u0002\u0002\u0002",
    "\u0511\u0512\u0003\u0002\u0002\u0002\u0512\u0514\u0003\u0002\u0002\u0002",
    "\u0513\u0511\u0003\u0002\u0002\u0002\u0514\u0515\u0007\u0006\u0002\u0002",
    "\u0515\u0516\b$\u0001\u0002\u0516\u0517\b$\u0001\u0002\u0517\u051a\u0005",
    "\u001c\u000f\u0002\u0518\u051a\u0005\u001a\u000e\u0002\u0519\u04c4\u0003",
    "\u0002\u0002\u0002\u0519\u04de\u0003\u0002\u0002\u0002\u0519\u04eb\u0003",
    "\u0002\u0002\u0002\u0519\u050a\u0003\u0002\u0002\u0002\u0519\u0518\u0003",
    "\u0002\u0002\u0002\u051aG\u0003\u0002\u0002\u0002\u051b\u051f\b%\u0001",
    "\u0002\u051c\u051e\u0005\u0016\f\u0002\u051d\u051c\u0003\u0002\u0002",
    "\u0002\u051e\u0521\u0003\u0002\u0002\u0002\u051f\u051d\u0003\u0002\u0002",
    "\u0002\u051f\u0520\u0003\u0002\u0002\u0002\u0520\u0522\u0003\u0002\u0002",
    "\u0002\u0521\u051f\u0003\u0002\u0002\u0002\u0522\u0523\u0005\u00f4{",
    "\u0002\u0523\u0527\b%\u0001\u0002\u0524\u0526\u0005\u0016\f\u0002\u0525",
    "\u0524\u0003\u0002\u0002\u0002\u0526\u0529\u0003\u0002\u0002\u0002\u0527",
    "\u0525\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002\u0528",
    "\u0537\u0003\u0002\u0002\u0002\u0529\u0527\u0003\u0002\u0002\u0002\u052a",
    "\u052b\u0007\u0004\u0002\u0002\u052b\u052f\b%\u0001\u0002\u052c\u052e",
    "\u0005H%\u0002\u052d\u052c\u0003\u0002\u0002\u0002\u052e\u0531\u0003",
    "\u0002\u0002\u0002\u052f\u052d\u0003\u0002\u0002\u0002\u052f\u0530\u0003",
    "\u0002\u0002\u0002\u0530\u0532\u0003\u0002\u0002\u0002\u0531\u052f\u0003",
    "\u0002\u0002\u0002\u0532\u0533\u0007\u0006\u0002\u0002\u0533\u0534\b",
    "%\u0001\u0002\u0534\u0535\b%\u0001\u0002\u0535\u0538\u0005\u001c\u000f",
    "\u0002\u0536\u0538\u0005\u001a\u000e\u0002\u0537\u052a\u0003\u0002\u0002",
    "\u0002\u0537\u0536\u0003\u0002\u0002\u0002\u0538I\u0003\u0002\u0002",
    "\u0002\u0539\u053d\b&\u0001\u0002\u053a\u053c\u0005\u0016\f\u0002\u053b",
    "\u053a\u0003\u0002\u0002\u0002\u053c\u053f\u0003\u0002\u0002\u0002\u053d",
    "\u053b\u0003\u0002\u0002\u0002\u053d\u053e\u0003\u0002\u0002\u0002\u053e",
    "\u0540\u0003\u0002\u0002\u0002\u053f\u053d\u0003\u0002\u0002\u0002\u0540",
    "\u0541\u0005\u00f4{\u0002\u0541\u0545\b&\u0001\u0002\u0542\u0544\u0005",
    "\u0016\f\u0002\u0543\u0542\u0003\u0002\u0002\u0002\u0544\u0547\u0003",
    "\u0002\u0002\u0002\u0545\u0543\u0003\u0002\u0002\u0002\u0545\u0546\u0003",
    "\u0002\u0002\u0002\u0546\u0557\u0003\u0002\u0002\u0002\u0547\u0545\u0003",
    "\u0002\u0002\u0002\u0548\u0549\u0007\b\u0002\u0002\u0549\u054a\b&\u0001",
    "\u0002\u054a\u0550\u0005L\'\u0002\u054b\u054c\u0007\u0005\u0002\u0002",
    "\u054c\u054d\b&\u0001\u0002\u054d\u054f\u0005L\'\u0002\u054e\u054b\u0003",
    "\u0002\u0002\u0002\u054f\u0552\u0003\u0002\u0002\u0002\u0550\u054e\u0003",
    "\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551\u0553\u0003",
    "\u0002\u0002\u0002\u0552\u0550\u0003\u0002\u0002\u0002\u0553\u0554\u0007",
    "\t\u0002\u0002\u0554\u0555\b&\u0001\u0002\u0555\u0556\b&\u0001\u0002",
    "\u0556\u0558\u0003\u0002\u0002\u0002\u0557\u0548\u0003\u0002\u0002\u0002",
    "\u0557\u0558\u0003\u0002\u0002\u0002\u0558\u0567\u0003\u0002\u0002\u0002",
    "\u0559\u055a\u0007\u007f\u0002\u0002\u055a\u055b\u0007\u0004\u0002\u0002",
    "\u055b\u055f\b&\u0001\u0002\u055c\u055e\u0005H%\u0002\u055d\u055c\u0003",
    "\u0002\u0002\u0002\u055e\u0561\u0003\u0002\u0002\u0002\u055f\u055d\u0003",
    "\u0002\u0002\u0002\u055f\u0560\u0003\u0002\u0002\u0002\u0560\u0562\u0003",
    "\u0002\u0002\u0002\u0561\u055f\u0003\u0002\u0002\u0002\u0562\u0563\u0007",
    "\u0006\u0002\u0002\u0563\u0564\b&\u0001\u0002\u0564\u0565\b&\u0001\u0002",
    "\u0565\u0568\u0005\u001c\u000f\u0002\u0566\u0568\u0005\u001a\u000e\u0002",
    "\u0567\u0559\u0003\u0002\u0002\u0002\u0567\u0566\u0003\u0002\u0002\u0002",
    "\u0568K\u0003\u0002\u0002\u0002\u0569\u056d\b\'\u0001\u0002\u056a\u056c",
    "\u0005\u0016\f\u0002\u056b\u056a\u0003\u0002\u0002\u0002\u056c\u056f",
    "\u0003\u0002\u0002\u0002\u056d\u056b\u0003\u0002\u0002\u0002\u056d\u056e",
    "\u0003\u0002\u0002\u0002\u056e\u0570\u0003\u0002\u0002\u0002\u056f\u056d",
    "\u0003\u0002\u0002\u0002\u0570\u0571\u0005\u00f4{\u0002\u0571\u0575",
    "\b\'\u0001\u0002\u0572\u0574\u0005\u0016\f\u0002\u0573\u0572\u0003\u0002",
    "\u0002\u0002\u0574\u0577\u0003\u0002\u0002\u0002\u0575\u0573\u0003\u0002",
    "\u0002\u0002\u0575\u0576\u0003\u0002\u0002\u0002\u0576M\u0003\u0002",
    "\u0002\u0002\u0577\u0575\u0003\u0002\u0002\u0002\u0578\u057c\b(\u0001",
    "\u0002\u0579\u057b\u0005\u0016\f\u0002\u057a\u0579\u0003\u0002\u0002",
    "\u0002\u057b\u057e\u0003\u0002\u0002\u0002\u057c\u057a\u0003\u0002\u0002",
    "\u0002\u057c\u057d\u0003\u0002\u0002\u0002\u057d\u057f\u0003\u0002\u0002",
    "\u0002\u057e\u057c\u0003\u0002\u0002\u0002\u057f\u0580\u0005\u00f4{",
    "\u0002\u0580\u0584\b(\u0001\u0002\u0581\u0583\u0005\u0016\f\u0002\u0582",
    "\u0581\u0003\u0002\u0002\u0002\u0583\u0586\u0003\u0002\u0002\u0002\u0584",
    "\u0582\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002\u0002\u0002\u0585",
    "\u059b\u0003\u0002\u0002\u0002\u0586\u0584\u0003\u0002\u0002\u0002\u0587",
    "\u0588\u0007\u000b\u0002\u0002\u0588\u0592\b(\u0001\u0002\u0589\u058a",
    "\u0005\u00eav\u0002\u058a\u058b\b(\u0001\u0002\u058b\u0593\u0003\u0002",
    "\u0002\u0002\u058c\u058f\u0007\f\u0002\u0002\u058d\u058f\u0007\r\u0002",
    "\u0002\u058e\u058c\u0003\u0002\u0002\u0002\u058e\u058d\u0003\u0002\u0002",
    "\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590\u0591\u0007=\u0002",
    "\u0002\u0591\u0593\b(\u0001\u0002\u0592\u0589\u0003\u0002\u0002\u0002",
    "\u0592\u058e\u0003\u0002\u0002\u0002\u0593\u0594\u0003\u0002\u0002\u0002",
    "\u0594\u0598\b(\u0001\u0002\u0595\u0597\u0005\u0016\f\u0002\u0596\u0595",
    "\u0003\u0002\u0002\u0002\u0597\u059a\u0003\u0002\u0002\u0002\u0598\u0596",
    "\u0003\u0002\u0002\u0002\u0598\u0599\u0003\u0002\u0002\u0002\u0599\u059c",
    "\u0003\u0002\u0002\u0002\u059a\u0598\u0003\u0002\u0002\u0002\u059b\u0587",
    "\u0003\u0002\u0002\u0002\u059b\u059c\u0003\u0002\u0002\u0002\u059c\u059d",
    "\u0003\u0002\u0002\u0002\u059d\u059e\u0005\u001a\u000e\u0002\u059eO",
    "\u0003\u0002\u0002\u0002\u059f\u05a0\u0007N\u0002\u0002\u05a0\u05a1",
    "\u0005\u00c6d\u0002\u05a1\u05a2\b)\u0001\u0002\u05a2Q\u0003\u0002\u0002",
    "\u0002\u05a3\u05a7\b*\u0001\u0002\u05a4\u05a6\u0005\u0016\f\u0002\u05a5",
    "\u05a4\u0003\u0002\u0002\u0002\u05a6\u05a9\u0003\u0002\u0002\u0002\u05a7",
    "\u05a5\u0003\u0002\u0002\u0002\u05a7\u05a8\u0003\u0002\u0002\u0002\u05a8",
    "\u05ad\u0003\u0002\u0002\u0002\u05a9\u05a7\u0003\u0002\u0002\u0002\u05aa",
    "\u05ab\u0007]\u0002\u0002\u05ab\u05ae\u0005Z.\u0002\u05ac\u05ae\u0005",
    "X-\u0002\u05ad\u05aa\u0003\u0002\u0002\u0002\u05ad\u05ac\u0003\u0002",
    "\u0002\u0002\u05aeS\u0003\u0002\u0002\u0002\u05af\u05b3\b+\u0001\u0002",
    "\u05b0\u05b2\u0005\u0016\f\u0002\u05b1\u05b0\u0003\u0002\u0002\u0002",
    "\u05b2\u05b5\u0003\u0002\u0002\u0002\u05b3\u05b1\u0003\u0002\u0002\u0002",
    "\u05b3\u05b4\u0003\u0002\u0002\u0002\u05b4\u05b6\u0003\u0002\u0002\u0002",
    "\u05b5\u05b3\u0003\u0002\u0002\u0002\u05b6\u05b7\u0005X-\u0002\u05b7",
    "U\u0003\u0002\u0002\u0002\u05b8\u05b9\u0005\u00f4{\u0002\u05b9\u05d1",
    "\b,\u0001\u0002\u05ba\u05cb\u0007\u0007\u0002\u0002\u05bb\u05bf\u0005",
    "~@\u0002\u05bc\u05c0\u0005\u0086D\u0002\u05bd\u05c0\u0005\u0084C\u0002",
    "\u05be\u05c0\u0005\u00ecw\u0002\u05bf\u05bc\u0003\u0002\u0002\u0002",
    "\u05bf\u05bd\u0003\u0002\u0002\u0002\u05bf\u05be\u0003\u0002\u0002\u0002",
    "\u05c0\u05c2\u0003\u0002\u0002\u0002\u05c1\u05c3\u0005\u0080A\u0002",
    "\u05c2\u05c1\u0003\u0002\u0002\u0002\u05c2\u05c3\u0003\u0002\u0002\u0002",
    "\u05c3\u05cc\u0003\u0002\u0002\u0002\u05c4\u05c9\u0005\u008eH\u0002",
    "\u05c5\u05c6\u0007\u000b\u0002\u0002\u05c6\u05c7\u0005\u00c6d\u0002",
    "\u05c7\u05c8\b,\u0001\u0002\u05c8\u05ca\u0003\u0002\u0002\u0002\u05c9",
    "\u05c5\u0003\u0002\u0002\u0002\u05c9\u05ca\u0003\u0002\u0002\u0002\u05ca",
    "\u05cc\u0003\u0002\u0002\u0002\u05cb\u05bb\u0003\u0002\u0002\u0002\u05cb",
    "\u05c4\u0003\u0002\u0002\u0002\u05cc\u05d2\u0003\u0002\u0002\u0002\u05cd",
    "\u05ce\u0007\u000b\u0002\u0002\u05ce\u05cf\u0005\u00c6d\u0002\u05cf",
    "\u05d0\b,\u0001\u0002\u05d0\u05d2\u0003\u0002\u0002\u0002\u05d1\u05ba",
    "\u0003\u0002\u0002\u0002\u05d1\u05cd\u0003\u0002\u0002\u0002\u05d2\u05d3",
    "\u0003\u0002\u0002\u0002\u05d3\u05d4\u0005\u001a\u000e\u0002\u05d4W",
    "\u0003\u0002\u0002\u0002\u05d5\u05d8\b-\u0001\u0002\u05d6\u05d7\u0007",
    "\u008f\u0002\u0002\u05d7\u05d9\b-\u0001\u0002\u05d8\u05d6\u0003\u0002",
    "\u0002\u0002\u05d8\u05d9\u0003\u0002\u0002\u0002\u05d9\u05dc\u0003\u0002",
    "\u0002\u0002\u05da\u05db\u00072\u0002\u0002\u05db\u05dd\b-\u0001\u0002",
    "\u05dc\u05da\u0003\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002",
    "\u05dd\u05e0\u0003\u0002\u0002\u0002\u05de\u05df\u0007p\u0002\u0002",
    "\u05df\u05e1\b-\u0001\u0002\u05e0\u05de\u0003\u0002\u0002\u0002\u05e0",
    "\u05e1\u0003\u0002\u0002\u0002\u05e1\u05e3\u0003\u0002\u0002\u0002\u05e2",
    "\u05e4\u0007R\u0002\u0002\u05e3\u05e2\u0003\u0002\u0002\u0002\u05e3",
    "\u05e4\u0003\u0002\u0002\u0002\u05e4\u05e5\u0003\u0002\u0002\u0002\u05e5",
    "\u05e6\u0005\u00f4{\u0002\u05e6\u05ea\b-\u0001\u0002\u05e7\u05e9\u0005",
    "\u0014\u000b\u0002\u05e8\u05e7\u0003\u0002\u0002\u0002\u05e9\u05ec\u0003",
    "\u0002\u0002\u0002\u05ea\u05e8\u0003\u0002\u0002\u0002\u05ea\u05eb\u0003",
    "\u0002\u0002\u0002\u05eb\u069d\u0003\u0002\u0002\u0002\u05ec\u05ea\u0003",
    "\u0002\u0002\u0002\u05ed\u05f2\u0005x=\u0002\u05ee\u05ef\u0005j6\u0002",
    "\u05ef\u05f0\u0005\u001a\u000e\u0002\u05f0\u05f3\u0003\u0002\u0002\u0002",
    "\u05f1\u05f3\u0005\u001c\u000f\u0002\u05f2\u05ee\u0003\u0002\u0002\u0002",
    "\u05f2\u05f1\u0003\u0002\u0002\u0002\u05f3\u069e\u0003\u0002\u0002\u0002",
    "\u05f4\u068f\u0007\u0007\u0002\u0002\u05f5\u05f7\u0005x=\u0002\u05f6",
    "\u05f8\u0005j6\u0002\u05f7\u05f6\u0003\u0002\u0002\u0002\u05f7\u05f8",
    "\u0003\u0002\u0002\u0002\u05f8\u05f9\u0003\u0002\u0002\u0002\u05f9\u05fa",
    "\u0005\u001a\u000e\u0002\u05fa\u0690\u0003\u0002\u0002\u0002\u05fb\u0612",
    "\u0005~@\u0002\u05fc\u05fd\u0005x=\u0002\u05fd\u05fe\u0005\u001c\u000f",
    "\u0002\u05fe\u0613\u0003\u0002\u0002\u0002\u05ff\u0600\u0007v\u0002",
    "\u0002\u0600\u0601\b-\u0001\u0002\u0601\u0602\u0005z>\u0002\u0602\u0603",
    "\u0005\u001c\u000f\u0002\u0603\u0613\u0003\u0002\u0002\u0002\u0604\u0605",
    "\u0007o\u0002\u0002\u0605\u0606\b-\u0001\u0002\u0606\u0607\u0005z>\u0002",
    "\u0607\u0608\u0005\u001c\u000f\u0002\u0608\u0613\u0003\u0002\u0002\u0002",
    "\u0609\u060a\u0005\u0086D\u0002\u060a\u060b\u0005\u0082B\u0002\u060b",
    "\u0613\u0003\u0002\u0002\u0002\u060c\u060d\u0005\u0084C\u0002\u060d",
    "\u060e\u0005\u0082B\u0002\u060e\u0613\u0003\u0002\u0002\u0002\u060f",
    "\u0610\u0005\u00ecw\u0002\u0610\u0611\u0005\u0082B\u0002\u0611\u0613",
    "\u0003\u0002\u0002\u0002\u0612\u05fc\u0003\u0002\u0002\u0002\u0612\u05ff",
    "\u0003\u0002\u0002\u0002\u0612\u0604\u0003\u0002\u0002\u0002\u0612\u0609",
    "\u0003\u0002\u0002\u0002\u0612\u060c\u0003\u0002\u0002\u0002\u0612\u060f",
    "\u0003\u0002\u0002\u0002\u0613\u0690\u0003\u0002\u0002\u0002\u0614\u0615",
    "\u0007D\u0002\u0002\u0615\u0616\u00076\u0002\u0002\u0616\u061a\b-\u0001",
    "\u0002\u0617\u0618\u0007o\u0002\u0002\u0618\u061a\b-\u0001\u0002\u0619",
    "\u0614\u0003\u0002\u0002\u0002\u0619\u0617\u0003\u0002\u0002\u0002\u061a",
    "\u0646\u0003\u0002\u0002\u0002\u061b\u061d\u0005x=\u0002\u061c\u061e",
    "\u0005j6\u0002\u061d\u061c\u0003\u0002\u0002\u0002\u061d\u061e\u0003",
    "\u0002\u0002\u0002\u061e\u0647\u0003\u0002\u0002\u0002\u061f\u0621\u0005",
    "\u008cG\u0002\u0620\u0622\u0005j6\u0002\u0621\u0620\u0003\u0002\u0002",
    "\u0002\u0621\u0622\u0003\u0002\u0002\u0002\u0622\u0623\u0003\u0002\u0002",
    "\u0002\u0623\u0627\b-\u0001\u0002\u0624\u0626\u0005\u0016\f\u0002\u0625",
    "\u0624\u0003\u0002\u0002\u0002\u0626\u0629\u0003\u0002\u0002\u0002\u0627",
    "\u0625\u0003\u0002\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002\u0628",
    "\u0647\u0003\u0002\u0002\u0002\u0629\u0627\u0003\u0002\u0002\u0002\u062a",
    "\u062c\u0005\u008eH\u0002\u062b\u062d\u0005j6\u0002\u062c\u062b\u0003",
    "\u0002\u0002\u0002\u062c\u062d\u0003\u0002\u0002\u0002\u062d\u062e\u0003",
    "\u0002\u0002\u0002\u062e\u0632\b-\u0001\u0002\u062f\u0631\u0005\u0016",
    "\f\u0002\u0630\u062f\u0003\u0002\u0002\u0002\u0631\u0634\u0003\u0002",
    "\u0002\u0002\u0632\u0630\u0003\u0002\u0002\u0002\u0632\u0633\u0003\u0002",
    "\u0002\u0002\u0633\u0644\u0003\u0002\u0002\u0002\u0634\u0632\u0003\u0002",
    "\u0002\u0002\u0635\u0636\b-\u0001\u0002\u0636\u0637\u0007W\u0002\u0002",
    "\u0637\u0638\u0007\u0004\u0002\u0002\u0638\u063c\b-\u0001\u0002\u0639",
    "\u063b\u0005N(\u0002\u063a\u0639\u0003\u0002\u0002\u0002\u063b\u063e",
    "\u0003\u0002\u0002\u0002\u063c\u063a\u0003\u0002\u0002\u0002\u063c\u063d",
    "\u0003\u0002\u0002\u0002\u063d\u063f\u0003\u0002\u0002\u0002\u063e\u063c",
    "\u0003\u0002\u0002\u0002\u063f\u0640\u0007\u0006\u0002\u0002\u0640\u0642",
    "\b-\u0001\u0002\u0641\u0643\u0005j6\u0002\u0642\u0641\u0003\u0002\u0002",
    "\u0002\u0642\u0643\u0003\u0002\u0002\u0002\u0643\u0645\u0003\u0002\u0002",
    "\u0002\u0644\u0635\u0003\u0002\u0002\u0002\u0644\u0645\u0003\u0002\u0002",
    "\u0002\u0645\u0647\u0003\u0002\u0002\u0002\u0646\u061b\u0003\u0002\u0002",
    "\u0002\u0646\u061f\u0003\u0002\u0002\u0002\u0646\u062a\u0003\u0002\u0002",
    "\u0002\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u0649\u0005\u001a\u000e",
    "\u0002\u0649\u0690\u0003\u0002\u0002\u0002\u064a\u064c\u0005\u008cG",
    "\u0002\u064b\u064d\u0005l7\u0002\u064c\u064b\u0003\u0002\u0002\u0002",
    "\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064e\u0003\u0002\u0002\u0002",
    "\u064e\u0652\b-\u0001\u0002\u064f\u0651\u0005\u0016\f\u0002\u0650\u064f",
    "\u0003\u0002\u0002\u0002\u0651\u0654\u0003\u0002\u0002\u0002\u0652\u0650",
    "\u0003\u0002\u0002\u0002\u0652\u0653\u0003\u0002\u0002\u0002\u0653\u0655",
    "\u0003\u0002\u0002\u0002\u0654\u0652\u0003\u0002\u0002\u0002\u0655\u0656",
    "\u0005\u001a\u000e\u0002\u0656\u0690\u0003\u0002\u0002\u0002\u0657\u0658",
    "\u0007n\u0002\u0002\u0658\u0659\b-\u0001\u0002\u0659\u065a\u0005\u008e",
    "H\u0002\u065a\u065e\b-\u0001\u0002\u065b\u065d\u0005\u0016\f\u0002\u065c",
    "\u065b\u0003\u0002\u0002\u0002\u065d\u0660\u0003\u0002\u0002\u0002\u065e",
    "\u065c\u0003\u0002\u0002\u0002\u065e\u065f\u0003\u0002\u0002\u0002\u065f",
    "\u0669\u0003\u0002\u0002\u0002\u0660\u065e\u0003\u0002\u0002\u0002\u0661",
    "\u0662\u0005l7\u0002\u0662\u0666\b-\u0001\u0002\u0663\u0665\u0005\u0016",
    "\f\u0002\u0664\u0663\u0003\u0002\u0002\u0002\u0665\u0668\u0003\u0002",
    "\u0002\u0002\u0666\u0664\u0003\u0002\u0002\u0002\u0666\u0667\u0003\u0002",
    "\u0002\u0002\u0667\u066a\u0003\u0002\u0002\u0002\u0668\u0666\u0003\u0002",
    "\u0002\u0002\u0669\u0661\u0003\u0002\u0002\u0002\u0669\u066a\u0003\u0002",
    "\u0002\u0002\u066a\u066b\u0003\u0002\u0002\u0002\u066b\u066c\u0005\u001a",
    "\u000e\u0002\u066c\u0690\u0003\u0002\u0002\u0002\u066d\u066e\u0005\u008e",
    "H\u0002\u066e\u0672\b-\u0001\u0002\u066f\u0671\u0005\u0016\f\u0002\u0670",
    "\u066f\u0003\u0002\u0002\u0002\u0671\u0674\u0003\u0002\u0002\u0002\u0672",
    "\u0670\u0003\u0002\u0002\u0002\u0672\u0673\u0003\u0002\u0002\u0002\u0673",
    "\u068b\u0003\u0002\u0002\u0002\u0674\u0672\u0003\u0002\u0002\u0002\u0675",
    "\u0676\u0007W\u0002\u0002\u0676\u0677\u0007\u0004\u0002\u0002\u0677",
    "\u067b\b-\u0001\u0002\u0678\u067a\u0005N(\u0002\u0679\u0678\u0003\u0002",
    "\u0002\u0002\u067a\u067d\u0003\u0002\u0002\u0002\u067b\u0679\u0003\u0002",
    "\u0002\u0002\u067b\u067c\u0003\u0002\u0002\u0002\u067c\u067e\u0003\u0002",
    "\u0002\u0002\u067d\u067b\u0003\u0002\u0002\u0002\u067e\u067f\u0007\u0006",
    "\u0002\u0002\u067f\u0681\b-\u0001\u0002\u0680\u0682\u0005l7\u0002\u0681",
    "\u0680\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002\u0002\u0002\u0682",
    "\u068c\u0003\u0002\u0002\u0002\u0683\u0684\u0005l7\u0002\u0684\u0688",
    "\b-\u0001\u0002\u0685\u0687\u0005\u0016\f\u0002\u0686\u0685\u0003\u0002",
    "\u0002\u0002\u0687\u068a\u0003\u0002\u0002\u0002\u0688\u0686\u0003\u0002",
    "\u0002\u0002\u0688\u0689\u0003\u0002\u0002\u0002\u0689\u068c\u0003\u0002",
    "\u0002\u0002\u068a\u0688\u0003\u0002\u0002\u0002\u068b\u0675\u0003\u0002",
    "\u0002\u0002\u068b\u0683\u0003\u0002\u0002\u0002\u068b\u068c\u0003\u0002",
    "\u0002\u0002\u068c\u068d\u0003\u0002\u0002\u0002\u068d\u068e\u0005\u001a",
    "\u000e\u0002\u068e\u0690\u0003\u0002\u0002\u0002\u068f\u05f5\u0003\u0002",
    "\u0002\u0002\u068f\u05fb\u0003\u0002\u0002\u0002\u068f\u0619\u0003\u0002",
    "\u0002\u0002\u068f\u064a\u0003\u0002\u0002\u0002\u068f\u0657\u0003\u0002",
    "\u0002\u0002\u068f\u066d\u0003\u0002\u0002\u0002\u0690\u069e\u0003\u0002",
    "\u0002\u0002\u0691\u0692\u0007\u000b\u0002\u0002\u0692\u0693\u0005\u00c6",
    "d\u0002\u0693\u0694\b-\u0001\u0002\u0694\u0698\b-\u0001\u0002\u0695",
    "\u0697\u0005\u0016\f\u0002\u0696\u0695\u0003\u0002\u0002\u0002\u0697",
    "\u069a\u0003\u0002\u0002\u0002\u0698\u0696\u0003\u0002\u0002\u0002\u0698",
    "\u0699\u0003\u0002\u0002\u0002\u0699\u069b\u0003\u0002\u0002\u0002\u069a",
    "\u0698\u0003\u0002\u0002\u0002\u069b\u069c\u0005\u001a\u000e\u0002\u069c",
    "\u069e\u0003\u0002\u0002\u0002\u069d\u05ed\u0003\u0002\u0002\u0002\u069d",
    "\u05f4\u0003\u0002\u0002\u0002\u069d\u0691\u0003\u0002\u0002\u0002\u069e",
    "Y\u0003\u0002\u0002\u0002\u069f\u06a0\u0007R\u0002\u0002\u06a0\u06a2",
    "\b.\u0001\u0002\u06a1\u069f\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003",
    "\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06a4\u0005",
    "\u00f4{\u0002\u06a4\u06a5\b.\u0001\u0002\u06a5\u06a6\u0005D#\u0002\u06a6",
    "[\u0003\u0002\u0002\u0002\u06a7\u06a8\u0007\u000e\u0002\u0002\u06a8",
    "\u06bb\b/\u0001\u0002\u06a9\u06ad\b/\u0001\u0002\u06aa\u06ac\u0005\u0018",
    "\r\u0002\u06ab\u06aa\u0003\u0002\u0002\u0002\u06ac\u06af\u0003\u0002",
    "\u0002\u0002\u06ad\u06ab\u0003\u0002\u0002\u0002\u06ad\u06ae\u0003\u0002",
    "\u0002\u0002\u06ae\u06b0\u0003\u0002\u0002\u0002\u06af\u06ad\u0003\u0002",
    "\u0002\u0002\u06b0\u06b3\b/\u0001\u0002\u06b1\u06b2\u0007\u008f\u0002",
    "\u0002\u06b2\u06b4\b/\u0001\u0002\u06b3\u06b1\u0003\u0002\u0002\u0002",
    "\u06b3\u06b4\u0003\u0002\u0002\u0002\u06b4\u06b7\u0003\u0002\u0002\u0002",
    "\u06b5\u06b6\u00072\u0002\u0002\u06b6\u06b8\b/\u0001\u0002\u06b7\u06b5",
    "\u0003\u0002\u0002\u0002\u06b7\u06b8\u0003\u0002\u0002\u0002\u06b8\u06b9",
    "\u0003\u0002\u0002\u0002\u06b9\u06bb\u0005^0\u0002\u06ba\u06a7\u0003",
    "\u0002\u0002\u0002\u06ba\u06a9\u0003\u0002\u0002\u0002\u06bb]\u0003",
    "\u0002\u0002\u0002\u06bc\u06e3\b0\u0001\u0002\u06bd\u06be\u0005\u00c6",
    "d\u0002\u06be\u06c7\b0\u0001\u0002\u06bf\u06c0\u0007*\u0002\u0002\u06c0",
    "\u06c1\u0005\u00f4{\u0002\u06c1\u06c2\b0\u0001\u0002\u06c2\u06c8\u0003",
    "\u0002\u0002\u0002\u06c3\u06c4\u0005\u00f4{\u0002\u06c4\u06c5\b0\u0001",
    "\u0002\u06c5\u06c8\u0003\u0002\u0002\u0002\u06c6\u06c8\b0\u0001\u0002",
    "\u06c7\u06bf\u0003\u0002\u0002\u0002\u06c7\u06c3\u0003\u0002\u0002\u0002",
    "\u06c7\u06c6\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003\u0002\u0002\u0002",
    "\u06c9\u06d9\b0\u0001\u0002\u06ca\u06cb\b0\u0001\u0002\u06cb\u06cd\u0005",
    "b2\u0002\u06cc\u06ce\u0005*\u0016\u0002\u06cd\u06cc\u0003\u0002\u0002",
    "\u0002\u06cd\u06ce\u0003\u0002\u0002\u0002\u06ce\u06da\u0003\u0002\u0002",
    "\u0002\u06cf\u06d0\b0\u0001\u0002\u06d0\u06d7\u0007\u0097\u0002\u0002",
    "\u06d1\u06d3\u0005b2\u0002\u06d2\u06d4\u0005*\u0016\u0002\u06d3\u06d2",
    "\u0003\u0002\u0002\u0002\u06d3\u06d4\u0003\u0002\u0002\u0002\u06d4\u06d8",
    "\u0003\u0002\u0002\u0002\u06d5\u06d6\u0007\u000e\u0002\u0002\u06d6\u06d8",
    "\b0\u0001\u0002\u06d7\u06d1\u0003\u0002\u0002\u0002\u06d7\u06d5\u0003",
    "\u0002\u0002\u0002\u06d8\u06da\u0003\u0002\u0002\u0002\u06d9\u06ca\u0003",
    "\u0002\u0002\u0002\u06d9\u06cf\u0003\u0002\u0002\u0002\u06d9\u06da\u0003",
    "\u0002\u0002\u0002\u06da\u06e4\u0003\u0002\u0002\u0002\u06db\u06dd\u0005",
    "b2\u0002\u06dc\u06de\u0005*\u0016\u0002\u06dd\u06dc\u0003\u0002\u0002",
    "\u0002\u06dd\u06de\u0003\u0002\u0002\u0002\u06de\u06df\u0003\u0002\u0002",
    "\u0002\u06df\u06e0\u0007*\u0002\u0002\u06e0\u06e1\u0005\u00f4{\u0002",
    "\u06e1\u06e2\b0\u0001\u0002\u06e2\u06e4\u0003\u0002\u0002\u0002\u06e3",
    "\u06bd\u0003\u0002\u0002\u0002\u06e3\u06db\u0003\u0002\u0002\u0002\u06e4",
    "\u06e5\u0003\u0002\u0002\u0002\u06e5\u06e9\b0\u0001\u0002\u06e6\u06e8",
    "\u0005\u0014\u000b\u0002\u06e7\u06e6\u0003\u0002\u0002\u0002\u06e8\u06eb",
    "\u0003\u0002\u0002\u0002\u06e9\u06e7\u0003\u0002\u0002\u0002\u06e9\u06ea",
    "\u0003\u0002\u0002\u0002\u06ea\u0718\u0003\u0002\u0002\u0002\u06eb\u06e9",
    "\u0003\u0002\u0002\u0002\u06ec\u0716\u0007\u0007\u0002\u0002\u06ed\u06ee",
    "\u0007~\u0002\u0002\u06ee\u06ef\u0007\u0085\u0002\u0002\u06ef\u06f0",
    "\b0\u0001\u0002\u06f0\u06f9\u0005\u00ecw\u0002\u06f1\u06fa\u0005\u0080",
    "A\u0002\u06f2\u06f6\b0\u0001\u0002\u06f3\u06f5\u0005\u0016\f\u0002\u06f4",
    "\u06f3\u0003\u0002\u0002\u0002\u06f5\u06f8\u0003\u0002\u0002\u0002\u06f6",
    "\u06f4\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003\u0002\u0002\u0002\u06f7",
    "\u06fa\u0003\u0002\u0002\u0002\u06f8\u06f6\u0003\u0002\u0002\u0002\u06f9",
    "\u06f1\u0003\u0002\u0002\u0002\u06f9\u06f2\u0003\u0002\u0002\u0002\u06fa",
    "\u0717\u0003\u0002\u0002\u0002\u06fb\u06fc\u0005\u008cG\u0002\u06fc",
    "\u0700\b0\u0001\u0002\u06fd\u06ff\u0005\u0016\f\u0002\u06fe\u06fd\u0003",
    "\u0002\u0002\u0002\u06ff\u0702\u0003\u0002\u0002\u0002\u0700\u06fe\u0003",
    "\u0002\u0002\u0002\u0700\u0701\u0003\u0002\u0002\u0002\u0701\u0717\u0003",
    "\u0002\u0002\u0002\u0702\u0700\u0003\u0002\u0002\u0002\u0703\u0704\u0005",
    "\u008eH\u0002\u0704\u0708\b0\u0001\u0002\u0705\u0707\u0005\u0016\f\u0002",
    "\u0706\u0705\u0003\u0002\u0002\u0002\u0707\u070a\u0003\u0002\u0002\u0002",
    "\u0708\u0706\u0003\u0002\u0002\u0002\u0708\u0709\u0003\u0002\u0002\u0002",
    "\u0709\u0717\u0003\u0002\u0002\u0002\u070a\u0708\u0003\u0002\u0002\u0002",
    "\u070b\u070f\u0005~@\u0002\u070c\u0710\u0005\u0086D\u0002\u070d\u0710",
    "\u0005\u0084C\u0002\u070e\u0710\u0005\u00ecw\u0002\u070f\u070c\u0003",
    "\u0002\u0002\u0002\u070f\u070d\u0003\u0002\u0002\u0002\u070f\u070e\u0003",
    "\u0002\u0002\u0002\u0710\u0712\u0003\u0002\u0002\u0002\u0711\u0713\u0005",
    "\u0080A\u0002\u0712\u0711\u0003\u0002\u0002\u0002\u0712\u0713\u0003",
    "\u0002\u0002\u0002\u0713\u0714\u0003\u0002\u0002\u0002\u0714\u0715\b",
    "0\u0001\u0002\u0715\u0717\u0003\u0002\u0002\u0002\u0716\u06ed\u0003",
    "\u0002\u0002\u0002\u0716\u06fb\u0003\u0002\u0002\u0002\u0716\u0703\u0003",
    "\u0002\u0002\u0002\u0716\u070b\u0003\u0002\u0002\u0002\u0717\u0719\u0003",
    "\u0002\u0002\u0002\u0718\u06ec\u0003\u0002\u0002\u0002\u0718\u0719\u0003",
    "\u0002\u0002\u0002\u0719_\u0003\u0002\u0002\u0002\u071a\u071b\u0007",
    "\u0004\u0002\u0002\u071b\u0725\b1\u0001\u0002\u071c\u0722\u0005\\/\u0002",
    "\u071d\u071e\u0007\u0005\u0002\u0002\u071e\u071f\b1\u0001\u0002\u071f",
    "\u0721\u0005\\/\u0002\u0720\u071d\u0003\u0002\u0002\u0002\u0721\u0724",
    "\u0003\u0002\u0002\u0002\u0722\u0720\u0003\u0002\u0002\u0002\u0722\u0723",
    "\u0003\u0002\u0002\u0002\u0723\u0726\u0003\u0002\u0002\u0002\u0724\u0722",
    "\u0003\u0002\u0002\u0002\u0725\u071c\u0003\u0002\u0002\u0002\u0725\u0726",
    "\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002\u0002\u0002\u0727\u0728",
    "\u0007\u0006\u0002\u0002\u0728\u0729\b1\u0001\u0002\u0729a\u0003\u0002",
    "\u0002\u0002\u072a\u072b\u0007\u0004\u0002\u0002\u072b\u0735\b2\u0001",
    "\u0002\u072c\u0732\u0005d3\u0002\u072d\u072e\u0007\u0005\u0002\u0002",
    "\u072e\u072f\b2\u0001\u0002\u072f\u0731\u0005d3\u0002\u0730\u072d\u0003",
    "\u0002\u0002\u0002\u0731\u0734\u0003\u0002\u0002\u0002\u0732\u0730\u0003",
    "\u0002\u0002\u0002\u0732\u0733\u0003\u0002\u0002\u0002\u0733\u0736\u0003",
    "\u0002\u0002\u0002\u0734\u0732\u0003\u0002\u0002\u0002\u0735\u072c\u0003",
    "\u0002\u0002\u0002\u0735\u0736\u0003\u0002\u0002\u0002\u0736\u0737\u0003",
    "\u0002\u0002\u0002\u0737\u0738\u0007\u0006\u0002\u0002\u0738\u0739\b",
    "2\u0001\u0002\u0739c\u0003\u0002\u0002\u0002\u073a\u073b\u0007\u000e",
    "\u0002\u0002\u073b\u0745\b3\u0001\u0002\u073c\u0740\b3\u0001\u0002\u073d",
    "\u073f\u0005\u0018\r\u0002\u073e\u073d\u0003\u0002\u0002\u0002\u073f",
    "\u0742\u0003\u0002\u0002\u0002\u0740\u073e\u0003\u0002\u0002\u0002\u0740",
    "\u0741\u0003\u0002\u0002\u0002\u0741\u0743\u0003\u0002\u0002\u0002\u0742",
    "\u0740\u0003\u0002\u0002\u0002\u0743\u0745\u0005^0\u0002\u0744\u073a",
    "\u0003\u0002\u0002\u0002\u0744\u073c\u0003\u0002\u0002\u0002\u0745e",
    "\u0003\u0002\u0002\u0002\u0746\u0747\u0007\b\u0002\u0002\u0747\u0751",
    "\b4\u0001\u0002\u0748\u074e\u0005h5\u0002\u0749\u074a\u0007\u0005\u0002",
    "\u0002\u074a\u074b\b4\u0001\u0002\u074b\u074d\u0005h5\u0002\u074c\u0749",
    "\u0003\u0002\u0002\u0002\u074d\u0750\u0003\u0002\u0002\u0002\u074e\u074c",
    "\u0003\u0002\u0002\u0002\u074e\u074f\u0003\u0002\u0002\u0002\u074f\u0752",
    "\u0003\u0002\u0002\u0002\u0750\u074e\u0003\u0002\u0002\u0002\u0751\u0748",
    "\u0003\u0002\u0002\u0002\u0751\u0752\u0003\u0002\u0002\u0002\u0752\u0753",
    "\u0003\u0002\u0002\u0002\u0753\u0754\u0007\t\u0002\u0002\u0754\u0755",
    "\b4\u0001\u0002\u0755g\u0003\u0002\u0002\u0002\u0756\u075a\b5\u0001",
    "\u0002\u0757\u0759\u0005\u0016\f\u0002\u0758\u0757\u0003\u0002\u0002",
    "\u0002\u0759\u075c\u0003\u0002\u0002\u0002\u075a\u0758\u0003\u0002\u0002",
    "\u0002\u075a\u075b\u0003\u0002\u0002\u0002\u075b\u075d\u0003\u0002\u0002",
    "\u0002\u075c\u075a\u0003\u0002\u0002\u0002\u075d\u075e\u0005\u00f4{",
    "\u0002\u075e\u0762\b5\u0001\u0002\u075f\u0761\u0005\u0014\u000b\u0002",
    "\u0760\u075f\u0003\u0002\u0002\u0002\u0761\u0764\u0003\u0002\u0002\u0002",
    "\u0762\u0760\u0003\u0002\u0002\u0002\u0762\u0763\u0003\u0002\u0002\u0002",
    "\u0763\u0765\u0003\u0002\u0002\u0002\u0764\u0762\u0003\u0002\u0002\u0002",
    "\u0765\u0767\u0005r:\u0002\u0766\u0768\u0005P)\u0002\u0767\u0766\u0003",
    "\u0002\u0002\u0002\u0767\u0768\u0003\u0002\u0002\u0002\u0768\u0769\u0003",
    "\u0002\u0002\u0002\u0769\u076d\b5\u0001\u0002\u076a\u076c\u0005\u0016",
    "\f\u0002\u076b\u076a\u0003\u0002\u0002\u0002\u076c\u076f\u0003\u0002",
    "\u0002\u0002\u076d\u076b\u0003\u0002\u0002\u0002\u076d\u076e\u0003\u0002",
    "\u0002\u0002\u076ei\u0003\u0002\u0002\u0002\u076f\u076d\u0003\u0002",
    "\u0002\u0002\u0770\u0771\u00074\u0002\u0002\u0771\u0772\u00075\u0002",
    "\u0002\u0772\u0776\b6\u0001\u0002\u0773\u0774\u00075\u0002\u0002\u0774",
    "\u0776\b6\u0001\u0002\u0775\u0770\u0003\u0002\u0002\u0002\u0775\u0773",
    "\u0003\u0002\u0002\u0002\u0776k\u0003\u0002\u0002\u0002\u0777\u0779",
    "\u0005j6\u0002\u0778\u077a\u0005P)\u0002\u0779\u0778\u0003\u0002\u0002",
    "\u0002\u0779\u077a\u0003\u0002\u0002\u0002\u077a\u0783\u0003\u0002\u0002",
    "\u0002\u077b\u077d\u0005P)\u0002\u077c\u077e\u0005j6\u0002\u077d\u077c",
    "\u0003\u0002\u0002\u0002\u077d\u077e\u0003\u0002\u0002\u0002\u077e\u0783",
    "\u0003\u0002\u0002\u0002\u077f\u0780\u0007\u000b\u0002\u0002\u0780\u0781",
    "\b7\u0001\u0002\u0781\u0783\u0005\u00c6d\u0002\u0782\u0777\u0003\u0002",
    "\u0002\u0002\u0782\u077b\u0003\u0002\u0002\u0002\u0782\u077f\u0003\u0002",
    "\u0002\u0002\u0783m\u0003\u0002\u0002\u0002\u0784\u0785\u0007\u008c",
    "\u0002\u0002\u0785\u0786\u0005\u00ecw\u0002\u0786\u078a\b8\u0001\u0002",
    "\u0787\u0789\u0005\u0014\u000b\u0002\u0788\u0787\u0003\u0002\u0002\u0002",
    "\u0789\u078c\u0003\u0002\u0002\u0002\u078a\u0788\u0003\u0002\u0002\u0002",
    "\u078a\u078b\u0003\u0002\u0002\u0002\u078b\u079b\u0003\u0002\u0002\u0002",
    "\u078c\u078a\u0003\u0002\u0002\u0002\u078d\u079c\u0005f4\u0002\u078e",
    "\u078f\t\u0003\u0002\u0002\u078f\u0790\b8\u0001\u0002\u0790\u0791\u0007",
    "z\u0002\u0002\u0791\u0796\u0005h5\u0002\u0792\u0793\u0007\u0005\u0002",
    "\u0002\u0793\u0795\u0005h5\u0002\u0794\u0792\u0003\u0002\u0002\u0002",
    "\u0795\u0798\u0003\u0002\u0002\u0002\u0796\u0794\u0003\u0002\u0002\u0002",
    "\u0796\u0797\u0003\u0002\u0002\u0002\u0797\u0799\u0003\u0002\u0002\u0002",
    "\u0798\u0796\u0003\u0002\u0002\u0002\u0799\u079a\b8\u0001\u0002\u079a",
    "\u079c\u0003\u0002\u0002\u0002\u079b\u078d\u0003\u0002\u0002\u0002\u079b",
    "\u078e\u0003\u0002\u0002\u0002\u079b\u079c\u0003\u0002\u0002\u0002\u079c",
    "\u079d\u0003\u0002\u0002\u0002\u079d\u079e\u0007*\u0002\u0002\u079e",
    "\u079f\u0005\u0096L\u0002\u079f\u07a0\b8\u0001\u0002\u07a0\u07a1\u0005",
    "\u001a\u000e\u0002\u07a1o\u0003\u0002\u0002\u0002\u07a2\u07a3\u0005",
    "\u00ecw\u0002\u07a3\u07a4\b9\u0001\u0002\u07a4q\u0003\u0002\u0002\u0002",
    "\u07a5\u07c4\u0005x=\u0002\u07a6\u07c1\u0007\u0007\u0002\u0002\u07a7",
    "\u07a9\u0005x=\u0002\u07a8\u07aa\u0005j6\u0002\u07a9\u07a8\u0003\u0002",
    "\u0002\u0002\u07a9\u07aa\u0003\u0002\u0002\u0002\u07aa\u07c2\u0003\u0002",
    "\u0002\u0002\u07ab\u07c2\u0005|?\u0002\u07ac\u07ae\u0005\u008cG\u0002",
    "\u07ad\u07af\u0005j6\u0002\u07ae\u07ad\u0003\u0002\u0002\u0002\u07ae",
    "\u07af\u0003\u0002\u0002\u0002\u07af\u07c2\u0003\u0002\u0002\u0002\u07b0",
    "\u07b2\u0005\u008eH\u0002\u07b1\u07b3\u0005j6\u0002\u07b2\u07b1\u0003",
    "\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3\u07bf\u0003",
    "\u0002\u0002\u0002\u07b4\u07b5\u0007W\u0002\u0002\u07b5\u07b6\u0007",
    "\u0004\u0002\u0002\u07b6\u07ba\b:\u0001\u0002\u07b7\u07b9\u0005N(\u0002",
    "\u07b8\u07b7\u0003\u0002\u0002\u0002\u07b9\u07bc\u0003\u0002\u0002\u0002",
    "\u07ba\u07b8\u0003\u0002\u0002\u0002\u07ba\u07bb\u0003\u0002\u0002\u0002",
    "\u07bb\u07bd\u0003\u0002\u0002\u0002\u07bc\u07ba\u0003\u0002\u0002\u0002",
    "\u07bd\u07be\u0007\u0006\u0002\u0002\u07be\u07c0\b:\u0001\u0002\u07bf",
    "\u07b4\u0003\u0002\u0002\u0002\u07bf\u07c0\u0003\u0002\u0002\u0002\u07c0",
    "\u07c2\u0003\u0002\u0002\u0002\u07c1\u07a7\u0003\u0002\u0002\u0002\u07c1",
    "\u07ab\u0003\u0002\u0002\u0002\u07c1\u07ac\u0003\u0002\u0002\u0002\u07c1",
    "\u07b0\u0003\u0002\u0002\u0002\u07c2\u07c4\u0003\u0002\u0002\u0002\u07c3",
    "\u07a5\u0003\u0002\u0002\u0002\u07c3\u07a6\u0003\u0002\u0002\u0002\u07c4",
    "s\u0003\u0002\u0002\u0002\u07c5\u07c6\u0007\u007f\u0002\u0002\u07c6",
    "\u07e1\b;\u0001\u0002\u07c7\u07c9\u0005x=\u0002\u07c8\u07ca\u0005j6",
    "\u0002\u07c9\u07c8\u0003\u0002\u0002\u0002\u07c9\u07ca\u0003\u0002\u0002",
    "\u0002\u07ca\u07e2\u0003\u0002\u0002\u0002\u07cb\u07e2\u0005|?\u0002",
    "\u07cc\u07ce\u0005\u008cG\u0002\u07cd\u07cf\u0005j6\u0002\u07ce\u07cd",
    "\u0003\u0002\u0002\u0002\u07ce\u07cf\u0003\u0002\u0002\u0002\u07cf\u07e2",
    "\u0003\u0002\u0002\u0002\u07d0\u07d2\u0005\u008eH\u0002\u07d1\u07d3",
    "\u0005j6\u0002\u07d2\u07d1\u0003\u0002\u0002\u0002\u07d2\u07d3\u0003",
    "\u0002\u0002\u0002\u07d3\u07df\u0003\u0002\u0002\u0002\u07d4\u07d5\u0007",
    "W\u0002\u0002\u07d5\u07d6\u0007\u0004\u0002\u0002\u07d6\u07da\b;\u0001",
    "\u0002\u07d7\u07d9\u0005N(\u0002\u07d8\u07d7\u0003\u0002\u0002\u0002",
    "\u07d9\u07dc\u0003\u0002\u0002\u0002\u07da\u07d8\u0003\u0002\u0002\u0002",
    "\u07da\u07db\u0003\u0002\u0002\u0002\u07db\u07dd\u0003\u0002\u0002\u0002",
    "\u07dc\u07da\u0003\u0002\u0002\u0002\u07dd\u07de\u0007\u0006\u0002\u0002",
    "\u07de\u07e0\b;\u0001\u0002\u07df\u07d4\u0003\u0002\u0002\u0002\u07df",
    "\u07e0\u0003\u0002\u0002\u0002\u07e0\u07e2\u0003\u0002\u0002\u0002\u07e1",
    "\u07c7\u0003\u0002\u0002\u0002\u07e1\u07cb\u0003\u0002\u0002\u0002\u07e1",
    "\u07cc\u0003\u0002\u0002\u0002\u07e1\u07d0\u0003\u0002\u0002\u0002\u07e2",
    "\u07e3\u0003\u0002\u0002\u0002\u07e3\u07e4\u0005\u001a\u000e\u0002\u07e4",
    "u\u0003\u0002\u0002\u0002\u07e5\u07e6\u0005x=\u0002\u07e6\u07e7\u0005",
    "\u001c\u000f\u0002\u07e7\u088f\u0003\u0002\u0002\u0002\u07e8\u07e9\u0007",
    "\u0007\u0002\u0002\u07e9\u088c\b<\u0001\u0002\u07ea\u07eb\u0005x=\u0002",
    "\u07eb\u07ec\u0005\u001c\u000f\u0002\u07ec\u088d\u0003\u0002\u0002\u0002",
    "\u07ed\u07f1\u0005~@\u0002\u07ee\u07f2\u0005\u0086D\u0002\u07ef\u07f2",
    "\u0005\u0084C\u0002\u07f0\u07f2\u0005\u00ecw\u0002\u07f1\u07ee\u0003",
    "\u0002\u0002\u0002\u07f1\u07ef\u0003\u0002\u0002\u0002\u07f1\u07f0\u0003",
    "\u0002\u0002\u0002\u07f2\u07f4\u0003\u0002\u0002\u0002\u07f3\u07f5\u0005",
    "\u0080A\u0002\u07f4\u07f3\u0003\u0002\u0002\u0002\u07f4\u07f5\u0003",
    "\u0002\u0002\u0002\u07f5\u07f6\u0003\u0002\u0002\u0002\u07f6\u07f7\u0005",
    "\u001a\u000e\u0002\u07f7\u088d\u0003\u0002\u0002\u0002\u07f8\u07f9\u0007",
    "\u0091\u0002\u0002\u07f9\u07fa\b<\u0001\u0002\u07fa\u07fc\u0005x=\u0002",
    "\u07fb\u07fd\u0005j6\u0002\u07fc\u07fb\u0003\u0002\u0002\u0002\u07fc",
    "\u07fd\u0003\u0002\u0002\u0002\u07fd\u07fe\u0003\u0002\u0002\u0002\u07fe",
    "\u07ff\u0005\u001c\u000f\u0002\u07ff\u088d\u0003\u0002\u0002\u0002\u0800",
    "\u0801\u0007D\u0002\u0002\u0801\u0802\u00076\u0002\u0002\u0802\u0806",
    "\b<\u0001\u0002\u0803\u0804\u0007o\u0002\u0002\u0804\u0806\b<\u0001",
    "\u0002\u0805\u0800\u0003\u0002\u0002\u0002\u0805\u0803\u0003\u0002\u0002",
    "\u0002\u0806\u083a\u0003\u0002\u0002\u0002\u0807\u0809\u0005x=\u0002",
    "\u0808\u080a\u0005j6\u0002\u0809\u0808\u0003\u0002\u0002\u0002\u0809",
    "\u080a\u0003\u0002\u0002\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b",
    "\u080c\u0005\u001c\u000f\u0002\u080c\u083b\u0003\u0002\u0002\u0002\u080d",
    "\u080f\u0005\u008cG\u0002\u080e\u0810\u0005j6\u0002\u080f\u080e\u0003",
    "\u0002\u0002\u0002\u080f\u0810\u0003\u0002\u0002\u0002\u0810\u0811\u0003",
    "\u0002\u0002\u0002\u0811\u0815\b<\u0001\u0002\u0812\u0814\u0005\u0016",
    "\f\u0002\u0813\u0812\u0003\u0002\u0002\u0002\u0814\u0817\u0003\u0002",
    "\u0002\u0002\u0815\u0813\u0003\u0002\u0002\u0002\u0815\u0816\u0003\u0002",
    "\u0002\u0002\u0816\u0818\u0003\u0002\u0002\u0002\u0817\u0815\u0003\u0002",
    "\u0002\u0002\u0818\u0819\u0005\u001a\u000e\u0002\u0819\u083b\u0003\u0002",
    "\u0002\u0002\u081a\u081c\u0005\u008eH\u0002\u081b\u081d\u0005j6\u0002",
    "\u081c\u081b\u0003\u0002\u0002\u0002\u081c\u081d\u0003\u0002\u0002\u0002",
    "\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u0822\b<\u0001\u0002\u081f",
    "\u0821\u0005\u0016\f\u0002\u0820\u081f\u0003\u0002\u0002\u0002\u0821",
    "\u0824\u0003\u0002\u0002\u0002\u0822\u0820\u0003\u0002\u0002\u0002\u0822",
    "\u0823\u0003\u0002\u0002\u0002\u0823\u0838\u0003\u0002\u0002\u0002\u0824",
    "\u0822\u0003\u0002\u0002\u0002\u0825\u0826\b<\u0001\u0002\u0826\u0827",
    "\u0007W\u0002\u0002\u0827\u0828\u0007\u0004\u0002\u0002\u0828\u082c",
    "\b<\u0001\u0002\u0829\u082b\u0005N(\u0002\u082a\u0829\u0003\u0002\u0002",
    "\u0002\u082b\u082e\u0003\u0002\u0002\u0002\u082c\u082a\u0003\u0002\u0002",
    "\u0002\u082c\u082d\u0003\u0002\u0002\u0002\u082d\u082f\u0003\u0002\u0002",
    "\u0002\u082e\u082c\u0003\u0002\u0002\u0002\u082f\u0830\u0007\u0006\u0002",
    "\u0002\u0830\u0835\b<\u0001\u0002\u0831\u0832\u0005j6\u0002\u0832\u0833",
    "\u0005\u001a\u000e\u0002\u0833\u0836\u0003\u0002\u0002\u0002\u0834\u0836",
    "\u0005\u001c\u000f\u0002\u0835\u0831\u0003\u0002\u0002\u0002\u0835\u0834",
    "\u0003\u0002\u0002\u0002\u0836\u0839\u0003\u0002\u0002\u0002\u0837\u0839",
    "\u0005\u001a\u000e\u0002\u0838\u0825\u0003\u0002\u0002\u0002\u0838\u0837",
    "\u0003\u0002\u0002\u0002\u0839\u083b\u0003\u0002\u0002\u0002\u083a\u0807",
    "\u0003\u0002\u0002\u0002\u083a\u080d\u0003\u0002\u0002\u0002\u083a\u081a",
    "\u0003\u0002\u0002\u0002\u083b\u088d\u0003\u0002\u0002\u0002\u083c\u083e",
    "\u0005\u008cG\u0002\u083d\u083f\u0005P)\u0002\u083e\u083d\u0003\u0002",
    "\u0002\u0002\u083e\u083f\u0003\u0002\u0002\u0002\u083f\u0840\u0003\u0002",
    "\u0002\u0002\u0840\u0844\b<\u0001\u0002\u0841\u0843\u0005\u0016\f\u0002",
    "\u0842\u0841\u0003\u0002\u0002\u0002\u0843\u0846\u0003\u0002\u0002\u0002",
    "\u0844\u0842\u0003\u0002\u0002\u0002\u0844\u0845\u0003\u0002\u0002\u0002",
    "\u0845\u0847\u0003\u0002\u0002\u0002\u0846\u0844\u0003\u0002\u0002\u0002",
    "\u0847\u0848\u0005\u001a\u000e\u0002\u0848\u088d\u0003\u0002\u0002\u0002",
    "\u0849\u084a\u0007n\u0002\u0002\u084a\u084b\b<\u0001\u0002\u084b\u084d",
    "\u0005\u008eH\u0002\u084c\u084e\u0005P)\u0002\u084d\u084c\u0003\u0002",
    "\u0002\u0002\u084d\u084e\u0003\u0002\u0002\u0002\u084e\u084f\u0003\u0002",
    "\u0002\u0002\u084f\u0853\b<\u0001\u0002\u0850\u0852\u0005\u0016\f\u0002",
    "\u0851\u0850\u0003\u0002\u0002\u0002\u0852\u0855\u0003\u0002\u0002\u0002",
    "\u0853\u0851\u0003\u0002\u0002\u0002\u0853\u0854\u0003\u0002\u0002\u0002",
    "\u0854\u0856\u0003\u0002\u0002\u0002\u0855\u0853\u0003\u0002\u0002\u0002",
    "\u0856\u0857\u0005\u001a\u000e\u0002\u0857\u088d\u0003\u0002\u0002\u0002",
    "\u0858\u0859\b<\u0001\u0002\u0859\u088a\u0005\u00ecw\u0002\u085a\u085f",
    "\u0005\u0090I\u0002\u085b\u085c\u0007\u0007\u0002\u0002\u085c\u085d",
    "\b<\u0001\u0002\u085d\u085f\u0005\u00ecw\u0002\u085e\u085a\u0003\u0002",
    "\u0002\u0002\u085e\u085b\u0003\u0002\u0002\u0002\u085e\u085f\u0003\u0002",
    "\u0002\u0002\u085f\u0860\u0003\u0002\u0002\u0002\u0860\u0864\b<\u0001",
    "\u0002\u0861\u0863\u0005\u0016\f\u0002\u0862\u0861\u0003\u0002\u0002",
    "\u0002\u0863\u0866\u0003\u0002\u0002\u0002\u0864\u0862\u0003\u0002\u0002",
    "\u0002\u0864\u0865\u0003\u0002\u0002\u0002\u0865\u087c\u0003\u0002\u0002",
    "\u0002\u0866\u0864\u0003\u0002\u0002\u0002\u0867\u0868\u0007W\u0002",
    "\u0002\u0868\u0869\u0007\u0004\u0002\u0002\u0869\u086d\b<\u0001\u0002",
    "\u086a\u086c\u0005N(\u0002\u086b\u086a\u0003\u0002\u0002\u0002\u086c",
    "\u086f\u0003\u0002\u0002\u0002\u086d\u086b\u0003\u0002\u0002\u0002\u086d",
    "\u086e\u0003\u0002\u0002\u0002\u086e\u0870\u0003\u0002\u0002\u0002\u086f",
    "\u086d\u0003\u0002\u0002\u0002\u0870\u0871\u0007\u0006\u0002\u0002\u0871",
    "\u0876\b<\u0001\u0002\u0872\u0877\u0005\u001c\u000f\u0002\u0873\u0874",
    "\u0005P)\u0002\u0874\u0875\u0005\u001a\u000e\u0002\u0875\u0877\u0003",
    "\u0002\u0002\u0002\u0876\u0872\u0003\u0002\u0002\u0002\u0876\u0873\u0003",
    "\u0002\u0002\u0002\u0877\u087d\u0003\u0002\u0002\u0002\u0878\u087a\u0005",
    "P)\u0002\u0879\u0878\u0003\u0002\u0002\u0002\u0879\u087a\u0003\u0002",
    "\u0002\u0002\u087a\u087b\u0003\u0002\u0002\u0002\u087b\u087d\u0005\u001a",
    "\u000e\u0002\u087c\u0867\u0003\u0002\u0002\u0002\u087c\u0879\u0003\u0002",
    "\u0002\u0002\u087d\u088b\u0003\u0002\u0002\u0002\u087e\u0884\b<\u0001",
    "\u0002\u087f\u0880\u0007\u0005\u0002\u0002\u0880\u0881\b<\u0001\u0002",
    "\u0881\u0883\u0005p9\u0002\u0882\u087f\u0003\u0002\u0002\u0002\u0883",
    "\u0886\u0003\u0002\u0002\u0002\u0884\u0882\u0003\u0002\u0002\u0002\u0884",
    "\u0885\u0003\u0002\u0002\u0002\u0885\u0887\u0003\u0002\u0002\u0002\u0886",
    "\u0884\u0003\u0002\u0002\u0002\u0887\u0888\u0005x=\u0002\u0888\u0889",
    "\u0005\u001c\u000f\u0002\u0889\u088b\u0003\u0002\u0002\u0002\u088a\u085e",
    "\u0003\u0002\u0002\u0002\u088a\u087e\u0003\u0002\u0002\u0002\u088b\u088d",
    "\u0003\u0002\u0002\u0002\u088c\u07ea\u0003\u0002\u0002\u0002\u088c\u07ed",
    "\u0003\u0002\u0002\u0002\u088c\u07f8\u0003\u0002\u0002\u0002\u088c\u0805",
    "\u0003\u0002\u0002\u0002\u088c\u083c\u0003\u0002\u0002\u0002\u088c\u0849",
    "\u0003\u0002\u0002\u0002\u088c\u0858\u0003\u0002\u0002\u0002\u088d\u088f",
    "\u0003\u0002\u0002\u0002\u088e\u07e5\u0003\u0002\u0002\u0002\u088e\u07e8",
    "\u0003\u0002\u0002\u0002\u088fw\u0003\u0002\u0002\u0002\u0890\u0891",
    "\u0007\u0004\u0002\u0002\u0891\u0895\b=\u0001\u0002\u0892\u0894\u0005",
    "T+\u0002\u0893\u0892\u0003\u0002\u0002\u0002\u0894\u0897\u0003\u0002",
    "\u0002\u0002\u0895\u0893\u0003\u0002\u0002\u0002\u0895\u0896\u0003\u0002",
    "\u0002\u0002\u0896\u0898\u0003\u0002\u0002\u0002\u0897\u0895\u0003\u0002",
    "\u0002\u0002\u0898\u0899\u0007\u0006\u0002\u0002\u0899\u089a\b=\u0001",
    "\u0002\u089ay\u0003\u0002\u0002\u0002\u089b\u089c\u0007\u0098\u0002",
    "\u0002\u089c\u08a0\b>\u0001\u0002\u089d\u089f\u0005T+\u0002\u089e\u089d",
    "\u0003\u0002\u0002\u0002\u089f\u08a2\u0003\u0002\u0002\u0002\u08a0\u089e",
    "\u0003\u0002\u0002\u0002\u08a0\u08a1\u0003\u0002\u0002\u0002\u08a1\u08a3",
    "\u0003\u0002\u0002\u0002\u08a2\u08a0\u0003\u0002\u0002\u0002\u08a3\u08a4",
    "\u0007\u0006\u0002\u0002\u08a4\u08a5\b>\u0001\u0002\u08a5{\u0003\u0002",
    "\u0002\u0002\u08a6\u08a7\u0007D\u0002\u0002\u08a7\u08a8\u00076\u0002",
    "\u0002\u08a8\u08ac\b?\u0001\u0002\u08a9\u08aa\u0007o\u0002\u0002\u08aa",
    "\u08ac\b?\u0001\u0002\u08ab\u08a6\u0003\u0002\u0002\u0002\u08ab\u08a9",
    "\u0003\u0002\u0002\u0002\u08ac\u08c6\u0003\u0002\u0002\u0002\u08ad\u08af",
    "\u0005x=\u0002\u08ae\u08b0\u0005j6\u0002\u08af\u08ae\u0003\u0002\u0002",
    "\u0002\u08af\u08b0\u0003\u0002\u0002\u0002\u08b0\u08c7\u0003\u0002\u0002",
    "\u0002\u08b1\u08b3\u0005\u008cG\u0002\u08b2\u08b4\u0005j6\u0002\u08b3",
    "\u08b2\u0003\u0002\u0002\u0002\u08b3\u08b4\u0003\u0002\u0002\u0002\u08b4",
    "\u08c7\u0003\u0002\u0002\u0002\u08b5\u08b7\u0005\u008eH\u0002\u08b6",
    "\u08b8\u0005j6\u0002\u08b7\u08b6\u0003\u0002\u0002\u0002\u08b7\u08b8",
    "\u0003\u0002\u0002\u0002\u08b8\u08c4\u0003\u0002\u0002\u0002\u08b9\u08ba",
    "\u0007W\u0002\u0002\u08ba\u08bb\u0007\u0004\u0002\u0002\u08bb\u08bf",
    "\b?\u0001\u0002\u08bc\u08be\u0005N(\u0002\u08bd\u08bc\u0003\u0002\u0002",
    "\u0002\u08be\u08c1\u0003\u0002\u0002\u0002\u08bf\u08bd\u0003\u0002\u0002",
    "\u0002\u08bf\u08c0\u0003\u0002\u0002\u0002\u08c0\u08c2\u0003\u0002\u0002",
    "\u0002\u08c1\u08bf\u0003\u0002\u0002\u0002\u08c2\u08c3\u0007\u0006\u0002",
    "\u0002\u08c3\u08c5\b?\u0001\u0002\u08c4\u08b9\u0003\u0002\u0002\u0002",
    "\u08c4\u08c5\u0003\u0002\u0002\u0002\u08c5\u08c7\u0003\u0002\u0002\u0002",
    "\u08c6\u08ad\u0003\u0002\u0002\u0002\u08c6\u08b1\u0003\u0002\u0002\u0002",
    "\u08c6\u08b5\u0003\u0002\u0002\u0002\u08c7}\u0003\u0002\u0002\u0002",
    "\u08c8\u08ca\u0007G\u0002\u0002\u08c9\u08cb\u0005\u0088E\u0002\u08ca",
    "\u08c9\u0003\u0002\u0002\u0002\u08ca\u08cb\u0003\u0002\u0002\u0002\u08cb",
    "\u08cc\u0003\u0002\u0002\u0002\u08cc\u08cd\u0007\u0085\u0002\u0002\u08cd",
    "\u08d5\b@\u0001\u0002\u08ce\u08d0\u0007J\u0002\u0002\u08cf\u08d1\u0005",
    "\u0088E\u0002\u08d0\u08cf\u0003\u0002\u0002\u0002\u08d0\u08d1\u0003",
    "\u0002\u0002\u0002\u08d1\u08d2\u0003\u0002\u0002\u0002\u08d2\u08d3\u0007",
    "6\u0002\u0002\u08d3\u08d5\b@\u0001\u0002\u08d4\u08c8\u0003\u0002\u0002",
    "\u0002\u08d4\u08ce\u0003\u0002\u0002\u0002\u08d5\u08d6\u0003\u0002\u0002",
    "\u0002\u08d6\u08d7\b@\u0001\u0002\u08d7\u007f\u0003\u0002\u0002\u0002",
    "\u08d8\u08d9\u0007\u0004\u0002\u0002\u08d9\u08e3\bA\u0001\u0002\u08da",
    "\u08e0\u0005\u008aF\u0002\u08db\u08dc\u0007\u0005\u0002\u0002\u08dc",
    "\u08dd\bA\u0001\u0002\u08dd\u08df\u0005\u008aF\u0002\u08de\u08db\u0003",
    "\u0002\u0002\u0002\u08df\u08e2\u0003\u0002\u0002\u0002\u08e0\u08de\u0003",
    "\u0002\u0002\u0002\u08e0\u08e1\u0003\u0002\u0002\u0002\u08e1\u08e4\u0003",
    "\u0002\u0002\u0002\u08e2\u08e0\u0003\u0002\u0002\u0002\u08e3\u08da\u0003",
    "\u0002\u0002\u0002\u08e3\u08e4\u0003\u0002\u0002\u0002\u08e4\u08e5\u0003",
    "\u0002\u0002\u0002\u08e5\u08e6\u0007\u0006\u0002\u0002\u08e6\u08ec\b",
    "A\u0001\u0002\u08e7\u08e8\u00077\u0002\u0002\u08e8\u08e9\u0005\u00be",
    "`\u0002\u08e9\u08ea\bA\u0001\u0002\u08ea\u08ec\u0003\u0002\u0002\u0002",
    "\u08eb\u08d8\u0003\u0002\u0002\u0002\u08eb\u08e7\u0003\u0002\u0002\u0002",
    "\u08ec\u0081\u0003\u0002\u0002\u0002\u08ed\u08ee\u0007\u0004\u0002\u0002",
    "\u08ee\u08f8\bB\u0001\u0002\u08ef\u08f5\u0005\u008aF\u0002\u08f0\u08f1",
    "\u0007\u0005\u0002\u0002\u08f1\u08f2\bB\u0001\u0002\u08f2\u08f4\u0005",
    "\u008aF\u0002\u08f3\u08f0\u0003\u0002\u0002\u0002\u08f4\u08f7\u0003",
    "\u0002\u0002\u0002\u08f5\u08f3\u0003\u0002\u0002\u0002\u08f5\u08f6\u0003",
    "\u0002\u0002\u0002\u08f6\u08f9\u0003\u0002\u0002\u0002\u08f7\u08f5\u0003",
    "\u0002\u0002\u0002\u08f8\u08ef\u0003\u0002\u0002\u0002\u08f8\u08f9\u0003",
    "\u0002\u0002\u0002\u08f9\u08fa\u0003\u0002\u0002\u0002\u08fa\u08fb\u0007",
    "\u0006\u0002\u0002\u08fb\u08fd\bB\u0001\u0002\u08fc\u08fe\u0005j6\u0002",
    "\u08fd\u08fc\u0003\u0002\u0002\u0002\u08fd\u08fe\u0003\u0002\u0002\u0002",
    "\u08fe\u0905\u0003\u0002\u0002\u0002\u08ff\u0900\u00077\u0002\u0002",
    "\u0900\u0901\u0005\u00be`\u0002\u0901\u0902\bB\u0001\u0002\u0902\u0905",
    "\u0003\u0002\u0002\u0002\u0903\u0905\u0005j6\u0002\u0904\u08ed\u0003",
    "\u0002\u0002\u0002\u0904\u08ff\u0003\u0002\u0002\u0002\u0904\u0903\u0003",
    "\u0002\u0002\u0002\u0904\u0905\u0003\u0002\u0002\u0002\u0905\u0906\u0003",
    "\u0002\u0002\u0002\u0906\u090a\bB\u0001\u0002\u0907\u0909\u0005\u0016",
    "\f\u0002\u0908\u0907\u0003\u0002\u0002\u0002\u0909\u090c\u0003\u0002",
    "\u0002\u0002\u090a\u0908\u0003\u0002\u0002\u0002\u090a\u090b\u0003\u0002",
    "\u0002\u0002\u090b\u090d\u0003\u0002\u0002\u0002\u090c\u090a\u0003\u0002",
    "\u0002\u0002\u090d\u090e\u0005\u001a\u000e\u0002\u090e\u0083\u0003\u0002",
    "\u0002\u0002\u090f\u0910\u0007v\u0002\u0002\u0910\u0911\bC\u0001\u0002",
    "\u0911\u0912\u0005\u00ecw\u0002\u0912\u0085\u0003\u0002\u0002\u0002",
    "\u0913\u0914\u0007o\u0002\u0002\u0914\u0915\bD\u0001\u0002\u0915\u0916",
    "\u0005\u00ecw\u0002\u0916\u0087\u0003\u0002\u0002\u0002\u0917\u0918",
    "\u0007\u000f\u0002\u0002\u0918\u092c\bE\u0001\u0002\u0919\u091a\u0007",
    "=\u0002\u0002\u091a\u091b\u0007\u0005\u0002\u0002\u091b\u0920\bE\u0001",
    "\u0002\u091c\u091d\u0007\u000e\u0002\u0002\u091d\u091e\u0007\u0005\u0002",
    "\u0002\u091e\u0920\bE\u0001\u0002\u091f\u0919\u0003\u0002\u0002\u0002",
    "\u091f\u091c\u0003\u0002\u0002\u0002\u091f\u0920\u0003\u0002\u0002\u0002",
    "\u0920\u0924\u0003\u0002\u0002\u0002\u0921\u0922\u0007=\u0002\u0002",
    "\u0922\u0923\u0007\u0010\u0002\u0002\u0923\u0925\bE\u0001\u0002\u0924",
    "\u0921\u0003\u0002\u0002\u0002\u0924\u0925\u0003\u0002\u0002\u0002\u0925",
    "\u092a\u0003\u0002\u0002\u0002\u0926\u0927\u0007=\u0002\u0002\u0927",
    "\u092b\bE\u0001\u0002\u0928\u0929\u0007\u000e\u0002\u0002\u0929\u092b",
    "\bE\u0001\u0002\u092a\u0926\u0003\u0002\u0002\u0002\u092a\u0928\u0003",
    "\u0002\u0002\u0002\u092b\u092d\u0003\u0002\u0002\u0002\u092c\u091f\u0003",
    "\u0002\u0002\u0002\u092c\u092d\u0003\u0002\u0002\u0002\u092d\u092e\u0003",
    "\u0002\u0002\u0002\u092e\u092f\u0007\u0011\u0002\u0002\u092f\u0089\u0003",
    "\u0002\u0002\u0002\u0930\u0931\u0005\u00ecw\u0002\u0931\u0934\bF\u0001",
    "\u0002\u0932\u0933\u0007*\u0002\u0002\u0933\u0935\u0005\u00f4{\u0002",
    "\u0934\u0932\u0003\u0002\u0002\u0002\u0934\u0935\u0003\u0002\u0002\u0002",
    "\u0935\u0936\u0003\u0002\u0002\u0002\u0936\u0937\bF\u0001\u0002\u0937",
    "\u008b\u0003\u0002\u0002\u0002\u0938\u0939\u0007\u0086\u0002\u0002\u0939",
    "\u093a\u00076\u0002\u0002\u093a\u093b\bG\u0001\u0002\u093b\u093f\u0005",
    "\u00ecw\u0002\u093c\u093d\u0007\u0007\u0002\u0002\u093d\u093e\bG\u0001",
    "\u0002\u093e\u0940\u0005\u00ecw\u0002\u093f\u093c\u0003\u0002\u0002",
    "\u0002\u093f\u0940\u0003\u0002\u0002\u0002\u0940\u008d\u0003\u0002\u0002",
    "\u0002\u0941\u0946\u0005\u00ecw\u0002\u0942\u0947\u0005\u0090I\u0002",
    "\u0943\u0944\u0007\u0007\u0002\u0002\u0944\u0945\bH\u0001\u0002\u0945",
    "\u0947\u0005\u00ecw\u0002\u0946\u0942\u0003\u0002\u0002\u0002\u0946",
    "\u0943\u0003\u0002\u0002\u0002\u0946\u0947\u0003\u0002\u0002\u0002\u0947",
    "\u008f\u0003\u0002\u0002\u0002\u0948\u0949\u0007\b\u0002\u0002\u0949",
    "\u0964\bI\u0001\u0002\u094a\u094b\u0007=\u0002\u0002\u094b\u0958\bI",
    "\u0001\u0002\u094c\u094d\u0007\u0005\u0002\u0002\u094d\u0954\bI\u0001",
    "\u0002\u094e\u094f\u0007\u008b\u0002\u0002\u094f\u0955\bI\u0001\u0002",
    "\u0950\u0951\u0007_\u0002\u0002\u0951\u0955\bI\u0001\u0002\u0952\u0953",
    "\u0007=\u0002\u0002\u0953\u0955\bI\u0001\u0002\u0954\u094e\u0003\u0002",
    "\u0002\u0002\u0954\u0950\u0003\u0002\u0002\u0002\u0954\u0952\u0003\u0002",
    "\u0002\u0002\u0955\u0957\u0003\u0002\u0002\u0002\u0956\u094c\u0003\u0002",
    "\u0002\u0002\u0957\u095a\u0003\u0002\u0002\u0002\u0958\u0956\u0003\u0002",
    "\u0002\u0002\u0958\u0959\u0003\u0002\u0002\u0002\u0959\u0965\u0003\u0002",
    "\u0002\u0002\u095a\u0958\u0003\u0002\u0002\u0002\u095b\u0961\u0005\u0094",
    "K\u0002\u095c\u095d\u0007\u0005\u0002\u0002\u095d\u095e\bI\u0001\u0002",
    "\u095e\u0960\u0005\u0094K\u0002\u095f\u095c\u0003\u0002\u0002\u0002",
    "\u0960\u0963\u0003\u0002\u0002\u0002\u0961\u095f\u0003\u0002\u0002\u0002",
    "\u0961\u0962\u0003\u0002\u0002\u0002\u0962\u0965\u0003\u0002\u0002\u0002",
    "\u0963\u0961\u0003\u0002\u0002\u0002\u0964\u094a\u0003\u0002\u0002\u0002",
    "\u0964\u095b\u0003\u0002\u0002\u0002\u0965\u0966\u0003\u0002\u0002\u0002",
    "\u0966\u0967\u0007\t\u0002\u0002\u0967\u0968\bI\u0001\u0002\u0968\u0091",
    "\u0003\u0002\u0002\u0002\u0969\u096a\u0007\b\u0002\u0002\u096a\u0970",
    "\u0005\u0094K\u0002\u096b\u096c\u0007\u0005\u0002\u0002\u096c\u096d",
    "\bJ\u0001\u0002\u096d\u096f\u0005\u0094K\u0002\u096e\u096b\u0003\u0002",
    "\u0002\u0002\u096f\u0972\u0003\u0002\u0002\u0002\u0970\u096e\u0003\u0002",
    "\u0002\u0002\u0970\u0971\u0003\u0002\u0002\u0002\u0971\u0973\u0003\u0002",
    "\u0002\u0002\u0972\u0970\u0003\u0002\u0002\u0002\u0973\u0974\u0007\t",
    "\u0002\u0002\u0974\u0093\u0003\u0002\u0002\u0002\u0975\u0976\u0005\u00f4",
    "{\u0002\u0976\u0977\u0007\u0007\u0002\u0002\u0977\u097e\bK\u0001\u0002",
    "\u0978\u0979\u0007=\u0002\u0002\u0979\u097f\bK\u0001\u0002\u097a\u097b",
    "\u0007\u008b\u0002\u0002\u097b\u097f\bK\u0001\u0002\u097c\u097d\u0007",
    "_\u0002\u0002\u097d\u097f\bK\u0001\u0002\u097e\u0978\u0003\u0002\u0002",
    "\u0002\u097e\u097a\u0003\u0002\u0002\u0002\u097e\u097c\u0003\u0002\u0002",
    "\u0002\u097f\u0095\u0003\u0002\u0002\u0002\u0980\u0981\u0005\u00aeX",
    "\u0002\u0981\u0995\bL\u0001\u0002\u0982\u0984\u0007\u0087\u0002\u0002",
    "\u0983\u0985\t\u0004\u0002\u0002\u0984\u0983\u0003\u0002\u0002\u0002",
    "\u0984\u0985\u0003\u0002\u0002\u0002\u0985\u098f\u0003\u0002\u0002\u0002",
    "\u0986\u0988\u0007[\u0002\u0002\u0987\u0989\u0007.\u0002\u0002\u0988",
    "\u0987\u0003\u0002\u0002\u0002\u0988\u0989\u0003\u0002\u0002\u0002\u0989",
    "\u098f\u0003\u0002\u0002\u0002\u098a\u098c\u0007q\u0002\u0002\u098b",
    "\u098d\u0007.\u0002\u0002\u098c\u098b\u0003\u0002\u0002\u0002\u098c",
    "\u098d\u0003\u0002\u0002\u0002\u098d\u098f\u0003\u0002\u0002\u0002\u098e",
    "\u0982\u0003\u0002\u0002\u0002\u098e\u0986\u0003\u0002\u0002\u0002\u098e",
    "\u098a\u0003\u0002\u0002\u0002\u098f\u0990\u0003\u0002\u0002\u0002\u0990",
    "\u0991\u0005\u00aeX\u0002\u0991\u0992\bL\u0001\u0002\u0992\u0994\u0003",
    "\u0002\u0002\u0002\u0993\u098e\u0003\u0002\u0002\u0002\u0994\u0997\u0003",
    "\u0002\u0002\u0002\u0995\u0993\u0003\u0002\u0002\u0002\u0995\u0996\u0003",
    "\u0002\u0002\u0002\u0996\u099b\u0003\u0002\u0002\u0002\u0997\u0995\u0003",
    "\u0002\u0002\u0002\u0998\u0999\u0005\u0098M\u0002\u0999\u099a\bL\u0001",
    "\u0002\u099a\u099c\u0003\u0002\u0002\u0002\u099b\u0998\u0003\u0002\u0002",
    "\u0002\u099b\u099c\u0003\u0002\u0002\u0002\u099c\u09a0\u0003\u0002\u0002",
    "\u0002\u099d\u099e\u0005\u00aaV\u0002\u099e\u099f\bL\u0001\u0002\u099f",
    "\u09a1\u0003\u0002\u0002\u0002\u09a0\u099d\u0003\u0002\u0002\u0002\u09a0",
    "\u09a1\u0003\u0002\u0002\u0002\u09a1\u0097\u0003\u0002\u0002\u0002\u09a2",
    "\u09a3\u0007x\u0002\u0002\u09a3\u09a4\u0007+\u0002\u0002\u09a4\u09a5",
    "\bM\u0001\u0002\u09a5\u09a6\u0005\u00acW\u0002\u09a6\u09ad\bM\u0001",
    "\u0002\u09a7\u09a8\u0007\u0005\u0002\u0002\u09a8\u09a9\u0005\u00acW",
    "\u0002\u09a9\u09aa\bM\u0001\u0002\u09aa\u09ac\u0003\u0002\u0002\u0002",
    "\u09ab\u09a7\u0003\u0002\u0002\u0002\u09ac\u09af\u0003\u0002\u0002\u0002",
    "\u09ad\u09ab\u0003\u0002\u0002\u0002\u09ad\u09ae\u0003\u0002\u0002\u0002",
    "\u09ae\u0099\u0003\u0002\u0002\u0002\u09af\u09ad\u0003\u0002\u0002\u0002",
    "\u09b0\u09b1\u0007x\u0002\u0002\u09b1\u09b2\u0007+\u0002\u0002\u09b2",
    "\u09b3\bN\u0001\u0002\u09b3\u09b4\u0005\u00acW\u0002\u09b4\u09bb\bN",
    "\u0001\u0002\u09b5\u09b6\u0007\u0005\u0002\u0002\u09b6\u09b7\u0005\u00ac",
    "W\u0002\u09b7\u09b8\bN\u0001\u0002\u09b8\u09ba\u0003\u0002\u0002\u0002",
    "\u09b9\u09b5\u0003\u0002\u0002\u0002\u09ba\u09bd\u0003\u0002\u0002\u0002",
    "\u09bb\u09b9\u0003\u0002\u0002\u0002\u09bb\u09bc\u0003\u0002\u0002\u0002",
    "\u09bc\u009b\u0003\u0002\u0002\u0002\u09bd\u09bb\u0003\u0002\u0002\u0002",
    "\u09be\u09bf\u0007x\u0002\u0002\u09bf\u09c0\u0007+\u0002\u0002\u09c0",
    "\u09c1\bO\u0001\u0002\u09c1\u09c2\u0005\u00acW\u0002\u09c2\u09c9\bO",
    "\u0001\u0002\u09c3\u09c4\u0007\u0005\u0002\u0002\u09c4\u09c5\u0005\u00ac",
    "W\u0002\u09c5\u09c6\bO\u0001\u0002\u09c6\u09c8\u0003\u0002\u0002\u0002",
    "\u09c7\u09c3\u0003\u0002\u0002\u0002\u09c8\u09cb\u0003\u0002\u0002\u0002",
    "\u09c9\u09c7\u0003\u0002\u0002\u0002\u09c9\u09ca\u0003\u0002\u0002\u0002",
    "\u09ca\u009d\u0003\u0002\u0002\u0002\u09cb\u09c9\u0003\u0002\u0002\u0002",
    "\u09cc\u09cd\u0007{\u0002\u0002\u09cd\u09ce\u0007+\u0002\u0002\u09ce",
    "\u09cf\bP\u0001\u0002\u09cf\u09d0\u0005\u00c6d\u0002\u09d0\u09d7\bP",
    "\u0001\u0002\u09d1\u09d2\u0007\u0005\u0002\u0002\u09d2\u09d3\u0005\u00c6",
    "d\u0002\u09d3\u09d4\bP\u0001\u0002\u09d4\u09d6\u0003\u0002\u0002\u0002",
    "\u09d5\u09d1\u0003\u0002\u0002\u0002\u09d6\u09d9\u0003\u0002\u0002\u0002",
    "\u09d7\u09d5\u0003\u0002\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002\u0002",
    "\u09d8\u009f\u0003\u0002\u0002\u0002\u09d9\u09d7\u0003\u0002\u0002\u0002",
    "\u09da\u09db\u0007\u0082\u0002\u0002\u09db\u09dc\bQ\u0001\u0002\u09dc",
    "\u09dd\u0005\u00a2R\u0002\u09dd\u09de\bQ\u0001\u0002\u09de\u00a1\u0003",
    "\u0002\u0002\u0002\u09df\u09e0\bR\u0001\u0002\u09e0\u09ea\u0005\u00a6",
    "T\u0002\u09e1\u09e2\u0007H\u0002\u0002\u09e2\u09e3\bR\u0001\u0002\u09e3",
    "\u09e4\u0005\u00a4S\u0002\u09e4\u09e5\bR\u0001\u0002\u09e5\u09e6\u0007",
    "A\u0002\u0002\u09e6\u09e7\u0005\u00a4S\u0002\u09e7\u09e8\bR\u0001\u0002",
    "\u09e8\u09ea\u0003\u0002\u0002\u0002\u09e9\u09df\u0003\u0002\u0002\u0002",
    "\u09e9\u09e1\u0003\u0002\u0002\u0002\u09ea\u00a3\u0003\u0002\u0002\u0002",
    "\u09eb\u09ec\u0007\u0088\u0002\u0002\u09ec\u09ed\u0007`\u0002\u0002",
    "\u09ed\u09f4\bS\u0001\u0002\u09ee\u09ef\u0007=\u0002\u0002\u09ef\u09f0",
    "\u0007`\u0002\u0002\u09f0\u09f4\bS\u0001\u0002\u09f1\u09f2\bS\u0001",
    "\u0002\u09f2\u09f4\u0005\u00a6T\u0002\u09f3\u09eb\u0003\u0002\u0002",
    "\u0002\u09f3\u09ee\u0003\u0002\u0002\u0002\u09f3\u09f1\u0003\u0002\u0002",
    "\u0002\u09f4\u00a5\u0003\u0002\u0002\u0002\u09f5\u09f6\u0007\u0088\u0002",
    "\u0002\u09f6\u09f7\u0007|\u0002\u0002\u09f7\u09ff\bT\u0001\u0002\u09f8",
    "\u09f9\u0007=\u0002\u0002\u09f9\u09fa\u0007|\u0002\u0002\u09fa\u09ff",
    "\bT\u0001\u0002\u09fb\u09fc\u0007M\u0002\u0002\u09fc\u09fd\u0007\u0081",
    "\u0002\u0002\u09fd\u09ff\bT\u0001\u0002\u09fe\u09f5\u0003\u0002\u0002",
    "\u0002\u09fe\u09f8\u0003\u0002\u0002\u0002\u09fe\u09fb\u0003\u0002\u0002",
    "\u0002\u09ff\u00a7\u0003\u0002\u0002\u0002\u0a00\u0a01\u0007\u0090\u0002",
    "\u0002\u0a01\u0a02\bU\u0001\u0002\u0a02\u0a06\u0007\b\u0002\u0002\u0a03",
    "\u0a04\u0005\u009eP\u0002\u0a04\u0a05\bU\u0001\u0002\u0a05\u0a07\u0003",
    "\u0002\u0002\u0002\u0a06\u0a03\u0003\u0002\u0002\u0002\u0a06\u0a07\u0003",
    "\u0002\u0002\u0002\u0a07\u0a0b\u0003\u0002\u0002\u0002\u0a08\u0a09\u0005",
    "\u009cO\u0002\u0a09\u0a0a\bU\u0001\u0002\u0a0a\u0a0c\u0003\u0002\u0002",
    "\u0002\u0a0b\u0a08\u0003\u0002\u0002\u0002\u0a0b\u0a0c\u0003\u0002\u0002",
    "\u0002\u0a0c\u0a10\u0003\u0002\u0002\u0002\u0a0d\u0a0e\u0005\u00a0Q",
    "\u0002\u0a0e\u0a0f\bU\u0001\u0002\u0a0f\u0a11\u0003\u0002\u0002\u0002",
    "\u0a10\u0a0d\u0003\u0002\u0002\u0002\u0a10\u0a11\u0003\u0002\u0002\u0002",
    "\u0a11\u0a12\u0003\u0002\u0002\u0002\u0a12\u0a13\u0007\t\u0002\u0002",
    "\u0a13\u00a9\u0003\u0002\u0002\u0002\u0a14\u0a15\u0007m\u0002\u0002",
    "\u0a15\u0a1a\bV\u0001\u0002\u0a16\u0a17\u0007=\u0002\u0002\u0a17\u0a1b",
    "\bV\u0001\u0002\u0a18\u0a19\u00075\u0002\u0002\u0a19\u0a1b\bV\u0001",
    "\u0002\u0a1a\u0a16\u0003\u0002\u0002\u0002\u0a1a\u0a18\u0003\u0002\u0002",
    "\u0002\u0a1b\u0a1f\u0003\u0002\u0002\u0002\u0a1c\u0a1d\u0007u\u0002",
    "\u0002\u0a1d\u0a1e\u0007=\u0002\u0002\u0a1e\u0a20\bV\u0001\u0002\u0a1f",
    "\u0a1c\u0003\u0002\u0002\u0002\u0a1f\u0a20\u0003\u0002\u0002\u0002\u0a20",
    "\u00ab\u0003\u0002\u0002\u0002\u0a21\u0a22\u0005\u00c6d\u0002\u0a22",
    "\u0a27\bW\u0001\u0002\u0a23\u0a24\u0007E\u0002\u0002\u0a24\u0a28\bW",
    "\u0001\u0002\u0a25\u0a26\u0007Q\u0002\u0002\u0a26\u0a28\bW\u0001\u0002",
    "\u0a27\u0a23\u0003\u0002\u0002\u0002\u0a27\u0a25\u0003\u0002\u0002\u0002",
    "\u0a27\u0a28\u0003\u0002\u0002\u0002\u0a28\u0a2c\u0003\u0002\u0002\u0002",
    "\u0a29\u0a2a\u0007t\u0002\u0002\u0a2a\u0a2b\t\u0005\u0002\u0002\u0a2b",
    "\u0a2d\bW\u0001\u0002\u0a2c\u0a29\u0003\u0002\u0002\u0002\u0a2c\u0a2d",
    "\u0003\u0002\u0002\u0002\u0a2d\u00ad\u0003\u0002\u0002\u0002\u0a2e\u0a2f",
    "\u0005\u00b0Y\u0002\u0a2f\u0a39\bX\u0001\u0002\u0a30\u0a32\u0007f\u0002",
    "\u0002\u0a31\u0a33\u0007.\u0002\u0002\u0a32\u0a31\u0003\u0002\u0002",
    "\u0002\u0a32\u0a33\u0003\u0002\u0002\u0002\u0a33\u0a34\u0003\u0002\u0002",
    "\u0002\u0a34\u0a35\u0005\u00b0Y\u0002\u0a35\u0a36\bX\u0001\u0002\u0a36",
    "\u0a38\u0003\u0002\u0002\u0002\u0a37\u0a30\u0003\u0002\u0002\u0002\u0a38",
    "\u0a3b\u0003\u0002\u0002\u0002\u0a39\u0a37\u0003\u0002\u0002\u0002\u0a39",
    "\u0a3a\u0003\u0002\u0002\u0002\u0a3a\u00af\u0003\u0002\u0002\u0002\u0a3b",
    "\u0a39\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0007\b\u0002\u0002\u0a3d",
    "\u0a3e\u0005\u0096L\u0002\u0a3e\u0a3f\u0007\t\u0002\u0002\u0a3f\u0a40",
    "\bY\u0001\u0002\u0a40\u0a8c\u0003\u0002\u0002\u0002\u0a41\u0a42\u0007",
    "8\u0002\u0002\u0a42\u0a6e\bY\u0001\u0002\u0a43\u0a44\u00070\u0002\u0002",
    "\u0a44\u0a51\u0005\u00b2Z\u0002\u0a45\u0a46\u0007r\u0002\u0002\u0a46",
    "\u0a47\u0007\u0004\u0002\u0002\u0a47\u0a4b\bY\u0001\u0002\u0a48\u0a4a",
    "\u0005V,\u0002\u0a49\u0a48\u0003\u0002\u0002\u0002\u0a4a\u0a4d\u0003",
    "\u0002\u0002\u0002\u0a4b\u0a49\u0003\u0002\u0002\u0002\u0a4b\u0a4c\u0003",
    "\u0002\u0002\u0002\u0a4c\u0a4e\u0003\u0002\u0002\u0002\u0a4d\u0a4b\u0003",
    "\u0002\u0002\u0002\u0a4e\u0a4f\u0007\u0006\u0002\u0002\u0a4f\u0a50\b",
    "Y\u0001\u0002\u0a50\u0a52\u0007g\u0002\u0002\u0a51\u0a45\u0003\u0002",
    "\u0002\u0002\u0a51\u0a52\u0003\u0002\u0002\u0002\u0a52\u0a55\u0003\u0002",
    "\u0002\u0002\u0a53\u0a54\t\u0004\u0002\u0002\u0a54\u0a56\bY\u0001\u0002",
    "\u0a55\u0a53\u0003\u0002\u0002\u0002\u0a55\u0a56\u0003\u0002\u0002\u0002",
    "\u0a56\u0a58\u0003\u0002\u0002\u0002\u0a57\u0a59\u0005`1\u0002\u0a58",
    "\u0a57\u0003\u0002\u0002\u0002\u0a58\u0a59\u0003\u0002\u0002\u0002\u0a59",
    "\u0a5b\u0003\u0002\u0002\u0002\u0a5a\u0a5c\u0005*\u0016\u0002\u0a5b",
    "\u0a5a\u0003\u0002\u0002\u0002\u0a5b\u0a5c\u0003\u0002\u0002\u0002\u0a5c",
    "\u0a6f\u0003\u0002\u0002\u0002\u0a5d\u0a5e\t\u0004\u0002\u0002\u0a5e",
    "\u0a60\bY\u0001\u0002\u0a5f\u0a5d\u0003\u0002\u0002\u0002\u0a5f\u0a60",
    "\u0003\u0002\u0002\u0002\u0a60\u0a61\u0003\u0002\u0002\u0002\u0a61\u0a62",
    "\bY\u0001\u0002\u0a62\u0a68\u0005\\/\u0002\u0a63\u0a64\u0007\u0005\u0002",
    "\u0002\u0a64\u0a65\bY\u0001\u0002\u0a65\u0a67\u0005\\/\u0002\u0a66\u0a63",
    "\u0003\u0002\u0002\u0002\u0a67\u0a6a\u0003\u0002\u0002\u0002\u0a68\u0a66",
    "\u0003\u0002\u0002\u0002\u0a68\u0a69\u0003\u0002\u0002\u0002\u0a69\u0a6b",
    "\u0003\u0002\u0002\u0002\u0a6a\u0a68\u0003\u0002\u0002\u0002\u0a6b\u0a6c",
    "\u00070\u0002\u0002\u0a6c\u0a6d\u0005\u00b2Z\u0002\u0a6d\u0a6f\u0003",
    "\u0002\u0002\u0002\u0a6e\u0a43\u0003\u0002\u0002\u0002\u0a6e\u0a5f\u0003",
    "\u0002\u0002\u0002\u0a6f\u0a74\u0003\u0002\u0002\u0002\u0a70\u0a71\u0007",
    ";\u0002\u0002\u0a71\u0a72\u0005\u00be`\u0002\u0a72\u0a73\bY\u0001\u0002",
    "\u0a73\u0a75\u0003\u0002\u0002\u0002\u0a74\u0a70\u0003\u0002\u0002\u0002",
    "\u0a74\u0a75\u0003\u0002\u0002\u0002\u0a75\u0a83\u0003\u0002\u0002\u0002",
    "\u0a76\u0a77\u0007c\u0002\u0002\u0a77\u0a78\u0007+\u0002\u0002\u0a78",
    "\u0a79\u0005\u00c6d\u0002\u0a79\u0a80\bY\u0001\u0002\u0a7a\u0a7b\u0007",
    "\u0005\u0002\u0002\u0a7b\u0a7c\u0005\u00c6d\u0002\u0a7c\u0a7d\bY\u0001",
    "\u0002\u0a7d\u0a7f\u0003\u0002\u0002\u0002\u0a7e\u0a7a\u0003\u0002\u0002",
    "\u0002\u0a7f\u0a82\u0003\u0002\u0002\u0002\u0a80\u0a7e\u0003\u0002\u0002",
    "\u0002\u0a80\u0a81\u0003\u0002\u0002\u0002\u0a81\u0a84\u0003\u0002\u0002",
    "\u0002\u0a82\u0a80\u0003\u0002\u0002\u0002\u0a83\u0a76\u0003\u0002\u0002",
    "\u0002\u0a83\u0a84\u0003\u0002\u0002\u0002\u0a84\u0a89\u0003\u0002\u0002",
    "\u0002\u0a85\u0a86\u0007d\u0002\u0002\u0a86\u0a87\u0005\u00be`\u0002",
    "\u0a87\u0a88\bY\u0001\u0002\u0a88\u0a8a\u0003\u0002\u0002\u0002\u0a89",
    "\u0a85\u0003\u0002\u0002\u0002\u0a89\u0a8a\u0003\u0002\u0002\u0002\u0a8a",
    "\u0a8c\u0003\u0002\u0002\u0002\u0a8b\u0a3c\u0003\u0002\u0002\u0002\u0a8b",
    "\u0a41\u0003\u0002\u0002\u0002\u0a8c\u00b1\u0003\u0002\u0002\u0002\u0a8d",
    "\u0a8e\u0005\u00b4[\u0002\u0a8e\u0a98\bZ\u0001\u0002\u0a8f\u0a94\bZ",
    "\u0001\u0002\u0a90\u0a91\u0007\u0005\u0002\u0002\u0a91\u0a92\u0005\u00b4",
    "[\u0002\u0a92\u0a93\bZ\u0001\u0002\u0a93\u0a95\u0003\u0002\u0002\u0002",
    "\u0a94\u0a90\u0003\u0002\u0002\u0002\u0a95\u0a96\u0003\u0002\u0002\u0002",
    "\u0a96\u0a94\u0003\u0002\u0002\u0002\u0a96\u0a97\u0003\u0002\u0002\u0002",
    "\u0a97\u0a99\u0003\u0002\u0002\u0002\u0a98\u0a8f\u0003\u0002\u0002\u0002",
    "\u0a98\u0a99\u0003\u0002\u0002\u0002\u0a99\u00b3\u0003\u0002\u0002\u0002",
    "\u0a9a\u0a9b\u0005\u00ba^\u0002\u0a9b\u0aab\b[\u0001\u0002\u0a9c\u0a9d",
    "\u0005\u00b6\\\u0002\u0a9d\u0a9e\b[\u0001\u0002\u0a9e\u0a9f\u0005\u00b4",
    "[\u0002\u0a9f\u0aa0\b[\u0001\u0002\u0aa0\u0aa1\u00077\u0002\u0002\u0aa1",
    "\u0aa2\u0005\u00be`\u0002\u0aa2\u0aa3\b[\u0001\u0002\u0aa3\u0aaa\u0003",
    "\u0002\u0002\u0002\u0aa4\u0aa5\u0007L\u0002\u0002\u0aa5\u0aa6\u0007",
    "i\u0002\u0002\u0aa6\u0aa7\u0005\u00ba^\u0002\u0aa7\u0aa8\b[\u0001\u0002",
    "\u0aa8\u0aaa\u0003\u0002\u0002\u0002\u0aa9\u0a9c\u0003\u0002\u0002\u0002",
    "\u0aa9\u0aa4\u0003\u0002\u0002\u0002\u0aaa\u0aad\u0003\u0002\u0002\u0002",
    "\u0aab\u0aa9\u0003\u0002\u0002\u0002\u0aab\u0aac\u0003\u0002\u0002\u0002",
    "\u0aac\u00b5\u0003\u0002\u0002\u0002\u0aad\u0aab\u0003\u0002\u0002\u0002",
    "\u0aae\u0aaf\u0007i\u0002\u0002\u0aaf\u0ad2\b\\\u0001\u0002\u0ab0\u0ab2",
    "\u0007e\u0002\u0002\u0ab1\u0ab3\u0005\u00b8]\u0002\u0ab2\u0ab1\u0003",
    "\u0002\u0002\u0002\u0ab2\u0ab3\u0003\u0002\u0002\u0002\u0ab3\u0ab4\u0003",
    "\u0002\u0002\u0002\u0ab4\u0ab5\u0007i\u0002\u0002\u0ab5\u0ad2\b\\\u0001",
    "\u0002\u0ab6\u0ab8\u0007k\u0002\u0002\u0ab7\u0ab9\u0007y\u0002\u0002",
    "\u0ab8\u0ab7\u0003\u0002\u0002\u0002\u0ab8\u0ab9\u0003\u0002\u0002\u0002",
    "\u0ab9\u0abb\u0003\u0002\u0002\u0002\u0aba\u0abc\u0005\u00b8]\u0002",
    "\u0abb\u0aba\u0003\u0002\u0002\u0002\u0abb\u0abc\u0003\u0002\u0002\u0002",
    "\u0abc\u0abd\u0003\u0002\u0002\u0002\u0abd\u0abe\u0007i\u0002\u0002",
    "\u0abe\u0ad2\b\\\u0001\u0002\u0abf\u0ac1\u0007\u0080\u0002\u0002\u0ac0",
    "\u0ac2\u0007y\u0002\u0002\u0ac1\u0ac0\u0003\u0002\u0002\u0002\u0ac1",
    "\u0ac2\u0003\u0002\u0002\u0002\u0ac2\u0ac4\u0003\u0002\u0002\u0002\u0ac3",
    "\u0ac5\u0005\u00b8]\u0002\u0ac4\u0ac3\u0003\u0002\u0002\u0002\u0ac4",
    "\u0ac5\u0003\u0002\u0002\u0002\u0ac5\u0ac6\u0003\u0002\u0002\u0002\u0ac6",
    "\u0ac7\u0007i\u0002\u0002\u0ac7\u0ad2\b\\\u0001\u0002\u0ac8\u0aca\u0007",
    "a\u0002\u0002\u0ac9\u0acb\u0007y\u0002\u0002\u0aca\u0ac9\u0003\u0002",
    "\u0002\u0002\u0aca\u0acb\u0003\u0002\u0002\u0002\u0acb\u0acd\u0003\u0002",
    "\u0002\u0002\u0acc\u0ace\u0005\u00b8]\u0002\u0acd\u0acc\u0003\u0002",
    "\u0002\u0002\u0acd\u0ace\u0003\u0002\u0002\u0002\u0ace\u0acf\u0003\u0002",
    "\u0002\u0002\u0acf\u0ad0\u0007i\u0002\u0002\u0ad0\u0ad2\b\\\u0001\u0002",
    "\u0ad1\u0aae\u0003\u0002\u0002\u0002\u0ad1\u0ab0\u0003\u0002\u0002\u0002",
    "\u0ad1\u0ab6\u0003\u0002\u0002\u0002\u0ad1\u0abf\u0003\u0002\u0002\u0002",
    "\u0ad1\u0ac8\u0003\u0002\u0002\u0002\u0ad2\u0ad3\u0003\u0002\u0002\u0002",
    "\u0ad3\u0ad4\b\\\u0001\u0002\u0ad4\u00b7\u0003\u0002\u0002\u0002\u0ad5",
    "\u0ad7\u0007Z\u0002\u0002\u0ad6\u0ad5\u0003\u0002\u0002\u0002\u0ad6",
    "\u0ad7\u0003\u0002\u0002\u0002\u0ad7\u0ad8\u0003\u0002\u0002\u0002\u0ad8",
    "\u0ad9\u0007v\u0002\u0002\u0ad9\u0add\b]\u0001\u0002\u0ada\u0adb\u0007",
    "o\u0002\u0002\u0adb\u0add\b]\u0001\u0002\u0adc\u0ad6\u0003\u0002\u0002",
    "\u0002\u0adc\u0ada\u0003\u0002\u0002\u0002\u0add\u0ade\u0003\u0002\u0002",
    "\u0002\u0ade\u0ae6\u0007\u0085\u0002\u0002\u0adf\u0ae1\u0007Z\u0002",
    "\u0002\u0ae0\u0adf\u0003\u0002\u0002\u0002\u0ae0\u0ae1\u0003\u0002\u0002",
    "\u0002\u0ae1\u0ae2\u0003\u0002\u0002\u0002\u0ae2\u0ae3\u0007v\u0002",
    "\u0002\u0ae3\u0ae7\b]\u0001\u0002\u0ae4\u0ae5\u0007o\u0002\u0002\u0ae5",
    "\u0ae7\b]\u0001\u0002\u0ae6\u0ae0\u0003\u0002\u0002\u0002\u0ae6\u0ae4",
    "\u0003\u0002\u0002\u0002\u0ae7\u00b9\u0003\u0002\u0002\u0002\u0ae8\u0ae9",
    "\b^\u0001\u0002\u0ae9\u0aed\u0005\u00bc_\u0002\u0aea\u0aeb\u0007\u0007",
    "\u0002\u0002\u0aeb\u0aec\b^\u0001\u0002\u0aec\u0aee\u0005\u00bc_\u0002",
    "\u0aed\u0aea\u0003\u0002\u0002\u0002\u0aed\u0aee\u0003\u0002\u0002\u0002",
    "\u0aee\u0af6\u0003\u0002\u0002\u0002\u0aef\u0af0\u0007*\u0002\u0002",
    "\u0af0\u0af1\u0005\u00f4{\u0002\u0af1\u0af2\b^\u0001\u0002\u0af2\u0af7",
    "\u0003\u0002\u0002\u0002\u0af3\u0af4\u0005\u00f2z\u0002\u0af4\u0af5",
    "\b^\u0001\u0002\u0af5\u0af7\u0003\u0002\u0002\u0002\u0af6\u0aef\u0003",
    "\u0002\u0002\u0002\u0af6\u0af3\u0003\u0002\u0002\u0002\u0af6\u0af7\u0003",
    "\u0002\u0002\u0002\u0af7\u0af8\u0003\u0002\u0002\u0002\u0af8\u0af9\b",
    "^\u0001\u0002\u0af9\u0b0e\u0003\u0002\u0002\u0002\u0afa\u0b0b\u0007",
    "\b\u0002\u0002\u0afb\u0afc\u0005\u0096L\u0002\u0afc\u0afd\u0007\t\u0002",
    "\u0002\u0afd\u0b05\b^\u0001\u0002\u0afe\u0aff\u0007*\u0002\u0002\u0aff",
    "\u0b00\u0005\u00f4{\u0002\u0b00\u0b01\b^\u0001\u0002\u0b01\u0b06\u0003",
    "\u0002\u0002\u0002\u0b02\u0b03\u0005\u00f2z\u0002\u0b03\u0b04\b^\u0001",
    "\u0002\u0b04\u0b06\u0003\u0002\u0002\u0002\u0b05\u0afe\u0003\u0002\u0002",
    "\u0002\u0b05\u0b02\u0003\u0002\u0002\u0002\u0b06\u0b0c\u0003\u0002\u0002",
    "\u0002\u0b07\u0b08\u0005\u00b4[\u0002\u0b08\u0b09\u0007\t\u0002\u0002",
    "\u0b09\u0b0a\b^\u0001\u0002\u0b0a\u0b0c\u0003\u0002\u0002\u0002\u0b0b",
    "\u0afb\u0003\u0002\u0002\u0002\u0b0b\u0b07\u0003\u0002\u0002\u0002\u0b0c",
    "\u0b0e\u0003\u0002\u0002\u0002\u0b0d\u0ae8\u0003\u0002\u0002\u0002\u0b0d",
    "\u0afa\u0003\u0002\u0002\u0002\u0b0e\u00bb\u0003\u0002\u0002\u0002\u0b0f",
    "\u0b10\u0005\u00f4{\u0002\u0b10\u0b16\b_\u0001\u0002\u0b11\u0b13\u0005",
    "\u00d2j\u0002\u0b12\u0b14\u0005\u00dan\u0002\u0b13\u0b12\u0003\u0002",
    "\u0002\u0002\u0b13\u0b14\u0003\u0002\u0002\u0002\u0b14\u0b17\u0003\u0002",
    "\u0002\u0002\u0b15\u0b17\u0005\u00dan\u0002\u0b16\u0b11\u0003\u0002",
    "\u0002\u0002\u0b16\u0b15\u0003\u0002\u0002\u0002\u0b16\u0b17\u0003\u0002",
    "\u0002\u0002\u0b17\u0b24\u0003\u0002\u0002\u0002\u0b18\u0b19\u0007\u0012",
    "\u0002\u0002\u0b19\u0b1a\u0005\u00f4{\u0002\u0b1a\u0b20\b_\u0001\u0002",
    "\u0b1b\u0b1d\u0005\u00d2j\u0002\u0b1c\u0b1e\u0005\u00dan\u0002\u0b1d",
    "\u0b1c\u0003\u0002\u0002\u0002\u0b1d\u0b1e\u0003\u0002\u0002\u0002\u0b1e",
    "\u0b21\u0003\u0002\u0002\u0002\u0b1f\u0b21\u0005\u00dan\u0002\u0b20",
    "\u0b1b\u0003\u0002\u0002\u0002\u0b20\u0b1f\u0003\u0002\u0002\u0002\u0b20",
    "\u0b21\u0003\u0002\u0002\u0002\u0b21\u0b23\u0003\u0002\u0002\u0002\u0b22",
    "\u0b18\u0003\u0002\u0002\u0002\u0b23\u0b26\u0003\u0002\u0002\u0002\u0b24",
    "\u0b22\u0003\u0002\u0002\u0002\u0b24\u0b25\u0003\u0002\u0002\u0002\u0b25",
    "\u00bd\u0003\u0002\u0002\u0002\u0b26\u0b24\u0003\u0002\u0002\u0002\u0b27",
    "\u0b28\u0005\u00c0a\u0002\u0b28\u0b2f\b`\u0001\u0002\u0b29\u0b2a\u0007",
    "w\u0002\u0002\u0b2a\u0b2b\u0005\u00c0a\u0002\u0b2b\u0b2c\b`\u0001\u0002",
    "\u0b2c\u0b2e\u0003\u0002\u0002\u0002\u0b2d\u0b29\u0003\u0002\u0002\u0002",
    "\u0b2e\u0b31\u0003\u0002\u0002\u0002\u0b2f\u0b2d\u0003\u0002\u0002\u0002",
    "\u0b2f\u0b30\u0003\u0002\u0002\u0002\u0b30\u00bf\u0003\u0002\u0002\u0002",
    "\u0b31\u0b2f\u0003\u0002\u0002\u0002\u0b32\u0b33\u0005\u00c2b\u0002",
    "\u0b33\u0b3a\ba\u0001\u0002\u0b34\u0b35\u0007A\u0002\u0002\u0b35\u0b36",
    "\u0005\u00c2b\u0002\u0b36\u0b37\ba\u0001\u0002\u0b37\u0b39\u0003\u0002",
    "\u0002\u0002\u0b38\u0b34\u0003\u0002\u0002\u0002\u0b39\u0b3c\u0003\u0002",
    "\u0002\u0002\u0b3a\u0b38\u0003\u0002\u0002\u0002\u0b3a\u0b3b\u0003\u0002",
    "\u0002\u0002\u0b3b\u00c1\u0003\u0002\u0002\u0002\u0b3c\u0b3a\u0003\u0002",
    "\u0002\u0002\u0b3d\u0b3e\u00074\u0002\u0002\u0b3e\u0b3f\u0005\u00c2",
    "b\u0002\u0b3f\u0b40\bb\u0001\u0002\u0b40\u0b6b\u0003\u0002\u0002\u0002",
    "\u0b41\u0b4c\u0007/\u0002\u0002\u0b42\u0b43\u0007\b\u0002\u0002\u0b43",
    "\u0b44\u0005\u0096L\u0002\u0b44\u0b45\u0007\t\u0002\u0002\u0b45\u0b46",
    "\bb\u0001\u0002\u0b46\u0b4d\u0003\u0002\u0002\u0002\u0b47\u0b48\t\u0006",
    "\u0002\u0002\u0b48\u0b4d\bb\u0001\u0002\u0b49\u0b4a\u0005\u00d0i\u0002",
    "\u0b4a\u0b4b\bb\u0001\u0002\u0b4b\u0b4d\u0003\u0002\u0002\u0002\u0b4c",
    "\u0b42\u0003\u0002\u0002\u0002\u0b4c\u0b47\u0003\u0002\u0002\u0002\u0b4c",
    "\u0b49\u0003\u0002\u0002\u0002\u0b4d\u0b6b\u0003\u0002\u0002\u0002\u0b4e",
    "\u0b68\u0005\u00c6d\u0002\u0b4f\u0b50\t\u0007\u0002\u0002\u0b50\u0b53",
    "\bb\u0001\u0002\u0b51\u0b52\t\b\u0002\u0002\u0b52\u0b54\bb\u0001\u0002",
    "\u0b53\u0b51\u0003\u0002\u0002\u0002\u0b53\u0b54\u0003\u0002\u0002\u0002",
    "\u0b54\u0b55\u0003\u0002\u0002\u0002\u0b55\u0b56\u0005\u00c6d\u0002",
    "\u0b56\u0b57\bb\u0001\u0002\u0b57\u0b69\u0003\u0002\u0002\u0002\u0b58",
    "\u0b5c\u0007h\u0002\u0002\u0b59\u0b5a\u00074\u0002\u0002\u0b5a\u0b5d",
    "\u00075\u0002\u0002\u0b5b\u0b5d\u00075\u0002\u0002\u0b5c\u0b59\u0003",
    "\u0002\u0002\u0002\u0b5c\u0b5b\u0003\u0002\u0002\u0002\u0b5d\u0b5e\u0003",
    "\u0002\u0002\u0002\u0b5e\u0b69\bb\u0001\u0002\u0b5f\u0b60\bb\u0001\u0002",
    "\u0b60\u0b61\u00074\u0002\u0002\u0b61\u0b62\u0005\u00c4c\u0002\u0b62",
    "\u0b63\bb\u0001\u0002\u0b63\u0b69\u0003\u0002\u0002\u0002\u0b64\u0b65",
    "\bb\u0001\u0002\u0b65\u0b66\u0005\u00c4c\u0002\u0b66\u0b67\bb\u0001",
    "\u0002\u0b67\u0b69\u0003\u0002\u0002\u0002\u0b68\u0b4f\u0003\u0002\u0002",
    "\u0002\u0b68\u0b58\u0003\u0002\u0002\u0002\u0b68\u0b5f\u0003\u0002\u0002",
    "\u0002\u0b68\u0b64\u0003\u0002\u0002\u0002\u0b68\u0b69\u0003\u0002\u0002",
    "\u0002\u0b69\u0b6b\u0003\u0002\u0002\u0002\u0b6a\u0b3d\u0003\u0002\u0002",
    "\u0002\u0b6a\u0b41\u0003\u0002\u0002\u0002\u0b6a\u0b4e\u0003\u0002\u0002",
    "\u0002\u0b6b\u00c3\u0003\u0002\u0002\u0002\u0b6c\u0b6d\u00071\u0002",
    "\u0002\u0b6d\u0b6e\u0005\u00c6d\u0002\u0b6e\u0b6f\bc\u0001\u0002\u0b6f",
    "\u0b81\u0003\u0002\u0002\u0002\u0b70\u0b71\u0007H\u0002\u0002\u0b71",
    "\u0b72\u0005\u00c6d\u0002\u0b72\u0b73\bc\u0001\u0002\u0b73\u0b74\u0007",
    "A\u0002\u0002\u0b74\u0b75\u0005\u00c6d\u0002\u0b75\u0b76\bc\u0001\u0002",
    "\u0b76\u0b81\u0003\u0002\u0002\u0002\u0b77\u0b78\u0007l\u0002\u0002",
    "\u0b78\u0b79\u0005\u00c6d\u0002\u0b79\u0b7e\bc\u0001\u0002\u0b7a\u0b7b",
    "\u0007Y\u0002\u0002\u0b7b\u0b7c\u0005\u00c6d\u0002\u0b7c\u0b7d\bc\u0001",
    "\u0002\u0b7d\u0b7f\u0003\u0002\u0002\u0002\u0b7e\u0b7a\u0003\u0002\u0002",
    "\u0002\u0b7e\u0b7f\u0003\u0002\u0002\u0002\u0b7f\u0b81\u0003\u0002\u0002",
    "\u0002\u0b80\u0b6c\u0003\u0002\u0002\u0002\u0b80\u0b70\u0003\u0002\u0002",
    "\u0002\u0b80\u0b77\u0003\u0002\u0002\u0002\u0b81\u00c5\u0003\u0002\u0002",
    "\u0002\u0b82\u0b83\u0005\u00c8e\u0002\u0b83\u0b8a\bd\u0001\u0002\u0b84",
    "\u0b85\u0007\u001a\u0002\u0002\u0b85\u0b86\u0005\u00c8e\u0002\u0b86",
    "\u0b87\bd\u0001\u0002\u0b87\u0b89\u0003\u0002\u0002\u0002\u0b88\u0b84",
    "\u0003\u0002\u0002\u0002\u0b89\u0b8c\u0003\u0002\u0002\u0002\u0b8a\u0b88",
    "\u0003\u0002\u0002\u0002\u0b8a\u0b8b\u0003\u0002\u0002\u0002\u0b8b\u00c7",
    "\u0003\u0002\u0002\u0002\u0b8c\u0b8a\u0003\u0002\u0002\u0002\u0b8d\u0b8e",
    "\u0005\u00caf\u0002\u0b8e\u0b95\be\u0001\u0002\u0b8f\u0b90\t\t\u0002",
    "\u0002\u0b90\u0b91\u0005\u00caf\u0002\u0b91\u0b92\be\u0001\u0002\u0b92",
    "\u0b94\u0003\u0002\u0002\u0002\u0b93\u0b8f\u0003\u0002\u0002\u0002\u0b94",
    "\u0b97\u0003\u0002\u0002\u0002\u0b95\u0b93\u0003\u0002\u0002\u0002\u0b95",
    "\u0b96\u0003\u0002\u0002\u0002\u0b96\u00c9\u0003\u0002\u0002\u0002\u0b97",
    "\u0b95\u0003\u0002\u0002\u0002\u0b98\u0b99\u0005\u00ccg\u0002\u0b99",
    "\u0ba0\bf\u0001\u0002\u0b9a\u0b9b\t\n\u0002\u0002\u0b9b\u0b9c\u0005",
    "\u00ccg\u0002\u0b9c\u0b9d\bf\u0001\u0002\u0b9d\u0b9f\u0003\u0002\u0002",
    "\u0002\u0b9e\u0b9a\u0003\u0002\u0002\u0002\u0b9f\u0ba2\u0003\u0002\u0002",
    "\u0002\u0ba0\u0b9e\u0003\u0002\u0002\u0002\u0ba0\u0ba1\u0003\u0002\u0002",
    "\u0002\u0ba1\u00cb\u0003\u0002\u0002\u0002\u0ba2\u0ba0\u0003\u0002\u0002",
    "\u0002\u0ba3\u0ba4\t\t\u0002\u0002\u0ba4\u0ba5\u0005\u00ccg\u0002\u0ba5",
    "\u0ba6\bg\u0001\u0002\u0ba6\u0bfe\u0003\u0002\u0002\u0002\u0ba7\u0ba8",
    "\u0005\u00eav\u0002\u0ba8\u0ba9\bg\u0001\u0002\u0ba9\u0bfc\u0003\u0002",
    "\u0002\u0002\u0baa\u0bab\u0005\u00ceh\u0002\u0bab\u0bac\bg\u0001\u0002",
    "\u0bac\u0bfc\u0003\u0002\u0002\u0002\u0bad\u0bae\u0007,\u0002\u0002",
    "\u0bae\u0bc5\bg\u0001\u0002\u0baf\u0bb0\u0005\u00c6d\u0002\u0bb0\u0bb7",
    "\bg\u0001\u0002\u0bb1\u0bb2\u0007:\u0002\u0002\u0bb2\u0bb3\u0005\u00c6",
    "d\u0002\u0bb3\u0bb4\u0007\u0084\u0002\u0002\u0bb4\u0bb5\u0005\u00c6",
    "d\u0002\u0bb5\u0bb6\bg\u0001\u0002\u0bb6\u0bb8\u0003\u0002\u0002\u0002",
    "\u0bb7\u0bb1\u0003\u0002\u0002\u0002\u0bb8\u0bb9\u0003\u0002\u0002\u0002",
    "\u0bb9\u0bb7\u0003\u0002\u0002\u0002\u0bb9\u0bba\u0003\u0002\u0002\u0002",
    "\u0bba\u0bc6\u0003\u0002\u0002\u0002\u0bbb\u0bbc\u0007:\u0002\u0002",
    "\u0bbc\u0bbd\u0005\u00be`\u0002\u0bbd\u0bbe\u0007\u0084\u0002\u0002",
    "\u0bbe\u0bbf\u0005\u00c6d\u0002\u0bbf\u0bc0\bg\u0001\u0002\u0bc0\u0bc2",
    "\u0003\u0002\u0002\u0002\u0bc1\u0bbb\u0003\u0002\u0002\u0002\u0bc2\u0bc3",
    "\u0003\u0002\u0002\u0002\u0bc3\u0bc1\u0003\u0002\u0002\u0002\u0bc3\u0bc4",
    "\u0003\u0002\u0002\u0002\u0bc4\u0bc6\u0003\u0002\u0002\u0002\u0bc5\u0baf",
    "\u0003\u0002\u0002\u0002\u0bc5\u0bc1\u0003\u0002\u0002\u0002\u0bc6\u0bcb",
    "\u0003\u0002\u0002\u0002\u0bc7\u0bc8\u0007T\u0002\u0002\u0bc8\u0bc9",
    "\u0005\u00c6d\u0002\u0bc9\u0bca\bg\u0001\u0002\u0bca\u0bcc\u0003\u0002",
    "\u0002\u0002\u0bcb\u0bc7\u0003\u0002\u0002\u0002\u0bcb\u0bcc\u0003\u0002",
    "\u0002\u0002\u0bcc\u0bcd\u0003\u0002\u0002\u0002\u0bcd\u0bce\u0007U",
    "\u0002\u0002\u0bce\u0bfc\u0003\u0002\u0002\u0002\u0bcf\u0bd0\u00073",
    "\u0002\u0002\u0bd0\u0bd1\u0005\u00d0i\u0002\u0bd1\u0bd2\bg\u0001\u0002",
    "\u0bd2\u0bfc\u0003\u0002\u0002\u0002\u0bd3\u0bd4\u0005\u00d0i\u0002",
    "\u0bd4\u0bd5\bg\u0001\u0002\u0bd5\u0bd9\bg\u0001\u0002\u0bd6\u0bd7\u0005",
    "\u00a8U\u0002\u0bd7\u0bd8\bg\u0001\u0002\u0bd8\u0bda\u0003\u0002\u0002",
    "\u0002\u0bd9\u0bd6\u0003\u0002\u0002\u0002\u0bd9\u0bda\u0003\u0002\u0002",
    "\u0002\u0bda\u0bfc\u0003\u0002\u0002\u0002\u0bdb\u0be1\u0007\u0007\u0002",
    "\u0002\u0bdc\u0bdd\u0005\u00d0i\u0002\u0bdd\u0bde\bg\u0001\u0002\u0bde",
    "\u0be2\u0003\u0002\u0002\u0002\u0bdf\u0be0\u0007=\u0002\u0002\u0be0",
    "\u0be2\bg\u0001\u0002\u0be1\u0bdc\u0003\u0002\u0002\u0002\u0be1\u0bdf",
    "\u0003\u0002\u0002\u0002\u0be2\u0bfc\u0003\u0002\u0002\u0002\u0be3\u0be4",
    "\u0007\u0013\u0002\u0002\u0be4\u0bfc\bg\u0001\u0002\u0be5\u0bf9\u0007",
    "\b\u0002\u0002\u0be6\u0be7\u0005\u0096L\u0002\u0be7\u0be8\u0007\t\u0002",
    "\u0002\u0be8\u0be9\bg\u0001\u0002\u0be9\u0bfa\u0003\u0002\u0002\u0002",
    "\u0bea\u0beb\u0005\u00be`\u0002\u0beb\u0bf3\bg\u0001\u0002\u0bec\u0bed",
    "\u0007\u0005\u0002\u0002\u0bed\u0bee\bg\u0001\u0002\u0bee\u0bef\u0005",
    "\u00c6d\u0002\u0bef\u0bf0\bg\u0001\u0002\u0bf0\u0bf2\u0003\u0002\u0002",
    "\u0002\u0bf1\u0bec\u0003\u0002\u0002\u0002\u0bf2\u0bf5\u0003\u0002\u0002",
    "\u0002\u0bf3\u0bf1\u0003\u0002\u0002\u0002\u0bf3\u0bf4\u0003\u0002\u0002",
    "\u0002\u0bf4\u0bf6\u0003\u0002\u0002\u0002\u0bf5\u0bf3\u0003\u0002\u0002",
    "\u0002\u0bf6\u0bf7\u0007\t\u0002\u0002\u0bf7\u0bf8\bg\u0001\u0002\u0bf8",
    "\u0bfa\u0003\u0002\u0002\u0002\u0bf9\u0be6\u0003\u0002\u0002\u0002\u0bf9",
    "\u0bea\u0003\u0002\u0002\u0002\u0bfa\u0bfc\u0003\u0002\u0002\u0002\u0bfb",
    "\u0ba7\u0003\u0002\u0002\u0002\u0bfb\u0baa\u0003\u0002\u0002\u0002\u0bfb",
    "\u0bad\u0003\u0002\u0002\u0002\u0bfb\u0bcf\u0003\u0002\u0002\u0002\u0bfb",
    "\u0bd3\u0003\u0002\u0002\u0002\u0bfb\u0bdb\u0003\u0002\u0002\u0002\u0bfb",
    "\u0be3\u0003\u0002\u0002\u0002\u0bfb\u0be5\u0003\u0002\u0002\u0002\u0bfc",
    "\u0bfe\u0003\u0002\u0002\u0002\u0bfd\u0ba3\u0003\u0002\u0002\u0002\u0bfd",
    "\u0bfb\u0003\u0002\u0002\u0002\u0bfe\u00cd\u0003\u0002\u0002\u0002\u0bff",
    "\u0c00\u0007-\u0002\u0002\u0c00\u0c01\u0007\b\u0002\u0002\u0c01\u0c02",
    "\bh\u0001\u0002\u0c02\u0c03\u0005\u00c6d\u0002\u0c03\u0c04\u0007*\u0002",
    "\u0002\u0c04\u0c05\u0005\u008eH\u0002\u0c05\u0c06\bh\u0001\u0002\u0c06",
    "\u0c07\u0007\t\u0002\u0002\u0c07\u0c08\bh\u0001\u0002\u0c08\u00cf\u0003",
    "\u0002\u0002\u0002\u0c09\u0c0a\u0005\u00f4{\u0002\u0c0a\u0c10\bi\u0001",
    "\u0002\u0c0b\u0c0d\u0005\u00d4k\u0002\u0c0c\u0c0e\u0005\u00dan\u0002",
    "\u0c0d\u0c0c\u0003\u0002\u0002\u0002\u0c0d\u0c0e\u0003\u0002\u0002\u0002",
    "\u0c0e\u0c11\u0003\u0002\u0002\u0002\u0c0f\u0c11\u0005\u00dan\u0002",
    "\u0c10\u0c0b\u0003\u0002\u0002\u0002\u0c10\u0c0f\u0003\u0002\u0002\u0002",
    "\u0c10\u0c11\u0003\u0002\u0002\u0002\u0c11\u0c1e\u0003\u0002\u0002\u0002",
    "\u0c12\u0c13\u0007\u0012\u0002\u0002\u0c13\u0c14\u0005\u00f4{\u0002",
    "\u0c14\u0c1a\bi\u0001\u0002\u0c15\u0c17\u0005\u00d4k\u0002\u0c16\u0c18",
    "\u0005\u00dan\u0002\u0c17\u0c16\u0003\u0002\u0002\u0002\u0c17\u0c18",
    "\u0003\u0002\u0002\u0002\u0c18\u0c1b\u0003\u0002\u0002\u0002\u0c19\u0c1b",
    "\u0005\u00dan\u0002\u0c1a\u0c15\u0003\u0002\u0002\u0002\u0c1a\u0c19",
    "\u0003\u0002\u0002\u0002\u0c1a\u0c1b\u0003\u0002\u0002\u0002\u0c1b\u0c1d",
    "\u0003\u0002\u0002\u0002\u0c1c\u0c12\u0003\u0002\u0002\u0002\u0c1d\u0c20",
    "\u0003\u0002\u0002\u0002\u0c1e\u0c1c\u0003\u0002\u0002\u0002\u0c1e\u0c1f",
    "\u0003\u0002\u0002\u0002\u0c1f\u00d1\u0003\u0002\u0002\u0002\u0c20\u0c1e",
    "\u0003\u0002\u0002\u0002\u0c21\u0c22\u0007\b\u0002\u0002\u0c22\u0c23",
    "\bj\u0001\u0002\u0c23\u0c24\u0005\u00f4{\u0002\u0c24\u0c25\u0007\u0007",
    "\u0002\u0002\u0c25\u0c2e\u0005\u00d6l\u0002\u0c26\u0c27\u0007\u0005",
    "\u0002\u0002\u0c27\u0c28\bj\u0001\u0002\u0c28\u0c29\u0005\u00f4{\u0002",
    "\u0c29\u0c2a\u0007\u0007\u0002\u0002\u0c2a\u0c2b\u0005\u00d6l\u0002",
    "\u0c2b\u0c2d\u0003\u0002\u0002\u0002\u0c2c\u0c26\u0003\u0002\u0002\u0002",
    "\u0c2d\u0c30\u0003\u0002\u0002\u0002\u0c2e\u0c2c\u0003\u0002\u0002\u0002",
    "\u0c2e\u0c2f\u0003\u0002\u0002\u0002\u0c2f\u0c31\u0003\u0002\u0002\u0002",
    "\u0c30\u0c2e\u0003\u0002\u0002\u0002\u0c31\u0c32\u0007\t\u0002\u0002",
    "\u0c32\u0c33\bj\u0001\u0002\u0c33\u00d3\u0003\u0002\u0002\u0002\u0c34",
    "\u0c35\bk\u0001\u0002\u0c35\u0c36\u0007\b\u0002\u0002\u0c36\u0c65\b",
    "k\u0001\u0002\u0c37\u0c38\bk\u0001\u0002\u0c38\u0c39\u0007\u0091\u0002",
    "\u0002\u0c39\u0c3a\u0007\u0007\u0002\u0002\u0c3a\u0c43\u0005\u00d6l",
    "\u0002\u0c3b\u0c3c\u0007\u0005\u0002\u0002\u0c3c\u0c3d\bk\u0001\u0002",
    "\u0c3d\u0c3e\u0005\u00f4{\u0002\u0c3e\u0c3f\u0007\u0007\u0002\u0002",
    "\u0c3f\u0c40\u0005\u00d6l\u0002\u0c40\u0c42\u0003\u0002\u0002\u0002",
    "\u0c41\u0c3b\u0003\u0002\u0002\u0002\u0c42\u0c45\u0003\u0002\u0002\u0002",
    "\u0c43\u0c41\u0003\u0002\u0002\u0002\u0c43\u0c44\u0003\u0002\u0002\u0002",
    "\u0c44\u0c66\u0003\u0002\u0002\u0002\u0c45\u0c43\u0003\u0002\u0002\u0002",
    "\u0c46\u0c47\bk\u0001\u0002\u0c47\u0c48\u0007\u0092\u0002\u0002\u0c48",
    "\u0c49\u0007\u001c\u0002\u0002\u0c49\u0c52\u0005\u00d6l\u0002\u0c4a",
    "\u0c4b\u0007\u0005\u0002\u0002\u0c4b\u0c4c\bk\u0001\u0002\u0c4c\u0c4d",
    "\u0005\u00f4{\u0002\u0c4d\u0c4e\u0007\u001c\u0002\u0002\u0c4e\u0c4f",
    "\u0005\u00d6l\u0002\u0c4f\u0c51\u0003\u0002\u0002\u0002\u0c50\u0c4a",
    "\u0003\u0002\u0002\u0002\u0c51\u0c54\u0003\u0002\u0002\u0002\u0c52\u0c50",
    "\u0003\u0002\u0002\u0002\u0c52\u0c53\u0003\u0002\u0002\u0002\u0c53\u0c66",
    "\u0003\u0002\u0002\u0002\u0c54\u0c52\u0003\u0002\u0002\u0002\u0c55\u0c56",
    "\bk\u0001\u0002\u0c56\u0c5c\u0005\u00d8m\u0002\u0c57\u0c58\u0007\u0005",
    "\u0002\u0002\u0c58\u0c59\bk\u0001\u0002\u0c59\u0c5b\u0005\u00d8m\u0002",
    "\u0c5a\u0c57\u0003\u0002\u0002\u0002\u0c5b\u0c5e\u0003\u0002\u0002\u0002",
    "\u0c5c\u0c5a\u0003\u0002\u0002\u0002\u0c5c\u0c5d\u0003\u0002\u0002\u0002",
    "\u0c5d\u0c62\u0003\u0002\u0002\u0002\u0c5e\u0c5c\u0003\u0002\u0002\u0002",
    "\u0c5f\u0c60\u0005\u009aN\u0002\u0c60\u0c61\bk\u0001\u0002\u0c61\u0c63",
    "\u0003\u0002\u0002\u0002\u0c62\u0c5f\u0003\u0002\u0002\u0002\u0c62\u0c63",
    "\u0003\u0002\u0002\u0002\u0c63\u0c66\u0003\u0002\u0002\u0002\u0c64\u0c66",
    "\bk\u0001\u0002\u0c65\u0c37\u0003\u0002\u0002\u0002\u0c65\u0c46\u0003",
    "\u0002\u0002\u0002\u0c65\u0c55\u0003\u0002\u0002\u0002\u0c65\u0c64\u0003",
    "\u0002\u0002\u0002\u0c66\u0c67\u0003\u0002\u0002\u0002\u0c67\u0c68\u0007",
    "\t\u0002\u0002\u0c68\u0c69\bk\u0001\u0002\u0c69\u00d5\u0003\u0002\u0002",
    "\u0002\u0c6a\u0c6b\u0005\u00c6d\u0002\u0c6b\u0c6c\bl\u0001\u0002\u0c6c",
    "\u00d7\u0003\u0002\u0002\u0002\u0c6d\u0c6e\u0005\u00c6d\u0002\u0c6e",
    "\u0c6f\bm\u0001\u0002\u0c6f\u0c7b\u0003\u0002\u0002\u0002\u0c70\u0c71",
    "\u0007\u0094\u0002\u0002\u0c71\u0c7b\bm\u0001\u0002\u0c72\u0c73\u0007",
    "\u0096\u0002\u0002\u0c73\u0c74\bm\u0001\u0002\u0c74\u0c75\u0005\u00c6",
    "d\u0002\u0c75\u0c76\bm\u0001\u0002\u0c76\u0c7b\u0003\u0002\u0002\u0002",
    "\u0c77\u0c78\bm\u0001\u0002\u0c78\u0c79\t\u000b\u0002\u0002\u0c79\u0c7b",
    "\bm\u0001\u0002\u0c7a\u0c6d\u0003\u0002\u0002\u0002\u0c7a\u0c70\u0003",
    "\u0002\u0002\u0002\u0c7a\u0c72\u0003\u0002\u0002\u0002\u0c7a\u0c77\u0003",
    "\u0002\u0002\u0002\u0c7b\u0c92\u0003\u0002\u0002\u0002\u0c7c\u0c8e\b",
    "m\u0001\u0002\u0c7d\u0c81\bm\u0001\u0002\u0c7e\u0c82\u0007\u0095\u0002",
    "\u0002\u0c7f\u0c80\bm\u0001\u0002\u0c80\u0c82\t\f\u0002\u0002\u0c81",
    "\u0c7e\u0003\u0002\u0002\u0002\u0c81\u0c7f\u0003\u0002\u0002\u0002\u0c82",
    "\u0c83\u0003\u0002\u0002\u0002\u0c83\u0c8c\bm\u0001\u0002\u0c84\u0c85",
    "\u0005\u00c6d\u0002\u0c85\u0c86\bm\u0001\u0002\u0c86\u0c8d\u0003\u0002",
    "\u0002\u0002\u0c87\u0c88\u0007\u0094\u0002\u0002\u0c88\u0c8d\bm\u0001",
    "\u0002\u0c89\u0c8a\bm\u0001\u0002\u0c8a\u0c8b\t\r\u0002\u0002\u0c8b",
    "\u0c8d\bm\u0001\u0002\u0c8c\u0c84\u0003\u0002\u0002\u0002\u0c8c\u0c87",
    "\u0003\u0002\u0002\u0002\u0c8c\u0c89\u0003\u0002\u0002\u0002\u0c8d\u0c8f",
    "\u0003\u0002\u0002\u0002\u0c8e\u0c7d\u0003\u0002\u0002\u0002\u0c8f\u0c90",
    "\u0003\u0002\u0002\u0002\u0c90\u0c8e\u0003\u0002\u0002\u0002\u0c90\u0c91",
    "\u0003\u0002\u0002\u0002\u0c91\u0c93\u0003\u0002\u0002\u0002\u0c92\u0c7c",
    "\u0003\u0002\u0002\u0002\u0c92\u0c93\u0003\u0002\u0002\u0002\u0c93\u00d9",
    "\u0003\u0002\u0002\u0002\u0c94\u0c96\u0007\u000f\u0002\u0002\u0c95\u0c97",
    "\u0005\u00dco\u0002\u0c96\u0c95\u0003\u0002\u0002\u0002\u0c96\u0c97",
    "\u0003\u0002\u0002\u0002\u0c97\u0c98\u0003\u0002\u0002\u0002\u0c98\u0c99",
    "\u0005\u00dep\u0002\u0c99\u0c9a\u0005\u00be`\u0002\u0c9a\u0c9b\bn\u0001",
    "\u0002\u0c9b\u0c9c\u0007\u0011\u0002\u0002\u0c9c\u00db\u0003\u0002\u0002",
    "\u0002\u0c9d\u0c9e\bo\u0001\u0002\u0c9e\u0c9f\u0007=\u0002\u0002\u0c9f",
    "\u0ca0\u0007\u0007\u0002\u0002\u0ca0\u0ca1\bo\u0001\u0002\u0ca1\u00dd",
    "\u0003\u0002\u0002\u0002\u0ca2\u0ca3\bp\u0001\u0002\u0ca3\u0ca4\u0007",
    ";\u0002\u0002\u0ca4\u00df\u0003\u0002\u0002\u0002\u0ca5\u0cae\u0005",
    "\u00e2r\u0002\u0ca6\u0ca8\u0007\n\u0002\u0002\u0ca7\u0ca6\u0003\u0002",
    "\u0002\u0002\u0ca7\u0ca8\u0003\u0002\u0002\u0002\u0ca8\u0ca9\u0003\u0002",
    "\u0002\u0002\u0ca9\u0cab\u0005\u00eex\u0002\u0caa\u0cac\u0005\u00f0",
    "y\u0002\u0cab\u0caa\u0003\u0002\u0002\u0002\u0cab\u0cac\u0003\u0002",
    "\u0002\u0002\u0cac\u0cae\u0003\u0002\u0002\u0002\u0cad\u0ca5\u0003\u0002",
    "\u0002\u0002\u0cad\u0ca7\u0003\u0002\u0002\u0002\u0cae\u00e1\u0003\u0002",
    "\u0002\u0002\u0caf\u0cb0\u0007\u0004\u0002\u0002\u0cb0\u0cb1\br\u0001",
    "\u0002\u0cb1\u0cb7\u0005\u00e4s\u0002\u0cb2\u0cb3\u0007\u0005\u0002",
    "\u0002\u0cb3\u0cb4\br\u0001\u0002\u0cb4\u0cb6\u0005\u00e4s\u0002\u0cb5",
    "\u0cb2\u0003\u0002\u0002\u0002\u0cb6\u0cb9\u0003\u0002\u0002\u0002\u0cb7",
    "\u0cb5\u0003\u0002\u0002\u0002\u0cb7\u0cb8\u0003\u0002\u0002\u0002\u0cb8",
    "\u0cba\u0003\u0002\u0002\u0002\u0cb9\u0cb7\u0003\u0002\u0002\u0002\u0cba",
    "\u0cbb\u0007\u0006\u0002\u0002\u0cbb\u0cec\u0003\u0002\u0002\u0002\u0cbc",
    "\u0cbd\u0007\u000f\u0002\u0002\u0cbd\u0cde\br\u0001\u0002\u0cbe\u0cbf",
    "\u0005\u00e8u\u0002\u0cbf\u0cc0\br\u0001\u0002\u0cc0\u0cc9\u0003\u0002",
    "\u0002\u0002\u0cc1\u0cc5\u0007\u001d\u0002\u0002\u0cc2\u0cc3\u0007\u0089",
    "\u0002\u0002\u0cc3\u0cc4\u0007\u0085\u0002\u0002\u0cc4\u0cc6\u0005\u00e8",
    "u\u0002\u0cc5\u0cc2\u0003\u0002\u0002\u0002\u0cc5\u0cc6\u0003\u0002",
    "\u0002\u0002\u0cc6\u0cc7\u0003\u0002\u0002\u0002\u0cc7\u0cc9\br\u0001",
    "\u0002\u0cc8\u0cbe\u0003\u0002\u0002\u0002\u0cc8\u0cc1\u0003\u0002\u0002",
    "\u0002\u0cc9\u0cdb\u0003\u0002\u0002\u0002\u0cca\u0ccb\u0007\u0005\u0002",
    "\u0002\u0ccb\u0cd7\br\u0001\u0002\u0ccc\u0ccd\u0005\u00e8u\u0002\u0ccd",
    "\u0cce\br\u0001\u0002\u0cce\u0cd8\u0003\u0002\u0002\u0002\u0ccf\u0cd0",
    "\br\u0001\u0002\u0cd0\u0cd4\u0007\u001d\u0002\u0002\u0cd1\u0cd2\u0007",
    "\u0089\u0002\u0002\u0cd2\u0cd3\u0007\u0085\u0002\u0002\u0cd3\u0cd5\u0005",
    "\u00e8u\u0002\u0cd4\u0cd1\u0003\u0002\u0002\u0002\u0cd4\u0cd5\u0003",
    "\u0002\u0002\u0002\u0cd5\u0cd6\u0003\u0002\u0002\u0002\u0cd6\u0cd8\b",
    "r\u0001\u0002\u0cd7\u0ccc\u0003\u0002\u0002\u0002\u0cd7\u0ccf\u0003",
    "\u0002\u0002\u0002\u0cd8\u0cda\u0003\u0002\u0002\u0002\u0cd9\u0cca\u0003",
    "\u0002\u0002\u0002\u0cda\u0cdd\u0003\u0002\u0002\u0002\u0cdb\u0cd9\u0003",
    "\u0002\u0002\u0002\u0cdb\u0cdc\u0003\u0002\u0002\u0002\u0cdc\u0cdf\u0003",
    "\u0002\u0002\u0002\u0cdd\u0cdb\u0003\u0002\u0002\u0002\u0cde\u0cc8\u0003",
    "\u0002\u0002\u0002\u0cde\u0cdf\u0003\u0002\u0002\u0002\u0cdf\u0ce0\u0003",
    "\u0002\u0002\u0002\u0ce0\u0ce1\u0007\u0011\u0002\u0002\u0ce1\u0cec\b",
    "r\u0001\u0002\u0ce2\u0ce3\u0005\u00eav\u0002\u0ce3\u0ce4\br\u0001\u0002",
    "\u0ce4\u0cec\u0003\u0002\u0002\u0002\u0ce5\u0ce8\u0007\f\u0002\u0002",
    "\u0ce6\u0ce8\u0007\r\u0002\u0002\u0ce7\u0ce5\u0003\u0002\u0002\u0002",
    "\u0ce7\u0ce6\u0003\u0002\u0002\u0002\u0ce8\u0ce9\u0003\u0002\u0002\u0002",
    "\u0ce9\u0cea\u0007=\u0002\u0002\u0cea\u0cec\br\u0001\u0002\u0ceb\u0caf",
    "\u0003\u0002\u0002\u0002\u0ceb\u0cbc\u0003\u0002\u0002\u0002\u0ceb\u0ce2",
    "\u0003\u0002\u0002\u0002\u0ceb\u0ce7\u0003\u0002\u0002\u0002\u0cec\u00e3",
    "\u0003\u0002\u0002\u0002\u0ced\u0cef\u0007\n\u0002\u0002\u0cee\u0ced",
    "\u0003\u0002\u0002\u0002\u0cee\u0cef\u0003\u0002\u0002\u0002\u0cef\u0cf0",
    "\u0003\u0002\u0002\u0002\u0cf0\u0cf2\u0005\u00eex\u0002\u0cf1\u0cf3",
    "\u0005\u00f0y\u0002\u0cf2\u0cf1\u0003\u0002\u0002\u0002\u0cf2\u0cf3",
    "\u0003\u0002\u0002\u0002\u0cf3\u0cf7\u0003\u0002\u0002\u0002\u0cf4\u0cf5",
    "\u0007\u0007\u0002\u0002\u0cf5\u0cf6\bs\u0001\u0002\u0cf6\u0cf8\u0005",
    "\u00e0q\u0002\u0cf7\u0cf4\u0003\u0002\u0002\u0002\u0cf7\u0cf8\u0003",
    "\u0002\u0002\u0002\u0cf8\u0cf9\u0003\u0002\u0002\u0002\u0cf9\u0cfa\b",
    "s\u0001\u0002\u0cfa\u00e5\u0003\u0002\u0002\u0002\u0cfb\u0cfd\u0007",
    "\n\u0002\u0002\u0cfc\u0cfb\u0003\u0002\u0002\u0002\u0cfc\u0cfd\u0003",
    "\u0002\u0002\u0002\u0cfd\u0cfe\u0003\u0002\u0002\u0002\u0cfe\u0d03\u0005",
    "\u00eex\u0002\u0cff\u0d00\u0007\u0007\u0002\u0002\u0d00\u0d01\u0005",
    "\u00e8u\u0002\u0d01\u0d02\bt\u0001\u0002\u0d02\u0d04\u0003\u0002\u0002",
    "\u0002\u0d03\u0cff\u0003\u0002\u0002\u0002\u0d03\u0d04\u0003\u0002\u0002",
    "\u0002\u0d04\u0d05\u0003\u0002\u0002\u0002\u0d05\u0d06\bt\u0001\u0002",
    "\u0d06\u00e7\u0003\u0002\u0002\u0002\u0d07\u0d08\u0007\u0004\u0002\u0002",
    "\u0d08\u0d09\bu\u0001\u0002\u0d09\u0d0a\bu\u0001\u0002\u0d0a\u0d10\u0005",
    "\u00e6t\u0002\u0d0b\u0d0c\u0007\u0005\u0002\u0002\u0d0c\u0d0d\bu\u0001",
    "\u0002\u0d0d\u0d0f\u0005\u00e6t\u0002\u0d0e\u0d0b\u0003\u0002\u0002",
    "\u0002\u0d0f\u0d12\u0003\u0002\u0002\u0002\u0d10\u0d0e\u0003\u0002\u0002",
    "\u0002\u0d10\u0d11\u0003\u0002\u0002\u0002\u0d11\u0d13\u0003\u0002\u0002",
    "\u0002\u0d12\u0d10\u0003\u0002\u0002\u0002\u0d13\u0d14\u0007\u0006\u0002",
    "\u0002\u0d14\u0d37\u0003\u0002\u0002\u0002\u0d15\u0d16\u0007\u000f\u0002",
    "\u0002\u0d16\u0d23\bu\u0001\u0002\u0d17\u0d18\u0005\u00e8u\u0002\u0d18",
    "\u0d20\bu\u0001\u0002\u0d19\u0d1a\u0007\u0005\u0002\u0002\u0d1a\u0d1b",
    "\bu\u0001\u0002\u0d1b\u0d1c\u0005\u00e8u\u0002\u0d1c\u0d1d\bu\u0001",
    "\u0002\u0d1d\u0d1f\u0003\u0002\u0002\u0002\u0d1e\u0d19\u0003\u0002\u0002",
    "\u0002\u0d1f\u0d22\u0003\u0002\u0002\u0002\u0d20\u0d1e\u0003\u0002\u0002",
    "\u0002\u0d20\u0d21\u0003\u0002\u0002\u0002\u0d21\u0d24\u0003\u0002\u0002",
    "\u0002\u0d22\u0d20\u0003\u0002\u0002\u0002\u0d23\u0d17\u0003\u0002\u0002",
    "\u0002\u0d23\u0d24\u0003\u0002\u0002\u0002\u0d24\u0d25\u0003\u0002\u0002",
    "\u0002\u0d25\u0d37\u0007\u0011\u0002\u0002\u0d26\u0d27\u0005\u00eav",
    "\u0002\u0d27\u0d28\bu\u0001\u0002\u0d28\u0d37\u0003\u0002\u0002\u0002",
    "\u0d29\u0d2c\u0007\f\u0002\u0002\u0d2a\u0d2c\u0007\r\u0002\u0002\u0d2b",
    "\u0d29\u0003\u0002\u0002\u0002\u0d2b\u0d2a\u0003\u0002\u0002\u0002\u0d2c",
    "\u0d2d\u0003\u0002\u0002\u0002\u0d2d\u0d2e\u0007=\u0002\u0002\u0d2e",
    "\u0d37\bu\u0001\u0002\u0d2f\u0d31\u0007\n\u0002\u0002\u0d30\u0d2f\u0003",
    "\u0002\u0002\u0002\u0d30\u0d31\u0003\u0002\u0002\u0002\u0d31\u0d32\u0003",
    "\u0002\u0002\u0002\u0d32\u0d34\u0005\u00eex\u0002\u0d33\u0d35\u0005",
    "\u00f0y\u0002\u0d34\u0d33\u0003\u0002\u0002\u0002\u0d34\u0d35\u0003",
    "\u0002\u0002\u0002\u0d35\u0d37\u0003\u0002\u0002\u0002\u0d36\u0d07\u0003",
    "\u0002\u0002\u0002\u0d36\u0d15\u0003\u0002\u0002\u0002\u0d36\u0d26\u0003",
    "\u0002\u0002\u0002\u0d36\u0d2b\u0003\u0002\u0002\u0002\u0d36\u0d30\u0003",
    "\u0002\u0002\u0002\u0d37\u00e9\u0003\u0002\u0002\u0002\u0d38\u0d39\u0007",
    "\u001e\u0002\u0002\u0d39\u0d3a\u0005\u00f4{\u0002\u0d3a\u0d3b\bv\u0001",
    "\u0002\u0d3b\u0d47\u0003\u0002\u0002\u0002\u0d3c\u0d3d\u00075\u0002",
    "\u0002\u0d3d\u0d47\bv\u0001\u0002\u0d3e\u0d3f\u0007\'\u0002\u0002\u0d3f",
    "\u0d47\bv\u0001\u0002\u0d40\u0d41\u0007=\u0002\u0002\u0d41\u0d47\bv",
    "\u0001\u0002\u0d42\u0d43\u0007#\u0002\u0002\u0d43\u0d47\bv\u0001\u0002",
    "\u0d44\u0d45\u0007$\u0002\u0002\u0d45\u0d47\bv\u0001\u0002\u0d46\u0d38",
    "\u0003\u0002\u0002\u0002\u0d46\u0d3c\u0003\u0002\u0002\u0002\u0d46\u0d3e",
    "\u0003\u0002\u0002\u0002\u0d46\u0d40\u0003\u0002\u0002\u0002\u0d46\u0d42",
    "\u0003\u0002\u0002\u0002\u0d46\u0d44\u0003\u0002\u0002\u0002\u0d47\u00eb",
    "\u0003\u0002\u0002\u0002\u0d48\u0d49\u0005\u00f4{\u0002\u0d49\u0d50",
    "\bw\u0001\u0002\u0d4a\u0d4b\u0007\u0012\u0002\u0002\u0d4b\u0d4c\u0005",
    "\u00f4{\u0002\u0d4c\u0d4d\bw\u0001\u0002\u0d4d\u0d4f\u0003\u0002\u0002",
    "\u0002\u0d4e\u0d4a\u0003\u0002\u0002\u0002\u0d4f\u0d52\u0003\u0002\u0002",
    "\u0002\u0d50\u0d4e\u0003\u0002\u0002\u0002\u0d50\u0d51\u0003\u0002\u0002",
    "\u0002\u0d51\u00ed\u0003\u0002\u0002\u0002\u0d52\u0d50\u0003\u0002\u0002",
    "\u0002\u0d53\u0d54\u0005\u00f4{\u0002\u0d54\u0d5e\bx\u0001\u0002\u0d55",
    "\u0d57\u0007\u0012\u0002\u0002\u0d56\u0d58\u0007\n\u0002\u0002\u0d57",
    "\u0d56\u0003\u0002\u0002\u0002\u0d57\u0d58\u0003\u0002\u0002\u0002\u0d58",
    "\u0d59\u0003\u0002\u0002\u0002\u0d59\u0d5a\u0005\u00f4{\u0002\u0d5a",
    "\u0d5b\bx\u0001\u0002\u0d5b\u0d5d\u0003\u0002\u0002\u0002\u0d5c\u0d55",
    "\u0003\u0002\u0002\u0002\u0d5d\u0d60\u0003\u0002\u0002\u0002\u0d5e\u0d5c",
    "\u0003\u0002\u0002\u0002\u0d5e\u0d5f\u0003\u0002\u0002\u0002\u0d5f\u00ef",
    "\u0003\u0002\u0002\u0002\u0d60\u0d5e\u0003\u0002\u0002\u0002\u0d61\u0d62",
    "\u0007\u001e\u0002\u0002\u0d62\u0d63\by\u0001\u0002\u0d63\u0d64\u0005",
    "\u00ecw\u0002\u0d64\u0d65\by\u0001\u0002\u0d65\u00f1\u0003\u0002\u0002",
    "\u0002\u0d66\u0d67\u0007\u008d\u0002\u0002\u0d67\u00f3\u0003\u0002\u0002",
    "\u0002\u0d68\u0d69\t\u000e\u0002\u0002\u0d69\u00f5\u0003\u0002\u0002",
    "\u0002\u01be\u00f9\u00ff\u0101\u0107\u0109\u010c\u0128\u012d\u0138\u0140",
    "\u0142\u014e\u0154\u0159\u0163\u016d\u0171\u0178\u017d\u017f\u018b\u0192",
    "\u019b\u019d\u019f\u01a1\u01a6\u01aa\u01b0\u01b4\u01be\u01c7\u01cc\u01d0",
    "\u01d7\u01df\u01e6\u01ec\u01f2\u01f8\u0200\u0207\u020f\u0213\u021c\u021f",
    "\u0226\u0231\u0236\u0242\u0249\u0254\u0259\u025d\u025f\u0268\u026e\u0272",
    "\u0275\u027b\u0287\u028a\u0290\u0295\u029a\u02a5\u02b6\u02be\u02c4\u02ca",
    "\u02ce\u02d5\u02e0\u02e5\u02ee\u02f5\u02fc\u0302\u030d\u0310\u0319\u031e",
    "\u0327\u032e\u0334\u033d\u0343\u034b\u0351\u0359\u035f\u0367\u036d\u0375",
    "\u0384\u038e\u0392\u039b\u039d\u03a2\u03a5\u03ac\u03b6\u03b9\u03bb\u03c2",
    "\u03cd\u03d2\u03dc\u03ec\u03f4\u03fb\u0403\u040b\u0412\u041a\u0424\u0433",
    "\u0443\u0446\u0451\u045d\u046a\u0473\u0475\u047c\u0484\u048e\u0499\u049f",
    "\u04a7\u04af\u04b1\u04b6\u04bb\u04c1\u04c9\u04d5\u04db\u04e4\u04f3\u0500",
    "\u0508\u0511\u0519\u051f\u0527\u052f\u0537\u053d\u0545\u0550\u0557\u055f",
    "\u0567\u056d\u0575\u057c\u0584\u058e\u0592\u0598\u059b\u05a7\u05ad\u05b3",
    "\u05bf\u05c2\u05c9\u05cb\u05d1\u05d8\u05dc\u05e0\u05e3\u05ea\u05f2\u05f7",
    "\u0612\u0619\u061d\u0621\u0627\u062c\u0632\u063c\u0642\u0644\u0646\u064c",
    "\u0652\u065e\u0666\u0669\u0672\u067b\u0681\u0688\u068b\u068f\u0698\u069d",
    "\u06a1\u06ad\u06b3\u06b7\u06ba\u06c7\u06cd\u06d3\u06d7\u06d9\u06dd\u06e3",
    "\u06e9\u06f6\u06f9\u0700\u0708\u070f\u0712\u0716\u0718\u0722\u0725\u0732",
    "\u0735\u0740\u0744\u074e\u0751\u075a\u0762\u0767\u076d\u0775\u0779\u077d",
    "\u0782\u078a\u0796\u079b\u07a9\u07ae\u07b2\u07ba\u07bf\u07c1\u07c3\u07c9",
    "\u07ce\u07d2\u07da\u07df\u07e1\u07f1\u07f4\u07fc\u0805\u0809\u080f\u0815",
    "\u081c\u0822\u082c\u0835\u0838\u083a\u083e\u0844\u084d\u0853\u085e\u0864",
    "\u086d\u0876\u0879\u087c\u0884\u088a\u088c\u088e\u0895\u08a0\u08ab\u08af",
    "\u08b3\u08b7\u08bf\u08c4\u08c6\u08ca\u08d0\u08d4\u08e0\u08e3\u08eb\u08f5",
    "\u08f8\u08fd\u0904\u090a\u091f\u0924\u092a\u092c\u0934\u093f\u0946\u0954",
    "\u0958\u0961\u0964\u0970\u097e\u0984\u0988\u098c\u098e\u0995\u099b\u09a0",
    "\u09ad\u09bb\u09c9\u09d7\u09e9\u09f3\u09fe\u0a06\u0a0b\u0a10\u0a1a\u0a1f",
    "\u0a27\u0a2c\u0a32\u0a39\u0a4b\u0a51\u0a55\u0a58\u0a5b\u0a5f\u0a68\u0a6e",
    "\u0a74\u0a80\u0a83\u0a89\u0a8b\u0a96\u0a98\u0aa9\u0aab\u0ab2\u0ab8\u0abb",
    "\u0ac1\u0ac4\u0aca\u0acd\u0ad1\u0ad6\u0adc\u0ae0\u0ae6\u0aed\u0af6\u0b05",
    "\u0b0b\u0b0d\u0b13\u0b16\u0b1d\u0b20\u0b24\u0b2f\u0b3a\u0b4c\u0b53\u0b5c",
    "\u0b68\u0b6a\u0b7e\u0b80\u0b8a\u0b95\u0ba0\u0bb9\u0bc3\u0bc5\u0bcb\u0bd9",
    "\u0be1\u0bf3\u0bf9\u0bfb\u0bfd\u0c0d\u0c10\u0c17\u0c1a\u0c1e\u0c2e\u0c43",
    "\u0c52\u0c5c\u0c62\u0c65\u0c7a\u0c81\u0c8c\u0c90\u0c92\u0c96\u0ca7\u0cab",
    "\u0cad\u0cb7\u0cc5\u0cc8\u0cd4\u0cd7\u0cdb\u0cde\u0ce7\u0ceb\u0cee\u0cf2",
    "\u0cf7\u0cfc\u0d03\u0d10\u0d20\u0d23\u0d2b\u0d30\u0d34\u0d36\u0d46\u0d50",
    "\u0d57\u0d5e"].join("");
const atn = new antlr4_1.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4_1.default.dfa.DFA(ds, index));
const sharedContextCache = new antlr4_1.default.PredictionContextCache();
class languageParser extends genericAntlrParser_js_1.default {
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = languageParser.ruleNames;
        this.literalNames = languageParser.literalNames;
        this.symbolicNames = languageParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    start() {
        let localctx = new StartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, languageParser.RULE_start);
        localctx.source = this.createSource();
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 247;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.USING) {
                this.state = 244;
                this.usingDeclaration(localctx.source);
                this.state = 249;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 266;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.NAMESPACE:
                    this.state = 250;
                    this.namespaceDeclaration(localctx.source);
                    this.state = 255;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la === languageParser.FUNCTION || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
                        this.state = 253;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case languageParser.USING:
                                this.state = 251;
                                this.usingDeclaration(localctx.source);
                                break;
                            case languageParser.T__7:
                            case languageParser.ABSTRACT:
                            case languageParser.ACTION:
                            case languageParser.ANNOTATE:
                            case languageParser.ANNOTATION:
                            case languageParser.ASPECT:
                            case languageParser.CONTEXT:
                            case languageParser.DEFINE:
                            case languageParser.ENTITY:
                            case languageParser.EVENT:
                            case languageParser.EXTEND:
                            case languageParser.FUNCTION:
                            case languageParser.SERVICE:
                            case languageParser.TYPE:
                            case languageParser.VIEW:
                            case languageParser.HideAlternatives:
                                this.state = 252;
                                this.artifactDef(localctx.source);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 257;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case languageParser.T__7:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ASPECT:
                case languageParser.CONTEXT:
                case languageParser.DEFINE:
                case languageParser.ENTITY:
                case languageParser.EVENT:
                case languageParser.EXTEND:
                case languageParser.FUNCTION:
                case languageParser.SERVICE:
                case languageParser.TYPE:
                case languageParser.VIEW:
                case languageParser.HideAlternatives:
                    this.state = 258;
                    this.artifactDef(localctx.source);
                    this.state = 263;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la === languageParser.FUNCTION || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
                        this.state = 261;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case languageParser.USING:
                                this.state = 259;
                                this.usingDeclaration(localctx.source);
                                break;
                            case languageParser.T__7:
                            case languageParser.ABSTRACT:
                            case languageParser.ACTION:
                            case languageParser.ANNOTATE:
                            case languageParser.ANNOTATION:
                            case languageParser.ASPECT:
                            case languageParser.CONTEXT:
                            case languageParser.DEFINE:
                            case languageParser.ENTITY:
                            case languageParser.EVENT:
                            case languageParser.EXTEND:
                            case languageParser.FUNCTION:
                            case languageParser.SERVICE:
                            case languageParser.TYPE:
                            case languageParser.VIEW:
                            case languageParser.HideAlternatives:
                                this.state = 260;
                                this.artifactDef(localctx.source);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 265;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case languageParser.EOF:
                    break;
                default:
                    break;
            }
            this.state = 268;
            this.match(languageParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    queryEOF() {
        let localctx = new QueryEOFContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, languageParser.RULE_queryEOF);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 270;
            localctx.q = this.queryExpression();
            localctx.query = localctx.q.query;
            this.state = 272;
            this.match(languageParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditionEOF() {
        let localctx = new ConditionEOFContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, languageParser.RULE_conditionEOF);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 274;
            localctx.c = this.condition();
            localctx.cond = localctx.c.cond;
            this.state = 276;
            this.match(languageParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceDeclaration(source) {
        let localctx = new NamespaceDeclarationContext(this, this._ctx, this.state, source);
        this.enterRule(localctx, 6, languageParser.RULE_namespaceDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 278;
            this.match(languageParser.NAMESPACE);
            this.state = 279;
            this.simplePath(localctx.decl, 'Namespace');
            this.state = 280;
            this.match(languageParser.T__0);
            this._ctx.stop = this._input.LT(-1);
            localctx.source.namespace = this.attachLocation(localctx.decl);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    usingDeclaration(source) {
        let localctx = new UsingDeclarationContext(this, this._ctx, this.state, source);
        this.enterRule(localctx, 8, languageParser.RULE_usingDeclaration);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.decl.location = this.startLocation();
            this.state = 283;
            this.match(languageParser.USING);
            this.state = 320;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.FROM:
                    this.state = 284;
                    this.match(languageParser.FROM);
                    this.state = 285;
                    localctx.str = this.match(languageParser.String);
                    localctx.source.dependencies.push(this.quotedLiteral(localctx.str, 'string'));
                    break;
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.state = 287;
                    localctx.path = this.externalPath();
                    this.addItem(localctx.decl, localctx.source, 'usings', 'using');
                    ;
                    localctx.decl.extern = localctx.path.extern;
                    this.state = 294;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.AS:
                            this.state = 289;
                            this.match(languageParser.AS);
                            this.state = 290;
                            localctx.name = this.ident('Using');
                            localctx.decl.name = localctx.name.id;
                            break;
                        case languageParser.T__0:
                        case languageParser.FROM:
                            this.classifyImplicitName('Using');
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 299;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.FROM) {
                        this.state = 296;
                        this.match(languageParser.FROM);
                        this.state = 297;
                        localctx.str = this.match(languageParser.String);
                        localctx.source.dependencies.push(localctx.decl.fileDep = this.quotedLiteral(localctx.str, 'string'));
                    }
                    break;
                case languageParser.T__1:
                    this.addItem(localctx.decl, localctx.source, 'usings', 'using');
                    this.state = 302;
                    this.match(languageParser.T__1);
                    localctx.decl.usings = this.createArray();
                    this.state = 304;
                    this.innerUsing(localctx.decl);
                    this.state = 310;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 305;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore("}"))
                            break;
                        this.state = 307;
                        this.innerUsing(localctx.decl);
                        this.state = 312;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 313;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.decl.usings);
                    this.state = 318;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.FROM) {
                        this.state = 315;
                        this.match(languageParser.FROM);
                        this.state = 316;
                        localctx.str = this.match(languageParser.String);
                        localctx.source.dependencies.push(localctx.decl.fileDep = this.quotedLiteral(localctx.str, 'string'));
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 322;
            this.match(languageParser.T__0);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.decl);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    innerUsing(using) {
        let localctx = new InnerUsingContext(this, this._ctx, this.state, using);
        this.enterRule(localctx, 10, languageParser.RULE_innerUsing);
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.decl.location = this.startLocation();
            this.state = 325;
            localctx.path = this.externalPath();
            this.addItem(localctx.decl, localctx.using, 'usings', 'using');
            ;
            localctx.decl.extern = localctx.path.extern;
            this.state = 332;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.AS:
                    this.state = 327;
                    this.match(languageParser.AS);
                    this.state = 328;
                    localctx.name = this.ident('Using');
                    localctx.decl.name = localctx.name.id;
                    break;
                case languageParser.T__2:
                case languageParser.T__3:
                    this.classifyImplicitName('Using');
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.decl);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalPath() {
        let localctx = new ExternalPathContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, languageParser.RULE_externalPath);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 334;
            this.simplePath(localctx.extern, 'global');
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationAssignment_1(art) {
        let localctx = new AnnotationAssignment_1Context(this, this._ctx, this.state, art);
        this.enterRule(localctx, 14, languageParser.RULE_annotationAssignment_1);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 336;
            this.annotationPath(localctx.assignment.name, 'anno');
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__27) {
                this.state = 337;
                this.annotationPathVariant(localctx.assignment.name);
            }
            this.state = 343;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 340;
                this.match(languageParser.T__4);
                this.meltKeywordToIdentifier(true);
                this.state = 342;
                localctx.val = this.annoValue(localctx.assignment);
            }
            this._ctx.stop = this._input.LT(-1);
            this.assignAnnotation(localctx.art, localctx.assignment);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationAssignment_paren(art) {
        let localctx = new AnnotationAssignment_parenContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 16, languageParser.RULE_annotationAssignment_paren);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 345;
            this.match(languageParser.T__5);
            this.meltKeywordToIdentifier();
            if (this.isStraightBefore(')')) {
                this.warning('syntax-anno-useless', this.tokenLocation(this._input.LT(-2), this.getCurrentToken()), { code: '@()' }, 'Ignored useless $(CODE)');
                this.matchWildcard(); // we know it is the ')' - we do not reach the final match
                return localctx;
            }
            this.state = 347;
            this.annotationAssignment_1(localctx.art);
            this.state = 353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 348;
                this.match(languageParser.T__2);
                this.meltKeywordToIdentifier();
                if (this.isStraightBefore(')'))
                    break; // allow ',' before ')'
                this.state = 350;
                this.annotationAssignment_1(localctx.art);
                this.state = 355;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 356;
            this.match(languageParser.T__6);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationAssignment_fix(art) {
        let localctx = new AnnotationAssignment_fixContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 18, languageParser.RULE_annotationAssignment_fix);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 358;
            this.match(languageParser.T__7);
            this.state = 367;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 359;
                    this.annotationAssignment_paren(localctx.art);
                    break;
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    localctx.assignment = { name: {} };
                    this.state = 361;
                    this.annotationPath(localctx.assignment.name, 'anno');
                    this.state = 363;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__27) {
                        this.state = 362;
                        this.annotationPathVariant(localctx.assignment.name);
                    }
                    var t = this.getCurrentToken();
                    if (t.text === ':')
                        this.warning('syntax-anno-short', localctx.assignment.name.location, { code: '@(...)' }, 'Better use $(CODE) for annotation assignments here');
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.assignment) {
                this.assignAnnotation(localctx.art, localctx.assignment);
                this.docComment(localctx.art);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationAssignment_ll1(art) {
        let localctx = new AnnotationAssignment_ll1Context(this, this._ctx, this.state, art);
        this.enterRule(localctx, 20, languageParser.RULE_annotationAssignment_ll1);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 369;
            this.match(languageParser.T__7);
            this.state = 381;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 370;
                    this.annotationAssignment_paren(localctx.art);
                    break;
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    localctx.assignment = { name: {} };
                    this.state = 372;
                    this.annotationPath(localctx.assignment.name, 'anno');
                    this.state = 374;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__27) {
                        this.state = 373;
                        this.annotationPathVariant(localctx.assignment.name);
                    }
                    this.state = 379;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__4) {
                        this.state = 376;
                        this.match(languageParser.T__4);
                        this.meltKeywordToIdentifier(true);
                        this.state = 378;
                        localctx.val = this.annoValue(localctx.assignment);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.assignment) {
                this.assignAnnotation(localctx.art, localctx.assignment);
                this.docComment(localctx.art);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationAssignment_atn(art) {
        let localctx = new AnnotationAssignment_atnContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 22, languageParser.RULE_annotationAssignment_atn);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 383;
            this.match(languageParser.T__7);
            this.state = 415;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 384;
                    this.annotationAssignment_paren(localctx.art);
                    break;
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    localctx.assignment = { name: {} };
                    this.state = 386;
                    this.annotationPath(localctx.assignment.name, 'anno');
                    this.setLocalToken('#', 'HelperToken1', null, true);
                    this.state = 393;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.HelperToken1) {
                        this.state = 388;
                        this.match(languageParser.HelperToken1);
                        this.meltKeywordToIdentifier();
                        this.state = 390;
                        localctx.variant = this.ident('variant');
                        localctx.assignment.name.variant = localctx.variant.id;
                    }
                    this.setLocalToken(':', 'HelperToken2', null, true);
                    this.state = 413;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.HelperToken2) {
                        this.state = 396;
                        this.match(languageParser.HelperToken2);
                        this.meltKeywordToIdentifier(true);
                        this.state = 411;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case languageParser.T__1:
                            case languageParser.T__9:
                            case languageParser.T__10:
                            case languageParser.T__12:
                            case languageParser.T__27:
                            case languageParser.String:
                            case languageParser.QuotedLiteral:
                            case languageParser.Boolean:
                            case languageParser.NULL:
                            case languageParser.Number:
                                this.state = 398;
                                localctx.val = this.annoValueBase(localctx.assignment);
                                break;
                            case languageParser.T__7:
                            case languageParser.ABSTRACT:
                            case languageParser.ACTION:
                            case languageParser.ACTIONS:
                            case languageParser.AND:
                            case languageParser.ANNOTATE:
                            case languageParser.ANNOTATION:
                            case languageParser.ARRAY:
                            case languageParser.ASC:
                            case languageParser.ASPECT:
                            case languageParser.ASSOCIATION:
                            case languageParser.BETWEEN:
                            case languageParser.COLUMNS:
                            case languageParser.COMPOSITION:
                            case languageParser.CONTEXT:
                            case languageParser.CROSS:
                            case languageParser.CURRENT:
                            case languageParser.DEFAULT:
                            case languageParser.DEFINE:
                            case languageParser.DEFINITIONS:
                            case languageParser.DESC:
                            case languageParser.ELEMENT:
                            case languageParser.ELEMENTS:
                            case languageParser.ELSE:
                            case languageParser.END:
                            case languageParser.ENTITY:
                            case languageParser.ENUM:
                            case languageParser.EVENT:
                            case languageParser.ESCAPE:
                            case languageParser.EXACT:
                            case languageParser.EXCEPT:
                            case languageParser.EXCLUDING:
                            case languageParser.EXTEND:
                            case languageParser.FIRST:
                            case languageParser.FLOATING:
                            case languageParser.FOLLOWING:
                            case languageParser.FULL:
                            case languageParser.FUNCTION:
                            case languageParser.GROUP:
                            case languageParser.HAVING:
                            case languageParser.INNER:
                            case languageParser.INTERSECT:
                            case languageParser.INTO:
                            case languageParser.IS:
                            case languageParser.JOIN:
                            case languageParser.LAST:
                            case languageParser.LEFT:
                            case languageParser.LIKE:
                            case languageParser.LIMIT:
                            case languageParser.LOCALIZED:
                            case languageParser.MANY:
                            case languageParser.MASKED:
                            case languageParser.MINUS:
                            case languageParser.MIXIN:
                            case languageParser.NAMESPACE:
                            case languageParser.NULLS:
                            case languageParser.OFFSET:
                            case languageParser.ONE:
                            case languageParser.OR:
                            case languageParser.ORDER:
                            case languageParser.OUTER:
                            case languageParser.PARAMETERS:
                            case languageParser.PARTITION:
                            case languageParser.PRECEDING:
                            case languageParser.PROJECTION:
                            case languageParser.REDIRECTED:
                            case languageParser.RETURNS:
                            case languageParser.RIGHT:
                            case languageParser.ROW:
                            case languageParser.ROWS:
                            case languageParser.SERVICE:
                            case languageParser.THEN:
                            case languageParser.TO:
                            case languageParser.TYPE:
                            case languageParser.UNION:
                            case languageParser.UNBOUNDED:
                            case languageParser.UP:
                            case languageParser.USING:
                            case languageParser.VARIABLE:
                            case languageParser.VIEW:
                            case languageParser.Identifier:
                                this.state = 400;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === languageParser.T__7) {
                                    this.state = 399;
                                    localctx.at = this.match(languageParser.T__7);
                                }
                                this.state = 402;
                                this.annotationPath(localctx.assignment, 'ref', localctx.at);
                                this.setLocalToken('#', 'HelperToken1', null, true);
                                this.state = 409;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === languageParser.HelperToken1) {
                                    this.state = 404;
                                    this.match(languageParser.HelperToken1);
                                    this.meltKeywordToIdentifier();
                                    this.state = 406;
                                    localctx.variant = this.ident('variant');
                                    localctx.assignment.variant = localctx.variant.id;
                                }
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.assignment) {
                this.assignAnnotation(localctx.art, localctx.assignment);
                this.docComment(localctx.art);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    requiredSemi() {
        let localctx = new RequiredSemiContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, languageParser.RULE_requiredSemi);
        try {
            this.state = 420;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__0:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 417;
                    this.match(languageParser.T__0);
                    break;
                case languageParser.T__3:
                    this.enterOuterAlt(localctx, 2);
                    return localctx;
                    this.state = 419;
                    this.match(languageParser.T__3);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionalSemi() {
        let localctx = new OptionalSemiContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, languageParser.RULE_optionalSemi);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.noAssignmentInSameLine();
            this.state = 424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__0) {
                this.state = 423;
                this.match(languageParser.T__0);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    artifactDef(outer, defOnly) {
        let localctx = new ArtifactDefContext(this, this._ctx, this.state, outer, defOnly);
        this.enterRule(localctx, 28, languageParser.RULE_artifactDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            this.docComment(localctx.art);
            this.state = 430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 427;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 432;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 458;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ANNOTATION:
                case languageParser.ASPECT:
                case languageParser.CONTEXT:
                case languageParser.DEFINE:
                case languageParser.ENTITY:
                case languageParser.EVENT:
                case languageParser.FUNCTION:
                case languageParser.SERVICE:
                case languageParser.TYPE:
                case languageParser.VIEW:
                case languageParser.HideAlternatives:
                    this.state = 434;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.DEFINE) {
                        this.state = 433;
                        this.match(languageParser.DEFINE);
                    }
                    this.state = 444;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.CONTEXT:
                        case languageParser.SERVICE:
                            this.state = 436;
                            this.contextDef(localctx.art, localctx.outer, defOnly);
                            break;
                        case languageParser.ENTITY:
                            this.state = 437;
                            this.entityDef(localctx.art, localctx.outer);
                            break;
                        case languageParser.TYPE:
                            this.state = 438;
                            this.typeDef(localctx.art, localctx.outer);
                            break;
                        case languageParser.ABSTRACT:
                        case languageParser.ASPECT:
                        case languageParser.HideAlternatives:
                            this.state = 439;
                            this.aspectDef(localctx.art, localctx.outer);
                            break;
                        case languageParser.ANNOTATION:
                            this.state = 440;
                            this.annotationDef(localctx.art, localctx.outer);
                            break;
                        case languageParser.VIEW:
                            this.state = 441;
                            this.viewDef(localctx.art, localctx.outer);
                            break;
                        case languageParser.EVENT:
                            this.state = 442;
                            this.eventDef(localctx.art, localctx.outer);
                            break;
                        case languageParser.ACTION:
                        case languageParser.FUNCTION:
                            this.state = 443;
                            this.actionFunctionMainDef(localctx.art, localctx.outer);
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.EXTEND:
                    this.state = 446;
                    localctx.extend = this.match(languageParser.EXTEND);
                    if (defOnly)
                        this.error('syntax-extend-context', localctx.extend, { code: 'EXTEND artifact', kind: defOnly }, 'No $(CODE) within $(KIND) extensions');
                    if (!localctx.outer.extensions)
                        localctx.outer.extensions = [];
                    this.state = 453;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 448;
                            this.extendContext(localctx.art, localctx.outer);
                            break;
                        case 2:
                            this.state = 449;
                            this.extendEntity(localctx.art, localctx.outer);
                            break;
                        case 3:
                            this.state = 450;
                            this.extendProjection(localctx.art, localctx.outer);
                            break;
                        case 4:
                            this.state = 451;
                            this.extendType(localctx.art, localctx.outer);
                            break;
                        case 5:
                            this.state = 452;
                            this.extendArtifact(localctx.art, localctx.outer);
                            break;
                    }
                    break;
                case languageParser.ANNOTATE:
                    this.state = 455;
                    localctx.annotate = this.match(languageParser.ANNOTATE);
                    if (defOnly)
                        this.error('syntax-extend-context', localctx.annotate, { code: 'ANNOTATE artifact', kind: defOnly }, 'No $(CODE) within $(KIND) extensions');
                    if (!localctx.outer.extensions)
                        localctx.outer.extensions = [];
                    this.meltKeywordToIdentifier();
                    this.state = 457;
                    this.annotateArtifact(localctx.art, localctx.outer);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    contextDef(art, outer, defOnly) {
        let localctx = new ContextDefContext(this, this._ctx, this.state, art, outer, defOnly);
        this.enterRule(localctx, 30, languageParser.RULE_contextDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 462;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.CONTEXT:
                    this.state = 460;
                    this.match(languageParser.CONTEXT);
                    break;
                case languageParser.SERVICE:
                    this.state = 461;
                    localctx.service = this.match(languageParser.SERVICE);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 464;
            this.simplePath(localctx.name, localctx.service ? 'Service' : 'Context');
            this.addDef(localctx.art, localctx.outer, 'artifacts', localctx.service ? 'service' : 'context', localctx.name);
            this.docComment(localctx.art);
            this.state = 469;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 466;
                this.annotationAssignment_fix(localctx.art);
                this.state = 471;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 484;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 472;
                    this.match(languageParser.T__1);
                    localctx.art.artifacts = this.createDict();
                    localctx.art.extensions = [];
                    this.state = 477;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la === languageParser.FUNCTION || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
                        this.state = 474;
                        this.artifactDef(localctx.art, defOnly);
                        this.state = 479;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 480;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.artifacts);
                    this.state = 482;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 483;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendContext(art, outer) {
        let localctx = new ExtendContextContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 32, languageParser.RULE_extendContext);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 490;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.CONTEXT:
                    this.state = 486;
                    this.match(languageParser.CONTEXT);
                    localctx.art.expectedKind = 'context';
                    break;
                case languageParser.SERVICE:
                    this.state = 488;
                    localctx.service = this.match(languageParser.SERVICE);
                    localctx.art.expectedKind = 'service';
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 492;
            this.simplePath(localctx.name, localctx.service ? 'Service' : 'Context');
            localctx.art.name = localctx.name;
            this.addItem(localctx.art, localctx.outer, 'extensions', 'extend');
            this.state = 496;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.WITH) {
                this.state = 494;
                this.match(languageParser.WITH);
                this.noSemicolonHere();
            }
            this.docComment(localctx.art);
            this.state = 502;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 499;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 504;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 517;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 505;
                    this.match(languageParser.T__1);
                    localctx.art.artifacts = this.createDict();
                    this.state = 510;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la === languageParser.FUNCTION || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
                        this.state = 507;
                        this.artifactDef(localctx.art, localctx.service ? 'SERVICE' : 'CONTEXT');
                        this.state = 512;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 513;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.artifacts);
                    this.state = 515;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 516;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    entityDef(art, outer) {
        let localctx = new EntityDefContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 34, languageParser.RULE_entityDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 519;
            this.match(languageParser.ENTITY);
            this.state = 520;
            this.simplePath(localctx.name, 'Entity');
            this.addDef(localctx.art, localctx.outer, 'artifacts', 'entity', localctx.name);
            this.docComment(localctx.art);
            this.state = 525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 522;
                this.annotationAssignment_fix(localctx.art);
                this.state = 527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 529;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__5) {
                this.state = 528;
                this.parameterListDef(localctx.art);
            }
            this.state = 605;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.T__4:
                    this.state = 541;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__4) {
                        this.state = 531;
                        this.match(languageParser.T__4);
                        this.state = 532;
                        this.includeRef(localctx.art);
                        this.state = 538;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__2) {
                            this.state = 533;
                            this.match(languageParser.T__2);
                            if (this.isStraightBefore('{'))
                                break;
                            this.state = 535;
                            this.includeRef(localctx.art);
                            this.state = 540;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 543;
                    this.match(languageParser.T__1);
                    localctx.art.elements = this.createDict();
                    this.state = 548;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                        this.state = 545;
                        this.elementDef(localctx.art);
                        this.state = 550;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 551;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.elements);
                    this.state = 564;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ACTIONS) {
                        this.state = 553;
                        this.match(languageParser.ACTIONS);
                        this.state = 554;
                        this.match(languageParser.T__1);
                        localctx.art.actions = this.createDict();
                        this.state = 559;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                            this.state = 556;
                            this.actionFunctionDef(localctx.art);
                            this.state = 561;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 562;
                        this.match(languageParser.T__3);
                        this.finalizeDictOrArray(localctx.art.actions);
                    }
                    this.state = 566;
                    this.optionalSemi();
                    break;
                case languageParser.AS:
                    this.state = 567;
                    this.match(languageParser.AS);
                    this.state = 603;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__5:
                        case languageParser.SELECT:
                            this.state = 568;
                            localctx.qe = this.queryExpression();
                            localctx.art.query = localctx.qe.query;
                            localctx.art['$' + 'syntax'] = 'entity';
                            this.state = 583;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.ACTIONS:
                                    this.state = 570;
                                    this.match(languageParser.ACTIONS);
                                    this.state = 571;
                                    this.match(languageParser.T__1);
                                    localctx.art.actions = this.createDict();
                                    this.state = 576;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                                        this.state = 573;
                                        this.actionFunctionDef(localctx.art);
                                        this.state = 578;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 579;
                                    this.match(languageParser.T__3);
                                    this.finalizeDictOrArray(localctx.art.actions);
                                    this.state = 581;
                                    this.optionalSemi();
                                    break;
                                case languageParser.T__0:
                                case languageParser.T__3:
                                    this.state = 582;
                                    this.requiredSemi();
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            break;
                        case languageParser.PROJECTION:
                            this.state = 585;
                            localctx.qp = this.projectionSpec();
                            localctx.art.query = localctx.qp.query;
                            localctx.art['$' + 'syntax'] = 'projection';
                            this.state = 587;
                            this.projectionClauses(localctx.qp.query);
                            this.state = 599;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.ACTIONS) {
                                this.state = 588;
                                this.match(languageParser.ACTIONS);
                                this.state = 589;
                                this.match(languageParser.T__1);
                                localctx.art.actions = this.createDict();
                                this.state = 594;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                                    this.state = 591;
                                    this.actionFunctionDef(localctx.art);
                                    this.state = 596;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 597;
                                this.match(languageParser.T__3);
                                this.finalizeDictOrArray(localctx.art.actions);
                            }
                            this.state = 601;
                            this.optionalSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    projectionSpec() {
        let localctx = new ProjectionSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, languageParser.RULE_projectionSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 607;
            localctx.proj = this.match(languageParser.PROJECTION);
            this.state = 608;
            this.match(languageParser.ON);
            localctx.src = { path: [], scope: 0 };
            localctx.query = { op: this.valueWithTokenLocation('SELECT', localctx.proj), from: localctx.src, location: this.startLocation() };
            this.state = 610;
            this.fromPath(localctx.src, 'artref');
            this.state = 614;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 611;
                this.match(languageParser.T__4);
                localctx.src.scope = localctx.src.path.length;
                this.state = 613;
                this.fromPath(localctx.src, 'ref');
            }
            this.state = 620;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.AS) {
                this.state = 616;
                this.match(languageParser.AS);
                this.state = 617;
                localctx.aliasName = this.ident('FromAlias');
                localctx.src.name = localctx.aliasName.id;
            }
            if (!localctx.src.name)
                this.classifyImplicitName(localctx.src.scope ? 'FromAlias' : 'Without');
            this.state = 624;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__1) {
                this.state = 623;
                this.bracedSelectItemListDef(localctx.query, 'columns');
            }
            this.state = 627;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.EXCLUDING) {
                this.state = 626;
                this.excludingClause(localctx.query);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.query);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    projectionClauses(query) {
        let localctx = new ProjectionClausesContext(this, this._ctx, this.state, query);
        this.enterRule(localctx, 38, languageParser.RULE_projectionClauses);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 633;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.WHERE) {
                this.state = 629;
                this.match(languageParser.WHERE);
                this.state = 630;
                localctx.cond = this.condition();
                localctx.query.where = localctx.cond.cond;
            }
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.GROUP) {
                this.state = 635;
                this.match(languageParser.GROUP);
                this.state = 636;
                this.match(languageParser.BY);
                this.state = 637;
                localctx.e1 = this.expression();
                localctx.query.groupBy = [localctx.e1.expr];
                this.state = 645;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === languageParser.T__2) {
                    this.state = 639;
                    this.match(languageParser.T__2);
                    this.state = 640;
                    localctx.en = this.expression();
                    localctx.query.groupBy.push(localctx.en.expr);
                    this.state = 647;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.HAVING) {
                this.state = 650;
                this.match(languageParser.HAVING);
                this.state = 651;
                localctx.having = this.condition();
                localctx.query.having = localctx.having.cond;
            }
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.ORDER) {
                this.state = 656;
                localctx.ob = this.orderByClause(localctx.query);
                localctx.query = localctx.ob.query;
            }
            this.state = 664;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.LIMIT) {
                this.state = 661;
                localctx.lc = this.limitClause(localctx.query);
                localctx.query = localctx.lc.query;
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.query);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    excludingClause(query) {
        let localctx = new ExcludingClauseContext(this, this._ctx, this.state, query);
        this.enterRule(localctx, 40, languageParser.RULE_excludingClause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 666;
            this.match(languageParser.EXCLUDING);
            this.state = 667;
            this.match(languageParser.T__1);
            localctx.query.excludingDict = this.createDict();
            this.state = 669;
            this.projectionExclusion(localctx.query);
            this.state = 675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 670;
                this.match(languageParser.T__2);
                if (this.isStraightBefore("}"))
                    break;
                this.state = 672;
                this.projectionExclusion(localctx.query);
                this.state = 677;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 678;
            this.match(languageParser.T__3);
            this.finalizeDictOrArray(localctx.query.excludingDict);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    projectionExclusion(outer) {
        let localctx = new ProjectionExclusionContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 42, languageParser.RULE_projectionExclusion);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 681;
            localctx.name = this.ident('ref');
            this.addDef(localctx.art, localctx.outer, 'excludingDict', '', localctx.name.id);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendEntity(art, outer) {
        let localctx = new ExtendEntityContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 44, languageParser.RULE_extendEntity);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 684;
            localctx.kind = this._input.LT(1);
            _la = this._input.LA(1);
            if (!(_la === languageParser.ASPECT || _la === languageParser.ENTITY)) {
                localctx.kind = this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 685;
            this.simplePath(localctx.name, 'Extend');
            localctx.art.expectedKind = (localctx.kind === null ? null : localctx.kind.text).toLowerCase();
            localctx.art.name = localctx.name;
            this.addItem(localctx.art, localctx.outer, 'extensions', 'extend');
            this.state = 716;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.WITH:
                    this.state = 687;
                    this.match(languageParser.WITH);
                    this.noSemicolonHere();
                    this.docComment(localctx.art);
                    this.state = 692;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 689;
                        this.annotationAssignment_ll1(localctx.art);
                        this.state = 694;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 706;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 695;
                            this.includeRef(localctx.art);
                            this.state = 700;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__2) {
                                this.state = 696;
                                this.match(languageParser.T__2);
                                this.state = 697;
                                this.includeRef(localctx.art);
                                this.state = 702;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 703;
                            this.requiredSemi();
                            break;
                        case 2:
                            this.state = 705;
                            this.extendForEntity(localctx.art);
                            break;
                    }
                    break;
                case languageParser.T__0:
                case languageParser.T__1:
                case languageParser.T__3:
                case languageParser.T__7:
                case languageParser.ACTIONS:
                    this.docComment(localctx.art);
                    this.state = 712;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 709;
                        this.annotationAssignment_ll1(localctx.art);
                        this.state = 714;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 715;
                    this.extendForEntity(localctx.art);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */ this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendForEntity(art) {
        let localctx = new ExtendForEntityContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 46, languageParser.RULE_extendForEntity);
        var _la = 0; // Token type
        try {
            this.state = 755;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 718;
                    this.match(languageParser.T__1);
                    localctx.art.elements = this.createDict();
                    this.state = 723;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                        this.state = 720;
                        this.elementDefOrExtend(localctx.art);
                        this.state = 725;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 726;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.elements);
                    this.state = 739;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ACTIONS) {
                        this.state = 728;
                        this.match(languageParser.ACTIONS);
                        this.state = 729;
                        this.match(languageParser.T__1);
                        localctx.art.actions = this.createDict();
                        this.state = 734;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                            this.state = 731;
                            this.actionFunctionDef(localctx.art);
                            this.state = 736;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 737;
                        this.match(languageParser.T__3);
                        this.finalizeDictOrArray(localctx.art.actions);
                    }
                    this.state = 741;
                    this.optionalSemi();
                    break;
                case languageParser.ACTIONS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 742;
                    this.match(languageParser.ACTIONS);
                    this.state = 743;
                    this.match(languageParser.T__1);
                    localctx.art.actions = this.createDict();
                    this.state = 748;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                        this.state = 745;
                        this.actionFunctionDef(localctx.art);
                        this.state = 750;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 751;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.actions);
                    this.state = 753;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 754;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendProjection(art, outer) {
        let localctx = new ExtendProjectionContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 48, languageParser.RULE_extendProjection);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 757;
            localctx.expected = this.match(languageParser.PROJECTION);
            this.state = 758;
            this.simplePath(localctx.name, 'Extend');
            localctx.art.expectedKind = 'entity';
            localctx.art.name = localctx.name;
            this.addItem(localctx.art, localctx.outer, 'extensions', 'extend');
            this.state = 762;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.WITH) {
                this.state = 760;
                this.match(languageParser.WITH);
                this.noSemicolonHere();
            }
            this.docComment(localctx.art);
            this.state = 768;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 765;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 770;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 812;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 771;
                    this.match(languageParser.T__1);
                    localctx.art.columns = [];
                    this.state = 782;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__11) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.GROUP - 97)) | (1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)))) !== 0)) {
                        this.state = 773;
                        this.selectItemDef(localctx.art.columns);
                        this.state = 779;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__2) {
                            this.state = 774;
                            this.match(languageParser.T__2);
                            if (this.isStraightBefore("}"))
                                break;
                            this.state = 776;
                            this.selectItemDef(localctx.art.columns);
                            this.state = 781;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 784;
                    this.match(languageParser.T__3);
                    this.state = 796;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ACTIONS) {
                        this.state = 785;
                        this.match(languageParser.ACTIONS);
                        this.state = 786;
                        this.match(languageParser.T__1);
                        localctx.art.actions = this.createDict();
                        this.state = 791;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                            this.state = 788;
                            this.actionFunctionDef(localctx.art);
                            this.state = 793;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 794;
                        this.match(languageParser.T__3);
                        this.finalizeDictOrArray(localctx.art.actions);
                    }
                    this.state = 798;
                    this.optionalSemi();
                    break;
                case languageParser.ACTIONS:
                    this.state = 799;
                    this.match(languageParser.ACTIONS);
                    this.state = 800;
                    this.match(languageParser.T__1);
                    localctx.art.actions = this.createDict();
                    this.state = 805;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                        this.state = 802;
                        this.actionFunctionDef(localctx.art);
                        this.state = 807;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 808;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.actions);
                    this.state = 810;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 811;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actionFunctionDef(outer) {
        let localctx = new ActionFunctionDefContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 50, languageParser.RULE_actionFunctionDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            ;
            this.docComment(localctx.art);
            this.state = 818;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 815;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 820;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 847;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ACTION:
                    this.state = 821;
                    this.match(languageParser.ACTION);
                    this.state = 822;
                    localctx.name = this.ident('BoundAction');
                    this.addDef(localctx.art, localctx.outer, 'actions', 'action', localctx.name.id);
                    this.docComment(localctx.art);
                    this.state = 827;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 824;
                        this.annotationAssignment_fix(localctx.art);
                        this.state = 829;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 830;
                    this.parameterListDef(localctx.art);
                    this.state = 833;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.RETURNS:
                            this.state = 831;
                            this.returnTypeSpec(localctx.art);
                            break;
                        case languageParser.T__0:
                        case languageParser.T__3:
                            this.state = 832;
                            this.requiredSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.FUNCTION:
                    this.state = 835;
                    this.match(languageParser.FUNCTION);
                    this.state = 836;
                    localctx.name = this.ident('BoundAction');
                    this.addDef(localctx.art, localctx.outer, 'actions', 'function', localctx.name.id);
                    this.docComment(localctx.art);
                    this.state = 841;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 838;
                        this.annotationAssignment_fix(localctx.art);
                        this.state = 843;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 844;
                    this.parameterListDef(localctx.art);
                    this.state = 845;
                    this.returnTypeSpec(localctx.art);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actionFunctionMainDef(art, outer) {
        let localctx = new ActionFunctionMainDefContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 52, languageParser.RULE_actionFunctionMainDef);
        var _la = 0; // Token type
        try {
            this.state = 875;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ACTION:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 849;
                    this.match(languageParser.ACTION);
                    this.state = 850;
                    this.simplePath(localctx.name, 'Action');
                    this.addDef(localctx.art, localctx.outer, 'artifacts', 'action', localctx.name);
                    this.docComment(localctx.art);
                    this.state = 855;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 852;
                        this.annotationAssignment_fix(localctx.art);
                        this.state = 857;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 858;
                    this.parameterListDef(localctx.art);
                    this.state = 861;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.RETURNS:
                            this.state = 859;
                            this.returnTypeSpec(localctx.art);
                            break;
                        case languageParser.T__0:
                        case languageParser.T__3:
                            this.state = 860;
                            this.requiredSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.FUNCTION:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 863;
                    this.match(languageParser.FUNCTION);
                    this.state = 864;
                    this.simplePath(localctx.name, 'Action');
                    this.addDef(localctx.art, localctx.outer, 'artifacts', 'function', localctx.name);
                    this.docComment(localctx.art);
                    this.state = 869;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 866;
                        this.annotationAssignment_fix(localctx.art);
                        this.state = 871;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 872;
                    this.parameterListDef(localctx.art);
                    this.state = 873;
                    this.returnTypeSpec(localctx.art);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eventDef(art, outer) {
        let localctx = new EventDefContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 54, languageParser.RULE_eventDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 877;
            this.match(languageParser.EVENT);
            this.state = 878;
            this.simplePath(localctx.name, 'Event');
            this.addDef(localctx.art, localctx.outer, 'artifacts', 'event', localctx.name);
            this.docComment(localctx.art);
            this.state = 883;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 880;
                this.annotationAssignment_fix(localctx.art);
                this.state = 885;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 923;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 886;
                    this.typeStruct(localctx.art);
                    this.state = 887;
                    this.optionalSemi();
                    break;
                case languageParser.T__4:
                    this.state = 889;
                    this.match(languageParser.T__4);
                    this.state = 921;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
                    switch (la_) {
                        case 1:
                            localctx.art.type = {};
                            this.state = 891;
                            this.simplePath(localctx.art.type, 'artref');
                            this.state = 912;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.T__1:
                                case languageParser.T__2:
                                    localctx.art.includes = [localctx.art.type];
                                    delete localctx.art.type;
                                    this.state = 898;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__2) {
                                        this.state = 893;
                                        this.match(languageParser.T__2);
                                        if (this.isStraightBefore('{'))
                                            break;
                                        this.state = 895;
                                        this.includeRef(localctx.art);
                                        this.state = 900;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 901;
                                    this.typeStruct(localctx.art);
                                    this.state = 902;
                                    this.optionalSemi();
                                    break;
                                case languageParser.T__0:
                                case languageParser.T__3:
                                case languageParser.T__7:
                                    this.docComment(localctx.art);
                                    this.state = 908;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7) {
                                        this.state = 905;
                                        this.annotationAssignment_ll1(localctx.art);
                                        this.state = 910;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 911;
                                    this.requiredSemi();
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            break;
                        case 2:
                            this.state = 914;
                            this.typeStruct(localctx.art);
                            this.state = 915;
                            this.optionalSemi();
                            break;
                        case 3:
                            this.state = 917;
                            localctx.qp = this.projectionSpec();
                            localctx.art.query = localctx.qp.query;
                            localctx.art['$' + 'syntax'] = 'projection';
                            this.state = 919;
                            this.optionalSemi();
                            break;
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */ this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    aspectDef(art, outer) {
        let localctx = new AspectDefContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 56, languageParser.RULE_aspectDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 931;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ASPECT:
                    this.state = 925;
                    this.match(languageParser.ASPECT);
                    break;
                case languageParser.ABSTRACT:
                case languageParser.HideAlternatives:
                    this.state = 928;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.ABSTRACT:
                            this.state = 926;
                            localctx.abs = this.match(languageParser.ABSTRACT);
                            break;
                        case languageParser.HideAlternatives:
                            this.state = 927;
                            this.match(languageParser.HideAlternatives);
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 930;
                    localctx.ent = this.match(languageParser.ENTITY);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 933;
            this.simplePath(localctx.name, 'Type');
            this.addDef(localctx.art, localctx.outer, 'artifacts', 'aspect', localctx.name);
            // backends do not like ['$'+'syntax']: (localctx.ent ? 'entity' : 'aspect')
            if (localctx.ent)
                this.warning('syntax-deprecated-abstract', this.tokenLocation(localctx.abs, localctx.ent), {}, 'Abstract entity definitions are deprecated; use aspect definitions instead');
            this.docComment(localctx.art);
            this.state = 938;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 935;
                this.annotationAssignment_fix(localctx.art);
                this.state = 940;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 953;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 941;
                this.match(languageParser.T__4);
                this.state = 951;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                    this.state = 942;
                    this.includeRef(localctx.art);
                    this.state = 948;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 943;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore('{'))
                            break;
                        this.state = 945;
                        this.includeRef(localctx.art);
                        this.state = 950;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }
            }
            this.state = 955;
            this.match(languageParser.T__1);
            localctx.art.elements = this.createDict();
            this.state = 960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                this.state = 957;
                this.elementDef(localctx.art);
                this.state = 962;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 963;
            this.match(languageParser.T__3);
            this.finalizeDictOrArray(localctx.art.elements);
            this.state = 976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.ACTIONS) {
                this.state = 965;
                this.match(languageParser.ACTIONS);
                this.state = 966;
                this.match(languageParser.T__1);
                localctx.art.actions = this.createDict();
                this.state = 971;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                    this.state = 968;
                    this.actionFunctionDef(localctx.art);
                    this.state = 973;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 974;
                this.match(languageParser.T__3);
                this.finalizeDictOrArray(localctx.art.actions);
            }
            this.state = 978;
            this.optionalSemi();
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeDef(art, outer) {
        let localctx = new TypeDefContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 58, languageParser.RULE_typeDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 980;
            this.match(languageParser.TYPE);
            this.state = 981;
            this.simplePath(localctx.name, 'Type');
            this.addDef(localctx.art, localctx.outer, 'artifacts', 'type', localctx.name);
            this.docComment(localctx.art);
            this.state = 986;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 983;
                this.annotationAssignment_fix(localctx.art);
                this.state = 988;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 989;
            this.typeSpecSemi(localctx.art);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendType(art, outer) {
        let localctx = new ExtendTypeContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 60, languageParser.RULE_extendType);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 991;
            this.match(languageParser.TYPE);
            this.state = 992;
            this.simplePath(localctx.name, 'Extend');
            localctx.art.expectedKind = 'type';
            localctx.art.name = localctx.name;
            this.addItem(localctx.art, localctx.outer, 'extensions', 'extend');
            this.state = 994;
            this.extendWithOptElementsOrType(localctx.art, localctx.art);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationDef(art, outer) {
        let localctx = new AnnotationDefContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 62, languageParser.RULE_annotationDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 996;
            localctx.annotation = this.match(languageParser.ANNOTATION);
            this.state = 997;
            this.simplePath(localctx.name, 'AnnoDef');
            if (localctx.outer.kind !== 'source') { // this is a syntax restriction to avoid confusion
                this.error('syntax-unexpected-vocabulary', localctx.annotation, { '#': localctx.outer.kind });
                localctx.art = {};
            }
            else {
                if (!localctx.outer.vocabularies)
                    localctx.outer.vocabularies = Object.create(null);
                this.addDef(localctx.art, localctx.outer, 'vocabularies', 'annotation', localctx.name);
            }
            this.docComment(localctx.art);
            this.state = 1002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 999;
                this.annotationAssignment_fix(localctx.art);
                this.state = 1004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1005;
            this.typeSpecSemi(localctx.art);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendArtifact(art, outer) {
        let localctx = new ExtendArtifactContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 64, languageParser.RULE_extendArtifact);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1007;
            this.simplePath(localctx.name, 'Extend');
            this.state = 1010;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 1008;
                this.match(languageParser.T__4);
                this.state = 1009;
                this.simplePath(localctx.elemName, 'Element');
            }
            this.addExtension(localctx.art, localctx.outer, 'extend', localctx.name, localctx.elemName.path);
            this.state = 1139;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__0:
                case languageParser.T__1:
                case languageParser.T__3:
                case languageParser.T__7:
                    this.docComment(localctx.art);
                    this.state = 1017;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 1014;
                        this.annotationAssignment_ll1(localctx.art);
                        this.state = 1019;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1033;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__1:
                            this.state = 1020;
                            this.match(languageParser.T__1);
                            localctx.art.elements = this.createDict();
                            this.state = 1025;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                                this.state = 1022;
                                this.elementDefOrExtend(localctx.art);
                                this.state = 1027;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1028;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.elements);
                            this.checkExtensionDict(localctx.art.elements);
                            this.state = 1031;
                            this.optionalSemi();
                            break;
                        case languageParser.T__0:
                        case languageParser.T__3:
                            this.state = 1032;
                            this.requiredSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.WITH:
                    this.state = 1035;
                    this.match(languageParser.WITH);
                    this.noSemicolonHere();
                    this.docComment(localctx.art);
                    this.state = 1040;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 1037;
                        this.annotationAssignment_ll1(localctx.art);
                        this.state = 1042;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1137;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 123, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1043;
                            this.includeRef(localctx.art);
                            this.state = 1048;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__2) {
                                this.state = 1044;
                                this.match(languageParser.T__2);
                                this.state = 1045;
                                this.includeRef(localctx.art);
                                this.state = 1050;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1051;
                            this.requiredSemi();
                            break;
                        case 2:
                            this.state = 1053;
                            this.match(languageParser.T__1);
                            localctx.art.elements = this.createDict();
                            this.state = 1058;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                                this.state = 1055;
                                this.elementDefOrExtend(localctx.art);
                                this.state = 1060;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1061;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.elements);
                            this.checkExtensionDict(localctx.art.elements);
                            this.state = 1064;
                            this.optionalSemi();
                            break;
                        case 3:
                            this.state = 1065;
                            this.requiredSemi();
                            break;
                        case 4:
                            this.disallowElementExtension(localctx.elemName, localctx.outer, 'definitions');
                            this.state = 1067;
                            this.match(languageParser.DEFINITIONS);
                            this.state = 1068;
                            this.match(languageParser.T__1);
                            localctx.art.artifacts = this.createDict();
                            this.state = 1073;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || _la === languageParser.FUNCTION || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.HideAlternatives - 129)))) !== 0)) {
                                this.state = 1070;
                                this.artifactDef(localctx.art, true);
                                this.state = 1075;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1076;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.artifacts);
                            this.state = 1078;
                            this.optionalSemi();
                            break;
                        case 5:
                            this.disallowElementExtension(localctx.elemName, localctx.outer, 'columns');
                            this.state = 1080;
                            this.match(languageParser.COLUMNS);
                            this.state = 1081;
                            this.match(languageParser.T__1);
                            localctx.art.columns = [];
                            this.state = 1092;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__11) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.GROUP - 97)) | (1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)))) !== 0)) {
                                this.state = 1083;
                                this.selectItemDef(localctx.art.columns);
                                this.state = 1089;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === languageParser.T__2) {
                                    this.state = 1084;
                                    this.match(languageParser.T__2);
                                    if (this.isStraightBefore("}"))
                                        break;
                                    this.state = 1086;
                                    this.selectItemDef(localctx.art.columns);
                                    this.state = 1091;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                            this.state = 1094;
                            this.match(languageParser.T__3);
                            this.state = 1095;
                            this.optionalSemi();
                            break;
                        case 6:
                            this.disallowElementExtension(localctx.elemName, localctx.outer, 'actions');
                            this.state = 1097;
                            this.match(languageParser.ACTIONS);
                            this.state = 1098;
                            this.match(languageParser.T__1);
                            localctx.art.actions = this.createDict();
                            this.state = 1103;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || _la === languageParser.ACTION || _la === languageParser.FUNCTION) {
                                this.state = 1100;
                                this.actionFunctionDef(localctx.art);
                                this.state = 1105;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1106;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.actions);
                            this.state = 1108;
                            this.optionalSemi();
                            break;
                        case 7:
                            this.state = 1109;
                            this.match(languageParser.ELEMENTS);
                            this.state = 1110;
                            this.match(languageParser.T__1);
                            localctx.art.elements = this.createDict();
                            this.state = 1115;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                                this.state = 1112;
                                this.elementDefOrExtend(localctx.art);
                                this.state = 1117;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1118;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.elements);
                            this.checkExtensionDict(localctx.art.elements);
                            this.state = 1121;
                            this.optionalSemi();
                            break;
                        case 8:
                            this.state = 1122;
                            this.match(languageParser.ENUM);
                            this.state = 1123;
                            this.match(languageParser.T__1);
                            localctx.art.enum = this.createDict();
                            this.state = 1128;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                this.state = 1125;
                                this.enumSymbolDef(localctx.art);
                                this.state = 1130;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1131;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.enum);
                            this.state = 1133;
                            this.optionalSemi();
                            break;
                        case 9:
                            this.state = 1134;
                            this.typeNamedArgList(localctx.art);
                            this.state = 1135;
                            this.requiredSemi();
                            break;
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */ this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendWithOptElementsOrType(art) {
        let localctx = new ExtendWithOptElementsOrTypeContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 66, languageParser.RULE_extendWithOptElementsOrType);
        var _la = 0; // Token type
        try {
            this.state = 1199;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.WITH:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1141;
                    this.match(languageParser.WITH);
                    this.noSemicolonHere();
                    this.docComment(localctx.art);
                    this.state = 1146;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 1143;
                        this.annotationAssignment_ll1(localctx.art);
                        this.state = 1148;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1175;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ARRAY:
                        case languageParser.ASC:
                        case languageParser.ASPECT:
                        case languageParser.ASSOCIATION:
                        case languageParser.BETWEEN:
                        case languageParser.COLUMNS:
                        case languageParser.COMPOSITION:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.CURRENT:
                        case languageParser.DEFAULT:
                        case languageParser.DEFINE:
                        case languageParser.DEFINITIONS:
                        case languageParser.DESC:
                        case languageParser.ELEMENT:
                        case languageParser.ELEMENTS:
                        case languageParser.ELSE:
                        case languageParser.END:
                        case languageParser.ENTITY:
                        case languageParser.ENUM:
                        case languageParser.EVENT:
                        case languageParser.ESCAPE:
                        case languageParser.EXACT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FIRST:
                        case languageParser.FLOATING:
                        case languageParser.FOLLOWING:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.INTO:
                        case languageParser.IS:
                        case languageParser.JOIN:
                        case languageParser.LAST:
                        case languageParser.LEFT:
                        case languageParser.LIKE:
                        case languageParser.LIMIT:
                        case languageParser.LOCALIZED:
                        case languageParser.MANY:
                        case languageParser.MASKED:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.NAMESPACE:
                        case languageParser.NULLS:
                        case languageParser.OFFSET:
                        case languageParser.ONE:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.OUTER:
                        case languageParser.PARAMETERS:
                        case languageParser.PARTITION:
                        case languageParser.PRECEDING:
                        case languageParser.PROJECTION:
                        case languageParser.REDIRECTED:
                        case languageParser.RETURNS:
                        case languageParser.RIGHT:
                        case languageParser.ROW:
                        case languageParser.ROWS:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TO:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.UNBOUNDED:
                        case languageParser.UP:
                        case languageParser.USING:
                        case languageParser.VARIABLE:
                        case languageParser.VIEW:
                        case languageParser.Identifier:
                            this.state = 1149;
                            this.includeRef(localctx.art);
                            this.state = 1154;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__2) {
                                this.state = 1150;
                                this.match(languageParser.T__2);
                                this.state = 1151;
                                this.includeRef(localctx.art);
                                this.state = 1156;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1157;
                            this.requiredSemi();
                            break;
                        case languageParser.T__1:
                            this.state = 1159;
                            this.match(languageParser.T__1);
                            localctx.art.elements = this.createDict();
                            this.state = 1164;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                                this.state = 1161;
                                this.elementDefOrExtend(localctx.art);
                                this.state = 1166;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1167;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.elements);
                            this.checkExtensionDict(localctx.art.elements);
                            this.state = 1170;
                            this.optionalSemi();
                            break;
                        case languageParser.T__5:
                            this.state = 1171;
                            this.typeNamedArgList(localctx.art);
                            this.state = 1172;
                            this.requiredSemi();
                            break;
                        case languageParser.T__0:
                        case languageParser.T__3:
                            this.state = 1174;
                            this.requiredSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__0:
                case languageParser.T__1:
                case languageParser.T__3:
                case languageParser.T__7:
                    this.enterOuterAlt(localctx, 2);
                    this.docComment(localctx.art);
                    this.state = 1181;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 1178;
                        this.annotationAssignment_ll1(localctx.art);
                        this.state = 1183;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1197;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__1:
                            this.state = 1184;
                            this.match(languageParser.T__1);
                            localctx.art.elements = this.createDict();
                            this.state = 1189;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                                this.state = 1186;
                                this.elementDefOrExtend(localctx.art);
                                this.state = 1191;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1192;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.elements);
                            this.checkExtensionDict(localctx.art.elements);
                            this.state = 1195;
                            this.optionalSemi();
                            break;
                        case languageParser.T__0:
                        case languageParser.T__3:
                            this.state = 1196;
                            this.requiredSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotateArtifact(art, outer) {
        let localctx = new AnnotateArtifactContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 68, languageParser.RULE_annotateArtifact);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1201;
            this.simplePath(localctx.name, 'Annotate');
            this.state = 1204;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 1202;
                this.match(languageParser.T__4);
                this.state = 1203;
                this.simplePath(localctx.elemName, 'Element');
            }
            this.addExtension(localctx.art, localctx.outer, 'annotate', localctx.name, localctx.elemName.path);
            this.state = 1209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.WITH) {
                this.state = 1207;
                this.match(languageParser.WITH);
                this.noSemicolonHere();
            }
            this.docComment(localctx.art);
            this.state = 1215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1212;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1217;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1303;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 1218;
                    this.match(languageParser.T__1);
                    localctx.art.elements = this.createDict();
                    this.state = 1223;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                        this.state = 1220;
                        this.annotateElement(localctx.art);
                        this.state = 1225;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1226;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.elements);
                    this.checkExtensionDict(localctx.art.elements);
                    this.state = 1241;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ACTIONS) {
                        this.state = 1229;
                        this.match(languageParser.ACTIONS);
                        this.state = 1230;
                        this.match(languageParser.T__1);
                        localctx.art.actions = this.createDict();
                        this.state = 1235;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                            this.state = 1232;
                            this.annotateAction(localctx.art);
                            this.state = 1237;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 1238;
                        this.match(languageParser.T__3);
                        this.finalizeDictOrArray(localctx.art.actions);
                        this.checkExtensionDict(localctx.art.actions);
                    }
                    this.state = 1243;
                    this.optionalSemi();
                    break;
                case languageParser.ACTIONS:
                    this.state = 1244;
                    this.match(languageParser.ACTIONS);
                    this.state = 1245;
                    this.match(languageParser.T__1);
                    localctx.art.actions = this.createDict();
                    this.state = 1250;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                        this.state = 1247;
                        this.annotateAction(localctx.art);
                        this.state = 1252;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1253;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.actions);
                    this.checkExtensionDict(localctx.art.actions);
                    this.state = 1256;
                    this.optionalSemi();
                    break;
                case languageParser.T__5:
                    this.state = 1257;
                    this.match(languageParser.T__5);
                    localctx.art.params = this.createDict();
                    this.state = 1259;
                    this.annotateParam(localctx.art);
                    this.state = 1265;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 1260;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore(')'))
                            break;
                        this.state = 1262;
                        this.annotateParam(localctx.art);
                        this.state = 1267;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1268;
                    this.match(languageParser.T__6);
                    this.finalizeDictOrArray(localctx.art.params);
                    this.checkExtensionDict(localctx.art.params);
                    this.state = 1286;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.RETURNS:
                            this.state = 1271;
                            this.match(languageParser.RETURNS);
                            localctx.art['$' + 'syntax'] = 'returns';
                            this.state = 1273;
                            this.match(languageParser.T__1);
                            localctx.art.elements = this.createDict();
                            this.state = 1278;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                this.state = 1275;
                                this.annotateElement(localctx.art);
                                this.state = 1280;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1281;
                            this.match(languageParser.T__3);
                            this.finalizeDictOrArray(localctx.art.elements);
                            this.checkExtensionDict(localctx.art.elements);
                            this.state = 1284;
                            this.optionalSemi();
                            break;
                        case languageParser.T__0:
                        case languageParser.T__3:
                            this.state = 1285;
                            this.requiredSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.RETURNS:
                    this.state = 1288;
                    this.match(languageParser.RETURNS);
                    localctx.art['$' + 'syntax'] = 'returns';
                    this.state = 1290;
                    this.match(languageParser.T__1);
                    localctx.art.elements = this.createDict();
                    this.state = 1295;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                        this.state = 1292;
                        this.annotateElement(localctx.art);
                        this.state = 1297;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1298;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.elements);
                    this.checkExtensionDict(localctx.art.elements);
                    this.state = 1301;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 1302;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotateElement(outer) {
        let localctx = new AnnotateElementContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 70, languageParser.RULE_annotateElement);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            ;
            this.docComment(localctx.art);
            this.state = 1309;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1306;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1311;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1312;
            localctx.name = this.ident('Element');
            this.addDef(localctx.art, localctx.outer, 'elements', 'annotate', localctx.name.id);
            this.docComment(localctx.art);
            this.state = 1317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1314;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1319;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1333;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 1320;
                    this.match(languageParser.T__1);
                    localctx.art.elements = this.createDict();
                    this.state = 1325;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                        this.state = 1322;
                        this.annotateElement(localctx.art);
                        this.state = 1327;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1328;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.elements);
                    this.checkExtensionDict(localctx.art.elements);
                    this.state = 1331;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 1332;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotateAction(outer) {
        let localctx = new AnnotateActionContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 72, languageParser.RULE_annotateAction);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            ;
            this.docComment(localctx.art);
            this.state = 1339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1336;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1341;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1342;
            localctx.name = this.ident('BoundAction');
            this.addDef(localctx.art, localctx.outer, 'actions', 'annotate', localctx.name.id);
            this.docComment(localctx.art);
            this.state = 1347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1344;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1349;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__5) {
                this.state = 1350;
                this.match(languageParser.T__5);
                localctx.art.params = this.createDict();
                this.state = 1352;
                this.annotateParam(localctx.art);
                this.state = 1358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === languageParser.T__2) {
                    this.state = 1353;
                    this.match(languageParser.T__2);
                    if (this.isStraightBefore(')'))
                        break;
                    this.state = 1355;
                    this.annotateParam(localctx.art);
                    this.state = 1360;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1361;
                this.match(languageParser.T__6);
                this.finalizeDictOrArray(localctx.art.params);
                this.checkExtensionDict(localctx.art.params);
            }
            this.state = 1381;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.RETURNS:
                    this.state = 1367;
                    this.match(languageParser.RETURNS);
                    this.state = 1368;
                    this.match(languageParser.T__1);
                    localctx.art.elements = this.createDict();
                    this.state = 1373;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                        this.state = 1370;
                        this.annotateElement(localctx.art);
                        this.state = 1375;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1376;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.elements);
                    this.checkExtensionDict(localctx.art.elements);
                    this.state = 1379;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 1380;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotateParam(outer) {
        let localctx = new AnnotateParamContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 74, languageParser.RULE_annotateParam);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            ;
            this.docComment(localctx.art);
            this.state = 1387;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1384;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1389;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1390;
            localctx.param = this.ident('Param');
            this.addDef(localctx.art, localctx.outer, 'params', 'annotate', localctx.param.id);
            this.docComment(localctx.art);
            this.state = 1395;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1392;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1397;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumSymbolDef(outer) {
        let localctx = new EnumSymbolDefContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 76, languageParser.RULE_enumSymbolDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            ;
            this.docComment(localctx.art);
            this.state = 1402;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1399;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1404;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1405;
            localctx.name = this.ident('Enum');
            this.addDef(localctx.art, localctx.outer, 'enum', 'enum', localctx.name.id);
            this.docComment(localctx.art);
            this.state = 1410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1407;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1412;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__8) {
                this.state = 1413;
                this.match(languageParser.T__8);
                this.excludeExpected(['Boolean', 'QuotedLiteral', "'#'", 'NULL']);
                this.state = 1424;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case languageParser.T__27:
                    case languageParser.String:
                    case languageParser.QuotedLiteral:
                    case languageParser.Boolean:
                    case languageParser.NULL:
                    case languageParser.Number:
                        this.state = 1415;
                        localctx.val = this.literalValue();
                        localctx.art.value = localctx.val.val;
                        break;
                    case languageParser.T__9:
                    case languageParser.T__10:
                        this.state = 1420;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case languageParser.T__9:
                                this.state = 1418;
                                localctx.plus = this.match(languageParser.T__9);
                                break;
                            case languageParser.T__10:
                                this.state = 1419;
                                localctx.min = this.match(languageParser.T__10);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 1422;
                        localctx.num = this.match(languageParser.Number);
                        localctx.art.value = this.numberLiteral(localctx.num, localctx.plus || localctx.min);
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.docComment(localctx.art);
                this.state = 1430;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === languageParser.T__7) {
                    this.state = 1427;
                    this.annotationAssignment_ll1(localctx.art);
                    this.state = 1432;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 1435;
            this.requiredSemi();
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    defaultValue(art) {
        let localctx = new DefaultValueContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 78, languageParser.RULE_defaultValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1437;
            this.match(languageParser.DEFAULT);
            this.state = 1438;
            localctx.expr = this.expression();
            localctx.art.default = localctx.expr.expr;
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementDefOrExtend(outer) {
        let localctx = new ElementDefOrExtendContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 80, languageParser.RULE_elementDefOrExtend);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            ;
            this.docComment(localctx.art);
            this.state = 1445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1442;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1447;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1451;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 164, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1448;
                    this.match(languageParser.EXTEND);
                    this.state = 1449;
                    this.extendElement(localctx.art, localctx.outer);
                    break;
                case 2:
                    this.state = 1450;
                    this.elementDefInner(localctx.art, localctx.outer, true);
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementDef(outer) {
        let localctx = new ElementDefContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 82, languageParser.RULE_elementDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.art.location = this.startLocation();
            ;
            this.docComment(localctx.art);
            this.state = 1457;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1454;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1459;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1460;
            this.elementDefInner(localctx.art, localctx.outer, false);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    mixinElementDef(outer) {
        let localctx = new MixinElementDefContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 84, languageParser.RULE_mixinElementDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1462;
            localctx.name = this.ident('Mixin');
            this.addDef(localctx.art, localctx.outer, 'mixin', 'mixin', localctx.name.id);
            this.state = 1487;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__4:
                    this.state = 1464;
                    this.match(languageParser.T__4);
                    this.state = 1481;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1465;
                            this.typeAssociationBase(localctx.art, false);
                            this.state = 1469;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 166, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 1466;
                                    this.typeToMany(localctx.art);
                                    break;
                                case 2:
                                    this.state = 1467;
                                    this.typeToOne(localctx.art);
                                    break;
                                case 3:
                                    this.state = 1468;
                                    this.simplePath(localctx.art.target, 'artref');
                                    break;
                            }
                            this.state = 1472;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.T__1 || _la === languageParser.ON) {
                                this.state = 1471;
                                this.typeAssociationCont(localctx.art);
                            }
                            break;
                        case 2:
                            this.state = 1474;
                            this.typeRefOptArgs(localctx.art);
                            this.state = 1479;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.T__8) {
                                this.state = 1475;
                                localctx.as = this.match(languageParser.T__8);
                                this.state = 1476;
                                this.expression();
                                this.notSupportedYet('Calculated fields are not supported yet', localctx.as);
                            }
                            break;
                    }
                    break;
                case languageParser.T__8:
                    this.state = 1483;
                    localctx.as = this.match(languageParser.T__8);
                    this.state = 1484;
                    this.expression();
                    this.notSupportedYet('Calculated fields are not supported yet', localctx.as);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1489;
            this.requiredSemi();
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 2 */ this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementDefInner(art, outer, allowEq) {
        let localctx = new ElementDefInnerContext(this, this._ctx, this.state, art, outer, allowEq);
        this.enterRule(localctx, 86, languageParser.RULE_elementDefInner);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.setLocalToken('VIRTUAL', 'VIRTUAL', /^[:{@=}]$/);
            this.state = 1494;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.VIRTUAL) {
                this.state = 1492;
                localctx.virtual = this.match(languageParser.VIRTUAL);
                localctx.art.virtual = this.valueWithTokenLocation(true, localctx.virtual);
            }
            this.state = 1498;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.KEY) {
                this.state = 1496;
                localctx.key = this.match(languageParser.KEY);
                localctx.art.key = this.valueWithTokenLocation(true, localctx.key);
            }
            this.state = 1502;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 173, this._ctx);
            if (la_ === 1) {
                this.state = 1500;
                localctx.masked = this.match(languageParser.MASKED);
                localctx.art.masked = this.valueWithTokenLocation(true, localctx.masked);
                this.message('syntax-invalid-masked', localctx.masked, { keyword: 'masked' }, 'Keyword $(KEYWORD) not supported');
            }
            this.state = 1505;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 174, this._ctx);
            if (la_ === 1) {
                this.state = 1504;
                this.match(languageParser.ELEMENT);
            }
            this.state = 1507;
            localctx.name = this.ident('Element');
            this.addDef(localctx.art, localctx.outer, 'elements', 'element', localctx.name.id);
            this.docComment(localctx.art);
            this.state = 1512;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1509;
                this.annotationAssignment_fix(localctx.art);
                this.state = 1514;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1691;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 1515;
                    this.typeStruct(localctx.art);
                    this.state = 1520;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.NOT:
                        case languageParser.NULL:
                            this.state = 1516;
                            this.nullability(localctx.art);
                            this.state = 1517;
                            this.requiredSemi();
                            break;
                        case languageParser.T__0:
                        case languageParser.T__3:
                        case languageParser.T__7:
                        case languageParser.KEY:
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ARRAY:
                        case languageParser.ASC:
                        case languageParser.ASPECT:
                        case languageParser.ASSOCIATION:
                        case languageParser.BETWEEN:
                        case languageParser.COLUMNS:
                        case languageParser.COMPOSITION:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.CURRENT:
                        case languageParser.DEFAULT:
                        case languageParser.DEFINE:
                        case languageParser.DEFINITIONS:
                        case languageParser.DESC:
                        case languageParser.ELEMENT:
                        case languageParser.ELEMENTS:
                        case languageParser.ELSE:
                        case languageParser.END:
                        case languageParser.ENTITY:
                        case languageParser.ENUM:
                        case languageParser.EVENT:
                        case languageParser.ESCAPE:
                        case languageParser.EXACT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FIRST:
                        case languageParser.FLOATING:
                        case languageParser.FOLLOWING:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.INTO:
                        case languageParser.IS:
                        case languageParser.JOIN:
                        case languageParser.LAST:
                        case languageParser.LEFT:
                        case languageParser.LIKE:
                        case languageParser.LIMIT:
                        case languageParser.LOCALIZED:
                        case languageParser.MANY:
                        case languageParser.MASKED:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.NAMESPACE:
                        case languageParser.NULLS:
                        case languageParser.OFFSET:
                        case languageParser.ONE:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.OUTER:
                        case languageParser.PARAMETERS:
                        case languageParser.PARTITION:
                        case languageParser.PRECEDING:
                        case languageParser.PROJECTION:
                        case languageParser.REDIRECTED:
                        case languageParser.RETURNS:
                        case languageParser.RIGHT:
                        case languageParser.ROW:
                        case languageParser.ROWS:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TO:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.UNBOUNDED:
                        case languageParser.UP:
                        case languageParser.USING:
                        case languageParser.VARIABLE:
                        case languageParser.VIEW:
                        case languageParser.Identifier:
                        case languageParser.VIRTUAL:
                            this.state = 1519;
                            this.optionalSemi();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__4:
                    this.state = 1522;
                    this.match(languageParser.T__4);
                    this.state = 1677;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 199, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1523;
                            this.typeStruct(localctx.art);
                            this.state = 1525;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                this.state = 1524;
                                this.nullability(localctx.art);
                            }
                            this.state = 1527;
                            this.requiredSemi();
                            break;
                        case 2:
                            this.state = 1529;
                            this.typeAssociationBase(localctx.art, true);
                            this.state = 1552;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 1530;
                                    this.typeStruct(localctx.art.target, true);
                                    this.state = 1531;
                                    this.optionalSemi();
                                    break;
                                case 2:
                                    this.state = 1533;
                                    localctx.one = this.match(languageParser.ONE);
                                    this.setMaxCardinality(localctx.art, localctx.one, this.numberLiteral(localctx.one, null, '1'));
                                    this.state = 1535;
                                    this.typeCompoStruct(localctx.art.target);
                                    this.state = 1536;
                                    this.optionalSemi();
                                    break;
                                case 3:
                                    this.state = 1538;
                                    localctx.many = this.match(languageParser.MANY);
                                    this.setMaxCardinality(localctx.art, localctx.many, { literal: 'string', val: '*' });
                                    this.state = 1540;
                                    this.typeCompoStruct(localctx.art.target);
                                    this.state = 1541;
                                    this.optionalSemi();
                                    break;
                                case 4:
                                    this.state = 1543;
                                    this.typeToMany(localctx.art);
                                    this.state = 1544;
                                    this.typeAssociationElementCont(localctx.art);
                                    break;
                                case 5:
                                    this.state = 1546;
                                    this.typeToOne(localctx.art);
                                    this.state = 1547;
                                    this.typeAssociationElementCont(localctx.art);
                                    break;
                                case 6:
                                    this.state = 1549;
                                    this.simplePath(localctx.art.target, 'artref');
                                    this.state = 1550;
                                    this.typeAssociationElementCont(localctx.art);
                                    break;
                            }
                            break;
                        case 3:
                            this.state = 1559;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.ARRAY:
                                    this.state = 1554;
                                    localctx.array = this.match(languageParser.ARRAY);
                                    this.state = 1555;
                                    localctx.of = this.match(languageParser.OF);
                                    localctx.art.items = { location: this.tokenLocation(localctx.array, localctx.of) };
                                    break;
                                case languageParser.MANY:
                                    this.state = 1557;
                                    localctx.many = this.match(languageParser.MANY);
                                    localctx.art.items = { location: this.tokenLocation(localctx.many) };
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            this.state = 1604;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 188, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 1561;
                                    this.typeStruct(localctx.art.items);
                                    this.state = 1563;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                        this.state = 1562;
                                        this.nullability(localctx.art.items);
                                    }
                                    break;
                                case 2:
                                    this.state = 1565;
                                    this.typeTypeOf(localctx.art.items);
                                    this.state = 1567;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                        this.state = 1566;
                                        this.nullability(localctx.art.items);
                                    }
                                    this.docComment(localctx.art);
                                    this.state = 1573;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7) {
                                        this.state = 1570;
                                        this.annotationAssignment_ll1(localctx.art);
                                        this.state = 1575;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    break;
                                case 3:
                                    this.state = 1576;
                                    this.typeRefOptArgs(localctx.art.items);
                                    this.state = 1578;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                        this.state = 1577;
                                        this.nullability(localctx.art.items);
                                    }
                                    this.docComment(localctx.art);
                                    this.state = 1584;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7) {
                                        this.state = 1581;
                                        this.annotationAssignment_ll1(localctx.art);
                                        this.state = 1586;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 1602;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.ENUM) {
                                        if (localctx.art.items.notNull) {
                                            this.message('syntax-unexpected-null', localctx.art.items.notNull.location, { keyword: localctx.art.items.notNull.val ? 'not null' : 'null' });
                                        }
                                        this.state = 1588;
                                        this.match(languageParser.ENUM);
                                        this.state = 1589;
                                        this.match(languageParser.T__1);
                                        localctx.art.items.enum = this.createDict();
                                        this.state = 1594;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                            this.state = 1591;
                                            this.enumSymbolDef(localctx.art.items);
                                            this.state = 1596;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                        }
                                        this.state = 1597;
                                        this.match(languageParser.T__3);
                                        this.finalizeDictOrArray(localctx.art.items.enum);
                                        this.state = 1600;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                            this.state = 1599;
                                            this.nullability(localctx.art.items);
                                        }
                                    }
                                    break;
                            }
                            this.state = 1606;
                            this.requiredSemi();
                            break;
                        case 4:
                            this.state = 1608;
                            this.typeTypeOf(localctx.art);
                            this.state = 1610;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.T__8 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
                                this.state = 1609;
                                this.elementProperties(localctx.art);
                            }
                            this.docComment(localctx.art);
                            this.state = 1616;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7) {
                                this.state = 1613;
                                this.annotationAssignment_ll1(localctx.art);
                                this.state = 1618;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1619;
                            this.requiredSemi();
                            break;
                        case 5:
                            this.state = 1621;
                            localctx.l = this.match(languageParser.LOCALIZED);
                            localctx.art.localized = this.valueWithTokenLocation(true, localctx.l);
                            this.state = 1623;
                            this.typeRefOptArgs(localctx.art);
                            this.docComment(localctx.art);
                            this.state = 1628;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7) {
                                this.state = 1625;
                                this.annotationAssignment_ll1(localctx.art);
                                this.state = 1630;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1639;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.T__8 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
                                this.state = 1631;
                                this.elementProperties(localctx.art);
                                this.docComment(localctx.art);
                                this.state = 1636;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === languageParser.T__7) {
                                    this.state = 1633;
                                    this.annotationAssignment_ll1(localctx.art);
                                    this.state = 1638;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                            }
                            this.state = 1641;
                            this.requiredSemi();
                            break;
                        case 6:
                            this.state = 1643;
                            this.typeRefOptArgs(localctx.art);
                            this.docComment(localctx.art);
                            this.state = 1648;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7) {
                                this.state = 1645;
                                this.annotationAssignment_ll1(localctx.art);
                                this.state = 1650;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 1673;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.ENUM:
                                    this.state = 1651;
                                    this.match(languageParser.ENUM);
                                    this.state = 1652;
                                    this.match(languageParser.T__1);
                                    localctx.art.enum = this.createDict();
                                    this.state = 1657;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                        this.state = 1654;
                                        this.enumSymbolDef(localctx.art);
                                        this.state = 1659;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 1660;
                                    this.match(languageParser.T__3);
                                    this.finalizeDictOrArray(localctx.art.enum);
                                    this.state = 1663;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.T__8 || ((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (languageParser.NOT - 50)) | (1 << (languageParser.NULL - 50)) | (1 << (languageParser.DEFAULT - 50)))) !== 0)) {
                                        this.state = 1662;
                                        this.elementProperties(localctx.art);
                                    }
                                    break;
                                case languageParser.T__8:
                                case languageParser.NOT:
                                case languageParser.NULL:
                                case languageParser.DEFAULT:
                                    this.state = 1665;
                                    this.elementProperties(localctx.art);
                                    this.docComment(localctx.art);
                                    this.state = 1670;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7) {
                                        this.state = 1667;
                                        this.annotationAssignment_ll1(localctx.art);
                                        this.state = 1672;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    break;
                                case languageParser.T__0:
                                case languageParser.T__3:
                                    break;
                                default:
                                    break;
                            }
                            this.state = 1675;
                            this.requiredSemi();
                            break;
                    }
                    break;
                case languageParser.T__8:
                    this.state = 1679;
                    localctx.eq = this.match(languageParser.T__8);
                    this.state = 1680;
                    localctx.e = this.expression();
                    if (!localctx.allowEq || localctx.e.expr && !localctx.e.expr.literal)
                        this.notSupportedYet('Calculated fields are not supported yet', localctx.eq);
                    else if (localctx.e.expr)
                        localctx.art.value = localctx.e.expr;
                    this.docComment(localctx.art);
                    this.state = 1686;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 1683;
                        this.annotationAssignment_ll1(localctx.art);
                        this.state = 1688;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1689;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 5 */ this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    extendElement(art, outer) {
        let localctx = new ExtendElementContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 88, languageParser.RULE_extendElement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1695;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 202, this._ctx);
            if (la_ === 1) {
                this.state = 1693;
                localctx.expected = this.match(languageParser.ELEMENT);
                localctx.art.expectedKind = 'element';
            }
            this.state = 1697;
            localctx.name = this.ident('Element');
            this.addDef(localctx.art, localctx.outer, 'elements', 'extend', localctx.name.id);
            this.state = 1699;
            this.extendWithOptElementsOrType(localctx.art, localctx.art);
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */ this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    selectItemDef(outer) {
        let localctx = new SelectItemDefContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 90, languageParser.RULE_selectItemDef);
        var _la = 0; // Token type
        try {
            this.state = 1720;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__11:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1701;
                    localctx.star = this.match(languageParser.T__11);
                    localctx.outer.push(this.valueWithTokenLocation('*', localctx.star));
                    break;
                case languageParser.T__1:
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__7:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.KEY:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                case languageParser.VIRTUAL:
                    this.enterOuterAlt(localctx, 2);
                    localctx.art = {};
                    this.docComment(localctx.art);
                    this.state = 1707;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 1704;
                        this.annotationAssignment_atn(localctx.art);
                        this.state = 1709;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.setLocalToken('VIRTUAL', 'VIRTUAL', /^([,.:\[@]|as)$/i);
                    this.state = 1713;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.VIRTUAL) {
                        this.state = 1711;
                        localctx.virtual = this.match(languageParser.VIRTUAL);
                        localctx.art.virtual = this.valueWithTokenLocation(true, localctx.virtual);
                    }
                    this.state = 1717;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.KEY) {
                        this.state = 1715;
                        localctx.key = this.match(languageParser.KEY);
                        localctx.art.key = this.valueWithTokenLocation(true, localctx.key);
                    }
                    this.state = 1719;
                    this.selectItemDefBody(localctx.art, localctx.outer);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.art)
                this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    selectItemDefBody(art, outer) {
        let localctx = new SelectItemDefBodyContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 92, languageParser.RULE_selectItemDefBody);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            localctx.outer.push(localctx.art);
            this.state = 1761;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.state = 1723;
                    localctx.e = this.expression();
                    localctx.art.value = localctx.e.expr;
                    this.state = 1733;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.AS:
                            this.state = 1725;
                            localctx.as = this.match(languageParser.AS);
                            this.state = 1726;
                            localctx.n1 = this.ident('Item');
                            localctx.art.name = localctx.n1.id;
                            break;
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ARRAY:
                        case languageParser.ASC:
                        case languageParser.ASPECT:
                        case languageParser.ASSOCIATION:
                        case languageParser.BETWEEN:
                        case languageParser.COLUMNS:
                        case languageParser.COMPOSITION:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.CURRENT:
                        case languageParser.DEFAULT:
                        case languageParser.DEFINE:
                        case languageParser.DEFINITIONS:
                        case languageParser.DESC:
                        case languageParser.ELEMENT:
                        case languageParser.ELEMENTS:
                        case languageParser.ELSE:
                        case languageParser.END:
                        case languageParser.ENTITY:
                        case languageParser.ENUM:
                        case languageParser.EVENT:
                        case languageParser.ESCAPE:
                        case languageParser.EXACT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FIRST:
                        case languageParser.FLOATING:
                        case languageParser.FOLLOWING:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.INTO:
                        case languageParser.IS:
                        case languageParser.JOIN:
                        case languageParser.LAST:
                        case languageParser.LEFT:
                        case languageParser.LIKE:
                        case languageParser.LIMIT:
                        case languageParser.LOCALIZED:
                        case languageParser.MANY:
                        case languageParser.MASKED:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.NAMESPACE:
                        case languageParser.NULLS:
                        case languageParser.OFFSET:
                        case languageParser.ONE:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.OUTER:
                        case languageParser.PARAMETERS:
                        case languageParser.PARTITION:
                        case languageParser.PRECEDING:
                        case languageParser.PROJECTION:
                        case languageParser.REDIRECTED:
                        case languageParser.RETURNS:
                        case languageParser.RIGHT:
                        case languageParser.ROW:
                        case languageParser.ROWS:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TO:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.UNBOUNDED:
                        case languageParser.UP:
                        case languageParser.USING:
                        case languageParser.VARIABLE:
                        case languageParser.VIEW:
                        case languageParser.Identifier:
                            this.state = 1729;
                            localctx.n2 = this.ident('Item');
                            localctx.art.name = this.fragileAlias(localctx.n2.id, true);
                            break;
                        case languageParser.T__1:
                        case languageParser.T__2:
                        case languageParser.T__3:
                        case languageParser.T__4:
                        case languageParser.T__7:
                        case languageParser.FROM:
                        case languageParser.DOTbeforeBRACE:
                            if (this.getCurrentToken().text !== '.')
                                this.classifyImplicitName('Item', localctx.e.expr);
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    if (localctx.art.value && !localctx.art.value.path)
                        this.excludeExpected(["'.'", "'{'"]);
                    else if (localctx.art.name)
                        this.excludeExpected(["'.'"]);
                    this.state = 1751;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__1:
                            this.reportExpandInline(localctx.art, false);
                            this.state = 1737;
                            this.selectItemInlineList(localctx.art, 'expand');
                            this.state = 1739;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.EXCLUDING) {
                                this.state = 1738;
                                this.excludingClause(localctx.art);
                            }
                            break;
                        case languageParser.DOTbeforeBRACE:
                            this.reportExpandInline(localctx.art, localctx.as || this._input.LT(-1));
                            this.state = 1742;
                            this.match(languageParser.DOTbeforeBRACE);
                            this.state = 1749;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.T__1:
                                    this.state = 1743;
                                    this.selectItemInlineList(localctx.art, 'inline');
                                    this.state = 1745;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.EXCLUDING) {
                                        this.state = 1744;
                                        this.excludingClause(localctx.art);
                                    }
                                    break;
                                case languageParser.T__11:
                                    this.state = 1747;
                                    localctx.star = this.match(languageParser.T__11);
                                    localctx.art.inline = [this.valueWithTokenLocation('*', localctx.star)];
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            break;
                        case languageParser.T__2:
                        case languageParser.T__3:
                        case languageParser.T__4:
                        case languageParser.T__7:
                        case languageParser.FROM:
                            break;
                        default:
                            break;
                    }
                    break;
                case languageParser.T__1:
                    this.state = 1753;
                    this.selectItemInlineList(localctx.art, 'expand');
                    this.state = 1755;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.EXCLUDING) {
                        this.state = 1754;
                        this.excludingClause(localctx.art);
                    }
                    this.state = 1757;
                    this.match(languageParser.AS);
                    this.state = 1758;
                    localctx.n1 = this.ident('Item');
                    localctx.art.name = localctx.n1.id;
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.docComment(localctx.art);
            this.state = 1767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1764;
                this.annotationAssignment_fix(localctx.art);
                this.state = 1769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1814;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 1770;
                this.match(languageParser.T__4);
                this.state = 1812;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 221, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 1771;
                        localctx.re = this.match(languageParser.REDIRECTED);
                        this.state = 1772;
                        localctx.to = this.match(languageParser.TO);
                        localctx.art.target = {};
                        this.state = 1774;
                        this.simplePath(localctx.art.target, 'artref');
                        this.state = 1783;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case languageParser.T__1:
                            case languageParser.ON:
                                this.state = 1775;
                                this.typeAssociationCont(localctx.art);
                                break;
                            case languageParser.T__2:
                            case languageParser.T__3:
                            case languageParser.T__7:
                            case languageParser.FROM:
                                this.docComment(localctx.art);
                                this.state = 1780;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === languageParser.T__7) {
                                    this.state = 1777;
                                    this.annotationAssignment_ll1(localctx.art);
                                    this.state = 1782;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        break;
                    case 2:
                        this.state = 1785;
                        this.typeTypeOf(localctx.art);
                        this.docComment(localctx.art);
                        this.state = 1790;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7) {
                            this.state = 1787;
                            this.annotationAssignment_ll1(localctx.art);
                            this.state = 1792;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        break;
                    case 3:
                        this.state = 1793;
                        this.typeRefOptArgs(localctx.art);
                        this.docComment(localctx.art);
                        this.state = 1798;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7) {
                            this.state = 1795;
                            this.annotationAssignment_ll1(localctx.art);
                            this.state = 1800;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        break;
                    case 4:
                        this.state = 1801;
                        this.typeAssociationBase(localctx.art, false);
                        this.state = 1805;
                        this._errHandler.sync(this);
                        var la_ = this._interp.adaptivePredict(this._input, 219, this._ctx);
                        switch (la_) {
                            case 1:
                                this.state = 1802;
                                this.typeToMany(localctx.art);
                                break;
                            case 2:
                                this.state = 1803;
                                this.typeToOne(localctx.art);
                                break;
                            case 3:
                                this.state = 1804;
                                this.simplePath(localctx.art.target, 'artref');
                                break;
                        }
                        this.state = 1808;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === languageParser.T__1 || _la === languageParser.ON) {
                            this.state = 1807;
                            this.typeAssociationCont(localctx.art);
                        }
                        this.associationInSelectItem(localctx.art);
                        break;
                }
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 2 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    bracedSelectItemListDef(query) {
        let localctx = new BracedSelectItemListDefContext(this, this._ctx, this.state, query);
        this.enterRule(localctx, 94, languageParser.RULE_bracedSelectItemListDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1816;
            this.match(languageParser.T__1);
            localctx.query.columns = this.createArray();
            this.state = 1827;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__11) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.KEY - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.GROUP - 97)) | (1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)) | (1 << (languageParser.VIRTUAL - 129)))) !== 0)) {
                this.state = 1818;
                this.selectItemDef(localctx.query.columns);
                this.state = 1824;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === languageParser.T__2) {
                    this.state = 1819;
                    this.match(languageParser.T__2);
                    if (this.isStraightBefore("}"))
                        break;
                    this.state = 1821;
                    this.selectItemDef(localctx.query.columns);
                    this.state = 1826;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 1829;
            this.match(languageParser.T__3);
            this.finalizeDictOrArray(localctx.query.columns);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    selectItemInlineList(art, clause) {
        let localctx = new SelectItemInlineListContext(this, this._ctx, this.state, art, clause);
        this.enterRule(localctx, 96, languageParser.RULE_selectItemInlineList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1832;
            this.match(languageParser.T__1);
            localctx.art[localctx.clause] = this.createArray();
            this.state = 1843;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__4) | (1 << languageParser.T__5) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__11) | (1 << languageParser.T__16) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.CASE - 33)) | (1 << (languageParser.CAST - 33)) | (1 << (languageParser.NEW - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.GROUP - 97)) | (1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
                this.state = 1834;
                this.selectItemInlineDef(localctx.art[localctx.clause]);
                this.state = 1840;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === languageParser.T__2) {
                    this.state = 1835;
                    this.match(languageParser.T__2);
                    if (this.isStraightBefore("}"))
                        break;
                    this.state = 1837;
                    this.selectItemInlineDef(localctx.art[localctx.clause]);
                    this.state = 1842;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 1845;
            this.match(languageParser.T__3);
            this.finalizeDictOrArray(localctx.art[localctx.clause]);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    selectItemInlineDef(outer) {
        let localctx = new SelectItemInlineDefContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 98, languageParser.RULE_selectItemInlineDef);
        var _la = 0; // Token type
        try {
            this.state = 1858;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__11:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1848;
                    localctx.star = this.match(languageParser.T__11);
                    localctx.outer.push(this.valueWithTokenLocation('*', localctx.star));
                    break;
                case languageParser.T__1:
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__7:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.enterOuterAlt(localctx, 2);
                    localctx.art = {};
                    this.docComment(localctx.art);
                    this.state = 1854;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__7) {
                        this.state = 1851;
                        this.annotationAssignment_atn(localctx.art);
                        this.state = 1856;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1857;
                    this.selectItemDefBody(localctx.art, localctx.outer);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.art)
                this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterListDef(art) {
        let localctx = new ParameterListDefContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 100, languageParser.RULE_parameterListDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1860;
            this.match(languageParser.T__5);
            localctx.art.params = this.createDict();
            this.state = 1871;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                this.state = 1862;
                this.parameterDef(localctx.art);
                this.state = 1868;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === languageParser.T__2) {
                    this.state = 1863;
                    this.match(languageParser.T__2);
                    if (this.isStraightBefore(')'))
                        break;
                    this.state = 1865;
                    this.parameterDef(localctx.art);
                    this.state = 1870;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }
            this.state = 1873;
            this.match(languageParser.T__6);
            this.finalizeDictOrArray(localctx.art.params);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterDef(outer) {
        let localctx = new ParameterDefContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 102, languageParser.RULE_parameterDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.docComment(localctx.art);
            this.state = 1880;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1877;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1882;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1883;
            localctx.name = this.ident('Param');
            this.addDef(localctx.art, localctx.outer, 'params', 'param', localctx.name.id);
            this.docComment(localctx.art);
            this.state = 1888;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1885;
                this.annotationAssignment_fix(localctx.art);
                this.state = 1890;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1891;
            this.typeSpec(localctx.art);
            this.state = 1893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.DEFAULT) {
                this.state = 1892;
                this.defaultValue(localctx.art);
            }
            this.docComment(localctx.art);
            this.state = 1899;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1896;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 1901;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nullability(art) {
        let localctx = new NullabilityContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 104, languageParser.RULE_nullability);
        try {
            this.state = 1907;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.NOT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1902;
                    localctx.not = this.match(languageParser.NOT);
                    this.state = 1903;
                    localctx.n1 = this.match(languageParser.NULL);
                    localctx.art.notNull = this.valueWithTokenLocation(true, localctx.not, localctx.n1);
                    break;
                case languageParser.NULL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1905;
                    localctx.n2 = this.match(languageParser.NULL);
                    localctx.art.notNull = this.valueWithTokenLocation(false, localctx.n2);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elementProperties(elem) {
        let localctx = new ElementPropertiesContext(this, this._ctx, this.state, elem);
        this.enterRule(localctx, 106, languageParser.RULE_elementProperties);
        var _la = 0; // Token type
        try {
            this.state = 1920;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.NOT:
                case languageParser.NULL:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1909;
                    this.nullability(localctx.elem);
                    this.state = 1911;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.DEFAULT) {
                        this.state = 1910;
                        this.defaultValue(localctx.elem);
                    }
                    break;
                case languageParser.DEFAULT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1913;
                    this.defaultValue(localctx.elem);
                    this.state = 1915;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 1914;
                        this.nullability(localctx.elem);
                    }
                    break;
                case languageParser.T__8:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1917;
                    localctx.eq = this.match(languageParser.T__8);
                    this.notSupportedYet('Calculated fields are not supported yet', localctx.eq);
                    this.state = 1919;
                    this.expression();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    viewDef(art, outer) {
        let localctx = new ViewDefContext(this, this._ctx, this.state, art, outer);
        this.enterRule(localctx, 108, languageParser.RULE_viewDef);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1922;
            localctx.v = this.match(languageParser.VIEW);
            this.state = 1923;
            this.simplePath(localctx.name, 'Entity');
            localctx.art['$' + 'syntax'] = 'view';
            this.addDef(localctx.art, localctx.outer, 'artifacts', 'entity', localctx.name);
            this.docComment(localctx.art);
            this.state = 1928;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 1925;
                this.annotationAssignment_fix(localctx.art);
                this.state = 1930;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1945;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 1931;
                    this.parameterListDef(localctx.art);
                    break;
                case languageParser.WITH:
                case languageParser.HideAlternatives:
                    this.state = 1932;
                    _la = this._input.LA(1);
                    if (!(_la === languageParser.WITH || _la === languageParser.HideAlternatives)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    localctx.art.params = this.createDict();
                    this.state = 1934;
                    this.match(languageParser.PARAMETERS);
                    this.state = 1935;
                    this.parameterDef(localctx.art);
                    this.state = 1940;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 1936;
                        this.match(languageParser.T__2);
                        this.state = 1937;
                        this.parameterDef(localctx.art);
                        this.state = 1942;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.finalizeDictOrArray(localctx.art.params);
                    break;
                case languageParser.AS:
                    break;
                default:
                    break;
            }
            this.state = 1947;
            this.match(languageParser.AS);
            this.state = 1948;
            localctx.qe = this.queryExpression();
            localctx.art.query = localctx.qe.query;
            this.state = 1950;
            this.requiredSemi();
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    includeRef(art) {
        let localctx = new IncludeRefContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 110, languageParser.RULE_includeRef);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1952;
            this.simplePath(localctx.incl, 'artref');
            if (localctx.art.includes)
                localctx.art.includes.push(localctx.incl);
            else
                localctx.art.includes = [localctx.incl];
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeSpec(art) {
        let localctx = new TypeSpecContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 112, languageParser.RULE_typeSpec);
        var _la = 0; // Token type
        try {
            this.state = 1985;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1955;
                    this.typeStruct(localctx.art);
                    break;
                case languageParser.T__4:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1956;
                    this.match(languageParser.T__4);
                    this.state = 1983;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 247, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1957;
                            this.typeStruct(localctx.art);
                            this.state = 1959;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                this.state = 1958;
                                this.nullability(localctx.art);
                            }
                            break;
                        case 2:
                            this.state = 1961;
                            this.typeArray(localctx.art);
                            break;
                        case 3:
                            this.state = 1962;
                            this.typeTypeOf(localctx.art);
                            this.state = 1964;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                this.state = 1963;
                                this.nullability(localctx.art);
                            }
                            break;
                        case 4:
                            this.state = 1966;
                            this.typeRefOptArgs(localctx.art);
                            this.state = 1968;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                this.state = 1967;
                                this.nullability(localctx.art);
                            }
                            this.state = 1981;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.ENUM) {
                                this.state = 1970;
                                this.match(languageParser.ENUM);
                                this.state = 1971;
                                this.match(languageParser.T__1);
                                localctx.art.enum = this.createDict();
                                this.state = 1976;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                    this.state = 1973;
                                    this.enumSymbolDef(localctx.art);
                                    this.state = 1978;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 1979;
                                this.match(languageParser.T__3);
                                this.finalizeDictOrArray(localctx.art.enum);
                            }
                            break;
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    returnTypeSpec(art) {
        let localctx = new ReturnTypeSpecContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 114, languageParser.RULE_returnTypeSpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1987;
            localctx.ret = this.match(languageParser.RETURNS);
            localctx.art.returns = { location: this.tokenLocation(localctx.ret), kind: 'param' };
            this.state = 2015;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 254, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1989;
                    this.typeStruct(localctx.art.returns);
                    this.state = 1991;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 1990;
                        this.nullability(localctx.art.returns);
                    }
                    break;
                case 2:
                    this.state = 1993;
                    this.typeArray(localctx.art.returns);
                    break;
                case 3:
                    this.state = 1994;
                    this.typeTypeOf(localctx.art.returns);
                    this.state = 1996;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 1995;
                        this.nullability(localctx.art.returns);
                    }
                    break;
                case 4:
                    this.state = 1998;
                    this.typeRefOptArgs(localctx.art.returns);
                    this.state = 2000;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 1999;
                        this.nullability(localctx.art.returns);
                    }
                    this.state = 2013;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ENUM) {
                        this.state = 2002;
                        this.match(languageParser.ENUM);
                        this.state = 2003;
                        this.match(languageParser.T__1);
                        localctx.art.returns.enum = this.createDict();
                        this.state = 2008;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                            this.state = 2005;
                            this.enumSymbolDef(localctx.art.returns);
                            this.state = 2010;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2011;
                        this.match(languageParser.T__3);
                        this.finalizeDictOrArray(localctx.art.returns.enum);
                    }
                    break;
            }
            this.state = 2017;
            this.requiredSemi();
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeSpecSemi(art) {
        let localctx = new TypeSpecSemiContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 116, languageParser.RULE_typeSpecSemi);
        var _la = 0; // Token type
        try {
            this.state = 2188;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2019;
                    this.typeStruct(localctx.art);
                    this.state = 2020;
                    this.optionalSemi();
                    break;
                case languageParser.T__4:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2022;
                    this.match(languageParser.T__4);
                    this.setLocalToken('MANY', 'HelperToken1', /^[^\{]/);
                    this.state = 2186;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 280, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 2024;
                            this.typeStruct(localctx.art);
                            this.state = 2025;
                            this.optionalSemi();
                            break;
                        case 2:
                            this.state = 2027;
                            this.typeAssociationBase(localctx.art, false);
                            this.state = 2031;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 255, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 2028;
                                    this.typeToMany(localctx.art);
                                    break;
                                case 2:
                                    this.state = 2029;
                                    this.typeToOne(localctx.art);
                                    break;
                                case 3:
                                    this.state = 2030;
                                    this.simplePath(localctx.art.target, 'artref');
                                    break;
                            }
                            this.state = 2034;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.T__1 || _la === languageParser.ON) {
                                this.state = 2033;
                                this.typeAssociationCont(localctx.art);
                            }
                            this.state = 2036;
                            this.requiredSemi();
                            break;
                        case 3:
                            this.state = 2038;
                            localctx.many = this.match(languageParser.HelperToken1);
                            localctx.art.items = { location: this.tokenLocation(localctx.many) };
                            this.state = 2040;
                            this.typeStruct(localctx.art.items);
                            this.state = 2042;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                this.state = 2041;
                                this.nullability(localctx.art.items);
                            }
                            this.state = 2044;
                            this.optionalSemi();
                            break;
                        case 4:
                            this.state = 2051;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.ARRAY:
                                    this.state = 2046;
                                    localctx.array = this.match(languageParser.ARRAY);
                                    this.state = 2047;
                                    localctx.of = this.match(languageParser.OF);
                                    localctx.art.items = { location: this.tokenLocation(localctx.array, localctx.of) };
                                    break;
                                case languageParser.MANY:
                                    this.state = 2049;
                                    localctx.many = this.match(languageParser.MANY);
                                    localctx.art.items = { location: this.tokenLocation(localctx.many) };
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            this.state = 2104;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 267, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 2053;
                                    this.typeStruct(localctx.art.items);
                                    this.state = 2055;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                        this.state = 2054;
                                        this.nullability(localctx.art.items);
                                    }
                                    this.state = 2057;
                                    this.optionalSemi();
                                    break;
                                case 2:
                                    this.state = 2059;
                                    this.typeTypeOf(localctx.art.items);
                                    this.state = 2061;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                        this.state = 2060;
                                        this.nullability(localctx.art.items);
                                    }
                                    this.docComment(localctx.art);
                                    this.state = 2067;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7) {
                                        this.state = 2064;
                                        this.annotationAssignment_ll1(localctx.art);
                                        this.state = 2069;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 2070;
                                    this.requiredSemi();
                                    break;
                                case 3:
                                    this.state = 2072;
                                    this.typeRefOptArgs(localctx.art.items);
                                    this.state = 2074;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                                        this.state = 2073;
                                        this.nullability(localctx.art.items);
                                    }
                                    this.docComment(localctx.art);
                                    this.state = 2080;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7) {
                                        this.state = 2077;
                                        this.annotationAssignment_ll1(localctx.art);
                                        this.state = 2082;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 2102;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case languageParser.ENUM:
                                            if (localctx.art.items.notNull) {
                                                this.message('syntax-unexpected-null', localctx.art.items.notNull.location, { keyword: localctx.art.items.notNull.val ? 'not null' : 'null' });
                                            }
                                            this.state = 2084;
                                            this.match(languageParser.ENUM);
                                            this.state = 2085;
                                            this.match(languageParser.T__1);
                                            localctx.art.items.enum = this.createDict();
                                            this.state = 2090;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                                this.state = 2087;
                                                this.enumSymbolDef(localctx.art.items);
                                                this.state = 2092;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 2093;
                                            this.match(languageParser.T__3);
                                            this.finalizeDictOrArray(localctx.art.items.enum);
                                            this.state = 2099;
                                            this._errHandler.sync(this);
                                            switch (this._input.LA(1)) {
                                                case languageParser.NOT:
                                                case languageParser.NULL:
                                                    this.state = 2095;
                                                    this.nullability(localctx.art.items);
                                                    this.state = 2096;
                                                    this.requiredSemi();
                                                    break;
                                                case languageParser.EOF:
                                                case languageParser.T__0:
                                                case languageParser.T__3:
                                                case languageParser.T__7:
                                                case languageParser.ABSTRACT:
                                                case languageParser.ACTION:
                                                case languageParser.ANNOTATE:
                                                case languageParser.ANNOTATION:
                                                case languageParser.ASPECT:
                                                case languageParser.CONTEXT:
                                                case languageParser.DEFINE:
                                                case languageParser.ENTITY:
                                                case languageParser.EVENT:
                                                case languageParser.EXTEND:
                                                case languageParser.FUNCTION:
                                                case languageParser.SERVICE:
                                                case languageParser.TYPE:
                                                case languageParser.USING:
                                                case languageParser.VIEW:
                                                case languageParser.HideAlternatives:
                                                    this.state = 2098;
                                                    this.optionalSemi();
                                                    break;
                                                default:
                                                    throw new antlr4_1.default.error.NoViableAltException(this);
                                            }
                                            break;
                                        case languageParser.T__0:
                                        case languageParser.T__3:
                                            this.state = 2101;
                                            this.requiredSemi();
                                            break;
                                        default:
                                            throw new antlr4_1.default.error.NoViableAltException(this);
                                    }
                                    break;
                            }
                            break;
                        case 5:
                            this.state = 2106;
                            this.typeTypeOf(localctx.art);
                            this.state = 2108;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.DEFAULT) {
                                this.state = 2107;
                                this.defaultValue(localctx.art);
                            }
                            this.docComment(localctx.art);
                            this.state = 2114;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7) {
                                this.state = 2111;
                                this.annotationAssignment_ll1(localctx.art);
                                this.state = 2116;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 2117;
                            this.requiredSemi();
                            break;
                        case 6:
                            this.state = 2119;
                            localctx.l = this.match(languageParser.LOCALIZED);
                            localctx.art.localized = this.valueWithTokenLocation(true, localctx.l);
                            this.state = 2121;
                            this.typeRefOptArgs(localctx.art);
                            this.state = 2123;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.DEFAULT) {
                                this.state = 2122;
                                this.defaultValue(localctx.art);
                            }
                            this.docComment(localctx.art);
                            this.state = 2129;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__7) {
                                this.state = 2126;
                                this.annotationAssignment_ll1(localctx.art);
                                this.state = 2131;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 2132;
                            this.requiredSemi();
                            break;
                        case 7:
                            localctx.art.type = {};
                            this.state = 2135;
                            this.simplePath(localctx.art.type, 'artref');
                            this.state = 2184;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.T__0:
                                case languageParser.T__3:
                                case languageParser.T__4:
                                case languageParser.T__5:
                                case languageParser.T__7:
                                case languageParser.DEFAULT:
                                case languageParser.ENUM:
                                    this.state = 2140;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case languageParser.T__5:
                                            this.state = 2136;
                                            this.typeRefArgs(localctx.art);
                                            break;
                                        case languageParser.T__4:
                                            this.state = 2137;
                                            this.match(languageParser.T__4);
                                            localctx.art.type.scope = localctx.art.type.path.length;
                                            this.state = 2139;
                                            this.simplePath(localctx.art.type, 'ref');
                                            break;
                                        case languageParser.T__0:
                                        case languageParser.T__3:
                                        case languageParser.T__7:
                                        case languageParser.DEFAULT:
                                        case languageParser.ENUM:
                                            break;
                                        default:
                                            break;
                                    }
                                    this.docComment(localctx.art);
                                    this.state = 2146;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__7) {
                                        this.state = 2143;
                                        this.annotationAssignment_ll1(localctx.art);
                                        this.state = 2148;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 2170;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case languageParser.ENUM:
                                            this.state = 2149;
                                            this.match(languageParser.ENUM);
                                            this.state = 2150;
                                            this.match(languageParser.T__1);
                                            localctx.art.enum = this.createDict();
                                            this.state = 2155;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                                this.state = 2152;
                                                this.enumSymbolDef(localctx.art);
                                                this.state = 2157;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                            }
                                            this.state = 2158;
                                            this.match(languageParser.T__3);
                                            this.finalizeDictOrArray(localctx.art.enum);
                                            this.state = 2164;
                                            this._errHandler.sync(this);
                                            switch (this._input.LA(1)) {
                                                case languageParser.EOF:
                                                case languageParser.T__0:
                                                case languageParser.T__3:
                                                case languageParser.T__7:
                                                case languageParser.ABSTRACT:
                                                case languageParser.ACTION:
                                                case languageParser.ANNOTATE:
                                                case languageParser.ANNOTATION:
                                                case languageParser.ASPECT:
                                                case languageParser.CONTEXT:
                                                case languageParser.DEFINE:
                                                case languageParser.ENTITY:
                                                case languageParser.EVENT:
                                                case languageParser.EXTEND:
                                                case languageParser.FUNCTION:
                                                case languageParser.SERVICE:
                                                case languageParser.TYPE:
                                                case languageParser.USING:
                                                case languageParser.VIEW:
                                                case languageParser.HideAlternatives:
                                                    this.state = 2160;
                                                    this.optionalSemi();
                                                    break;
                                                case languageParser.DEFAULT:
                                                    this.state = 2161;
                                                    this.defaultValue(localctx.art);
                                                    this.state = 2162;
                                                    this.requiredSemi();
                                                    break;
                                                default:
                                                    throw new antlr4_1.default.error.NoViableAltException(this);
                                            }
                                            break;
                                        case languageParser.T__0:
                                        case languageParser.T__3:
                                        case languageParser.DEFAULT:
                                            this.state = 2167;
                                            this._errHandler.sync(this);
                                            _la = this._input.LA(1);
                                            if (_la === languageParser.DEFAULT) {
                                                this.state = 2166;
                                                this.defaultValue(localctx.art);
                                            }
                                            this.state = 2169;
                                            this.requiredSemi();
                                            break;
                                        default:
                                            throw new antlr4_1.default.error.NoViableAltException(this);
                                    }
                                    break;
                                case languageParser.T__1:
                                case languageParser.T__2:
                                    localctx.art.includes = [localctx.art.type];
                                    delete localctx.art.type;
                                    this.state = 2178;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__2) {
                                        this.state = 2173;
                                        this.match(languageParser.T__2);
                                        if (this.isStraightBefore('{'))
                                            break;
                                        this.state = 2175;
                                        this.includeRef(localctx.art);
                                        this.state = 2180;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 2181;
                                    this.typeStruct(localctx.art);
                                    this.state = 2182;
                                    this.optionalSemi();
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            break;
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 3 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeStruct(art, attachLoc) {
        let localctx = new TypeStructContext(this, this._ctx, this.state, art, attachLoc);
        this.enterRule(localctx, 118, languageParser.RULE_typeStruct);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2190;
            this.match(languageParser.T__1);
            localctx.art.elements = this.createDict();
            this.state = 2195;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                this.state = 2192;
                this.elementDef(localctx.art);
                this.state = 2197;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2198;
            this.match(languageParser.T__3);
            this.finalizeDictOrArray(localctx.art.elements);
            this._ctx.stop = this._input.LT(-1);
            if (localctx.attachLoc)
                this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeCompoStruct(art) {
        let localctx = new TypeCompoStructContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 120, languageParser.RULE_typeCompoStruct);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2201;
            this.match(languageParser.COMPOSITIONofBRACE);
            localctx.art.elements = this.createDict();
            this.state = 2206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.COLUMNS - 48)) | (1 << (languageParser.COMPOSITION - 48)) | (1 << (languageParser.CONTEXT - 48)) | (1 << (languageParser.CROSS - 48)) | (1 << (languageParser.CURRENT - 48)) | (1 << (languageParser.DEFAULT - 48)) | (1 << (languageParser.DEFINE - 48)) | (1 << (languageParser.DEFINITIONS - 48)) | (1 << (languageParser.DESC - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELEMENTS - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXACT - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.FIRST - 80)) | (1 << (languageParser.FLOATING - 80)) | (1 << (languageParser.FOLLOWING - 80)) | (1 << (languageParser.FULL - 80)) | (1 << (languageParser.FUNCTION - 80)) | (1 << (languageParser.GROUP - 80)) | (1 << (languageParser.HAVING - 80)) | (1 << (languageParser.INNER - 80)) | (1 << (languageParser.INTERSECT - 80)) | (1 << (languageParser.INTO - 80)) | (1 << (languageParser.IS - 80)) | (1 << (languageParser.JOIN - 80)) | (1 << (languageParser.LAST - 80)) | (1 << (languageParser.LEFT - 80)) | (1 << (languageParser.LIKE - 80)) | (1 << (languageParser.LIMIT - 80)) | (1 << (languageParser.LOCALIZED - 80)) | (1 << (languageParser.MANY - 80)) | (1 << (languageParser.MASKED - 80)) | (1 << (languageParser.MINUS - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.MIXIN - 112)) | (1 << (languageParser.NAMESPACE - 112)) | (1 << (languageParser.NULLS - 112)) | (1 << (languageParser.OFFSET - 112)) | (1 << (languageParser.ONE - 112)) | (1 << (languageParser.OR - 112)) | (1 << (languageParser.ORDER - 112)) | (1 << (languageParser.OUTER - 112)) | (1 << (languageParser.PARAMETERS - 112)) | (1 << (languageParser.PARTITION - 112)) | (1 << (languageParser.PRECEDING - 112)) | (1 << (languageParser.PROJECTION - 112)) | (1 << (languageParser.REDIRECTED - 112)) | (1 << (languageParser.RETURNS - 112)) | (1 << (languageParser.RIGHT - 112)) | (1 << (languageParser.ROW - 112)) | (1 << (languageParser.ROWS - 112)) | (1 << (languageParser.SERVICE - 112)) | (1 << (languageParser.THEN - 112)) | (1 << (languageParser.TO - 112)) | (1 << (languageParser.TYPE - 112)) | (1 << (languageParser.UNION - 112)) | (1 << (languageParser.UNBOUNDED - 112)) | (1 << (languageParser.UP - 112)) | (1 << (languageParser.USING - 112)) | (1 << (languageParser.VARIABLE - 112)) | (1 << (languageParser.VIEW - 112)) | (1 << (languageParser.Identifier - 112)) | (1 << (languageParser.VIRTUAL - 112)))) !== 0)) {
                this.state = 2203;
                this.elementDef(localctx.art);
                this.state = 2208;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2209;
            this.match(languageParser.T__3);
            this.finalizeDictOrArray(localctx.art.elements);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeArray(art) {
        let localctx = new TypeArrayContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 122, languageParser.RULE_typeArray);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2217;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ARRAY:
                    this.state = 2212;
                    localctx.array = this.match(languageParser.ARRAY);
                    this.state = 2213;
                    localctx.of = this.match(languageParser.OF);
                    localctx.art.items = { location: this.tokenLocation(localctx.array, localctx.of) };
                    break;
                case languageParser.MANY:
                    this.state = 2215;
                    localctx.many = this.match(languageParser.MANY);
                    localctx.art.items = { location: this.tokenLocation(localctx.many) };
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 2244;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 290, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 2219;
                    this.typeStruct(localctx.art.items);
                    this.state = 2221;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 2220;
                        this.nullability(localctx.art.items);
                    }
                    break;
                case 2:
                    this.state = 2223;
                    this.typeTypeOf(localctx.art.items);
                    this.state = 2225;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 2224;
                        this.nullability(localctx.art.items);
                    }
                    break;
                case 3:
                    this.state = 2227;
                    this.typeRefOptArgs(localctx.art.items);
                    this.state = 2229;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 2228;
                        this.nullability(localctx.art.items);
                    }
                    this.state = 2242;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ENUM) {
                        this.state = 2231;
                        this.match(languageParser.ENUM);
                        this.state = 2232;
                        this.match(languageParser.T__1);
                        localctx.art.items.enum = this.createDict();
                        this.state = 2237;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__7 || ((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                            this.state = 2234;
                            this.enumSymbolDef(localctx.art.items);
                            this.state = 2239;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                        this.state = 2240;
                        this.match(languageParser.T__3);
                        this.finalizeDictOrArray(localctx.art.items.enum);
                    }
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeAssociationBase(art, handleTypeCompo) {
        let localctx = new TypeAssociationBaseContext(this, this._ctx, this.state, art, handleTypeCompo);
        this.enterRule(localctx, 124, languageParser.RULE_typeAssociationBase);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2258;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ASSOCIATION:
                    this.state = 2246;
                    localctx.assoc = this.match(languageParser.ASSOCIATION);
                    this.state = 2248;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__12) {
                        this.state = 2247;
                        this.cardinality(localctx.art);
                    }
                    this.state = 2250;
                    this.match(languageParser.TO);
                    {
                        let location = this.tokenLocation(localctx.assoc);
                        localctx.art.type = { path: [{ id: 'cds.Association', location }], scope: 'global', location };
                        this.handleComposition(localctx.art.cardinality, false);
                    }
                    break;
                case languageParser.COMPOSITION:
                    this.state = 2252;
                    localctx.compo = this.match(languageParser.COMPOSITION);
                    this.state = 2254;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__12) {
                        this.state = 2253;
                        this.cardinality(localctx.art);
                    }
                    this.state = 2256;
                    this.match(languageParser.OF);
                    {
                        let location = this.tokenLocation(localctx.compo);
                        localctx.art.type = { path: [{ id: 'cds.Composition', location }], scope: 'global', location };
                        this.handleComposition(localctx.art.cardinality, handleTypeCompo);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            localctx.art.target = {};
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeAssociationCont(art) {
        let localctx = new TypeAssociationContContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 126, languageParser.RULE_typeAssociationCont);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2281;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 2262;
                    this.match(languageParser.T__1);
                    localctx.art.foreignKeys = this.createDict();
                    this.state = 2273;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                        this.state = 2264;
                        this.foreignKey(localctx.art);
                        this.state = 2270;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__2) {
                            this.state = 2265;
                            this.match(languageParser.T__2);
                            if (this.isStraightBefore("}"))
                                break;
                            this.state = 2267;
                            this.foreignKey(localctx.art);
                            this.state = 2272;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 2275;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.foreignKeys);
                    break;
                case languageParser.ON:
                    this.state = 2277;
                    this.match(languageParser.ON);
                    this.state = 2278;
                    localctx.cond = this.condition();
                    localctx.art.on = localctx.cond.cond;
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeAssociationElementCont(art) {
        let localctx = new TypeAssociationElementContContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 128, languageParser.RULE_typeAssociationElementCont);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2306;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.state = 2283;
                    this.match(languageParser.T__1);
                    localctx.art.foreignKeys = this.createDict();
                    this.state = 2294;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                        this.state = 2285;
                        this.foreignKey(localctx.art);
                        this.state = 2291;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__2) {
                            this.state = 2286;
                            this.match(languageParser.T__2);
                            if (this.isStraightBefore("}"))
                                break;
                            this.state = 2288;
                            this.foreignKey(localctx.art);
                            this.state = 2293;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 2296;
                    this.match(languageParser.T__3);
                    this.finalizeDictOrArray(localctx.art.foreignKeys);
                    this.state = 2299;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.NOT || _la === languageParser.NULL) {
                        this.state = 2298;
                        this.nullability(localctx.art);
                    }
                    break;
                case languageParser.ON:
                    this.state = 2301;
                    this.match(languageParser.ON);
                    this.state = 2302;
                    localctx.cond = this.condition();
                    localctx.art.on = localctx.cond.cond;
                    break;
                case languageParser.NOT:
                case languageParser.NULL:
                    this.state = 2305;
                    this.nullability(localctx.art);
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                case languageParser.T__7:
                    break;
                default:
                    break;
            }
            this.docComment(localctx.art);
            this.state = 2312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__7) {
                this.state = 2309;
                this.annotationAssignment_ll1(localctx.art);
                this.state = 2314;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2315;
            this.requiredSemi();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeToOne(art) {
        let localctx = new TypeToOneContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 130, languageParser.RULE_typeToOne);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2317;
            localctx.one = this.match(languageParser.ONE);
            this.setMaxCardinality(localctx.art, localctx.one, this.numberLiteral(localctx.one, null, '1'));
            this.state = 2319;
            this.simplePath(localctx.art.target, 'artref');
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeToMany(art) {
        let localctx = new TypeToManyContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 132, languageParser.RULE_typeToMany);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2321;
            localctx.many = this.match(languageParser.MANY);
            this.setMaxCardinality(localctx.art, localctx.many, { literal: 'string', val: '*' });
            this.state = 2323;
            this.simplePath(localctx.art.target, 'artref');
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cardinality(art) {
        let localctx = new CardinalityContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 134, languageParser.RULE_cardinality);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2325;
            localctx.lbrack = this.match(languageParser.T__12);
            localctx.card.targetMax = { literal: 'string', val: '*',
                location: this.tokenLocation(localctx.lbrack) };
            this.state = 2346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__11 || _la === languageParser.Number) {
                this.state = 2333;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 302, this._ctx);
                if (la_ === 1) {
                    this.state = 2327;
                    localctx.srcMax = this.match(languageParser.Number);
                    this.state = 2328;
                    this.match(languageParser.T__2);
                    localctx.card.sourceMax = this.numberLiteral(localctx.srcMax);
                }
                else if (la_ === 2) {
                    this.state = 2330;
                    localctx.srcMaxStar = this.match(languageParser.T__11);
                    this.state = 2331;
                    this.match(languageParser.T__2);
                    localctx.card.sourceMax = { literal: 'string', val: '*',
                        location: this.tokenLocation(localctx.srcMaxStar) };
                }
                this.state = 2338;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 303, this._ctx);
                if (la_ === 1) {
                    this.state = 2335;
                    localctx.trgMin = this.match(languageParser.Number);
                    this.state = 2336;
                    this.match(languageParser.T__13);
                    localctx.card.targetMin = this.numberLiteral(localctx.trgMin);
                }
                this.state = 2344;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case languageParser.Number:
                        this.state = 2340;
                        localctx.trgMax = this.match(languageParser.Number);
                        localctx.card.targetMax = this.numberLiteral(localctx.trgMax);
                        break;
                    case languageParser.T__11:
                        this.state = 2342;
                        localctx.trgMaxStar = this.match(languageParser.T__11);
                        localctx.card.targetMax = { literal: 'string', val: '*',
                            location: this.tokenLocation(localctx.trgMaxStar) };
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
            }
            this.state = 2348;
            this.match(languageParser.T__14);
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 2 */ localctx.art.cardinality = this.attachLocation(localctx.card);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    foreignKey(outer) {
        let localctx = new ForeignKeyContext(this, this._ctx, this.state, outer);
        this.enterRule(localctx, 136, languageParser.RULE_foreignKey);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2350;
            this.simplePath(localctx.elem, 'ref');
            localctx.art.targetElement = localctx.elem;
            this.state = 2354;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.AS) {
                this.state = 2352;
                this.match(languageParser.AS);
                this.state = 2353;
                localctx.name = this.ident('Key');
            }
            this.addDef(localctx.art, localctx.outer, 'foreignKeys', 'key', (localctx.name) ? localctx.name.id : localctx.elem.path);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeTypeOf(art) {
        let localctx = new TypeTypeOfContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 138, languageParser.RULE_typeTypeOf);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2358;
            this.match(languageParser.TYPE);
            this.state = 2359;
            this.match(languageParser.OF);
            localctx.art.type = { scope: 'typeOf' };
            this.state = 2361;
            this.simplePath(localctx.art.type, 'ref');
            this.state = 2365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 2362;
                this.match(languageParser.T__4);
                localctx.art.type.scope = localctx.art.type.path.length;
                this.state = 2364;
                this.simplePath(localctx.art.type, 'ref');
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art.type);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeRefOptArgs(art) {
        let localctx = new TypeRefOptArgsContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 140, languageParser.RULE_typeRefOptArgs);
        localctx.art.type = {};
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2367;
            this.simplePath(localctx.art.type, 'artref');
            this.state = 2372;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 2368;
                    this.typeRefArgs(localctx.art);
                    break;
                case languageParser.T__4:
                    this.state = 2369;
                    this.match(languageParser.T__4);
                    localctx.art.type.scope = localctx.art.type.path.length;
                    this.state = 2371;
                    this.simplePath(localctx.art.type, 'ref');
                    break;
                case languageParser.T__0:
                case languageParser.T__2:
                case languageParser.T__3:
                case languageParser.T__6:
                case languageParser.T__7:
                case languageParser.T__8:
                case languageParser.AS:
                case languageParser.FROM:
                case languageParser.NOT:
                case languageParser.NULL:
                case languageParser.DEFAULT:
                case languageParser.ENUM:
                    break;
                default:
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeRefArgs(art) {
        let localctx = new TypeRefArgsContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 142, languageParser.RULE_typeRefArgs);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2374;
            localctx.paren = this.match(languageParser.T__5);
            localctx.art['$' + 'typeArgs'] = this.createArray();
            this.state = 2402;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.Number:
                    this.state = 2376;
                    localctx.head = this.match(languageParser.Number);
                    localctx.art['$' + 'typeArgs'].push(this.numberLiteral(localctx.head));
                    this.state = 2390;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 2378;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore(')'))
                            break;
                        this.state = 2386;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case languageParser.VARIABLE:
                                this.state = 2380;
                                localctx.v = this.match(languageParser.VARIABLE);
                                localctx.art['$' + 'typeArgs'].push({ literal: 'string', val: 'variable', location: this.tokenLocation(localctx.v) });
                                break;
                            case languageParser.FLOATING:
                                this.state = 2382;
                                localctx.f = this.match(languageParser.FLOATING);
                                localctx.art['$' + 'typeArgs'].push({ literal: 'string', val: 'floating', location: this.tokenLocation(localctx.f) });
                                break;
                            case languageParser.Number:
                                this.state = 2384;
                                localctx.tail = this.match(languageParser.Number);
                                localctx.art['$' + 'typeArgs'].push(this.numberLiteral(localctx.tail));
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 2392;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.state = 2393;
                    this.typeNamedArg(localctx.art);
                    this.state = 2399;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 2394;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore(')'))
                            break;
                        this.state = 2396;
                        this.typeNamedArg(localctx.art);
                        this.state = 2401;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 2404;
            this.match(languageParser.T__6);
            this.finalizeDictOrArray(localctx.art['$' + 'typeArgs']);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeNamedArgList(art) {
        let localctx = new TypeNamedArgListContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 144, languageParser.RULE_typeNamedArgList);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2407;
            localctx.paren = this.match(languageParser.T__5);
            this.state = 2408;
            this.typeNamedArg(localctx.art);
            this.state = 2414;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 2409;
                this.match(languageParser.T__2);
                if (this.isStraightBefore(')'))
                    break;
                this.state = 2411;
                this.typeNamedArg(localctx.art);
                this.state = 2416;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2417;
            this.match(languageParser.T__6);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeNamedArg(art) {
        let localctx = new TypeNamedArgContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 146, languageParser.RULE_typeNamedArg);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2419;
            localctx.name = this.ident('paramname');
            this.state = 2420;
            this.match(languageParser.T__4);
            if (localctx.name.id && this.checkTypeFacet(localctx.art, localctx.name.id))
                localctx.arg = localctx.name.id.id;
            this.state = 2428;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.Number:
                    this.state = 2422;
                    localctx.val = this.match(languageParser.Number);
                    if (localctx.arg && localctx.art && localctx.name.id) {
                        localctx.art[localctx.arg] = this.numberLiteral(localctx.val);
                    }
                    break;
                case languageParser.VARIABLE:
                    this.state = 2424;
                    localctx.v = this.match(languageParser.VARIABLE);
                    if (localctx.arg && localctx.art && localctx.name.id) {
                        localctx.art[localctx.arg] = { literal: 'string', val: 'variable', location: this.tokenLocation(localctx.v) };
                    }
                    break;
                case languageParser.FLOATING:
                    this.state = 2426;
                    localctx.f = this.match(languageParser.FLOATING);
                    if (localctx.arg && localctx.art && localctx.name.id) {
                        localctx.art[localctx.arg] = { literal: 'string', val: 'floating', location: this.tokenLocation(localctx.f) };
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    queryExpression() {
        let localctx = new QueryExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, languageParser.RULE_queryExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2430;
            localctx.qt1 = this.queryTerm();
            localctx.query = localctx.qt1.query;
            this.state = 2451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.EXCEPT || _la === languageParser.MINUS || _la === languageParser.UNION) {
                this.state = 2444;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case languageParser.UNION:
                        this.state = 2432;
                        localctx.op = this.match(languageParser.UNION);
                        this.state = 2434;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === languageParser.ALL || _la === languageParser.DISTINCT) {
                            this.state = 2433;
                            localctx.q = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === languageParser.ALL || _la === languageParser.DISTINCT)) {
                                localctx.q = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                        break;
                    case languageParser.EXCEPT:
                        this.state = 2436;
                        localctx.op = this.match(languageParser.EXCEPT);
                        this.state = 2438;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === languageParser.DISTINCT) {
                            this.state = 2437;
                            localctx.q = this.match(languageParser.DISTINCT);
                        }
                        break;
                    case languageParser.MINUS:
                        this.state = 2440;
                        localctx.op = this.match(languageParser.MINUS);
                        this.state = 2442;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === languageParser.DISTINCT) {
                            this.state = 2441;
                            localctx.q = this.match(languageParser.DISTINCT);
                        }
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2446;
                localctx.qt = this.queryTerm();
                if (localctx.qt.query)
                    localctx.query = this.leftAssocBinaryOp(localctx.query, localctx.op, localctx.q, localctx.qt.query);
                localctx.q = null;
                this.state = 2453;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2457;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.ORDER) {
                this.state = 2454;
                localctx.ob = this.orderByClause(localctx.query);
                if (localctx.ob.query)
                    localctx.query = localctx.ob.query;
            }
            this.state = 2462;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.LIMIT) {
                this.state = 2459;
                localctx.lc = this.limitClause(localctx.query);
                if (localctx.lc.query)
                    localctx.query = localctx.lc.query;
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.query);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    orderByClause(inQuery) {
        let localctx = new OrderByClauseContext(this, this._ctx, this.state, inQuery);
        this.enterRule(localctx, 150, languageParser.RULE_orderByClause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2464;
            this.match(languageParser.ORDER);
            this.state = 2465;
            this.match(languageParser.BY);
            localctx.query = this.unaryOpForParens(localctx.inQuery, '$' + 'query');
            this.state = 2467;
            localctx.ob1 = this.orderBySpec();
            localctx.query.orderBy = [localctx.ob1.ob];
            this.state = 2475;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 2469;
                this.match(languageParser.T__2);
                this.state = 2470;
                localctx.obn = this.orderBySpec();
                localctx.query.orderBy.push(localctx.obn.ob);
                this.state = 2477;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionOrderByClause(lhsExpr) {
        let localctx = new FunctionOrderByClauseContext(this, this._ctx, this.state, lhsExpr);
        this.enterRule(localctx, 152, languageParser.RULE_functionOrderByClause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2478;
            localctx.o = this.match(languageParser.ORDER);
            this.state = 2479;
            localctx.b = this.match(languageParser.BY);
            localctx.expr = { op: this.valueWithTokenLocation('orderBy', localctx.o, localctx.b), args: [localctx.lhsExpr] };
            this.state = 2481;
            localctx.ob1 = this.orderBySpec();
            localctx.expr.args.push(localctx.ob1.ob);
            this.state = 2489;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 2483;
                this.match(languageParser.T__2);
                this.state = 2484;
                localctx.obn = this.orderBySpec();
                localctx.expr.args.push(localctx.obn.ob);
                this.state = 2491;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.expr);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    overOrderByClause() {
        let localctx = new OverOrderByClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, languageParser.RULE_overOrderByClause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2492;
            localctx.o = this.match(languageParser.ORDER);
            this.state = 2493;
            localctx.b = this.match(languageParser.BY);
            localctx.expr = { op: this.valueWithTokenLocation('overOrderBy', localctx.o, localctx.b), args: [] };
            this.state = 2495;
            localctx.ob1 = this.orderBySpec();
            localctx.expr.args.push(localctx.ob1.ob);
            this.state = 2503;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 2497;
                this.match(languageParser.T__2);
                this.state = 2498;
                localctx.obn = this.orderBySpec();
                localctx.expr.args.push(localctx.obn.ob);
                this.state = 2505;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.expr);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    partitionByClause() {
        let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, languageParser.RULE_partitionByClause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2506;
            localctx.p = this.match(languageParser.PARTITION);
            this.state = 2507;
            localctx.b = this.match(languageParser.BY);
            localctx.expr = { op: this.valueWithTokenLocation('partitionBy', localctx.p, localctx.b), args: [] };
            this.state = 2509;
            localctx.e1 = this.expression();
            localctx.expr.args.push(localctx.e1.expr);
            this.state = 2517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 2511;
                this.match(languageParser.T__2);
                this.state = 2512;
                localctx.en = this.expression();
                localctx.expr.args.push(localctx.en.expr);
                this.state = 2519;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.expr);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    windowFrameClause() {
        let localctx = new WindowFrameClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, languageParser.RULE_windowFrameClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2520;
            localctx.r = this.match(languageParser.ROWS);
            localctx.wf = { op: this.valueWithTokenLocation('rows', localctx.r), args: [] };
            this.state = 2522;
            localctx.wfe = this.windowFrameExtentSpec();
            localctx.wf.args.push(localctx.wfe.wfe);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.wf);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    windowFrameExtentSpec() {
        let localctx = new WindowFrameExtentSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, languageParser.RULE_windowFrameExtentSpec);
        try {
            this.state = 2535;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.Number:
                case languageParser.CURRENT:
                case languageParser.UNBOUNDED:
                    this.enterOuterAlt(localctx, 1);
                    localctx.wfe = {};
                    this.state = 2526;
                    this.windowFrameStartSpec(localctx.wfe);
                    break;
                case languageParser.BETWEEN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2527;
                    localctx.b = this.match(languageParser.BETWEEN);
                    localctx.wfe = { op: this.valueWithTokenLocation('frameBetween', localctx.b), args: [] };
                    this.state = 2529;
                    localctx.wfb1 = this.windowFrameBoundSpec();
                    localctx.wfe.args.push(localctx.wfb1.wfb);
                    this.state = 2531;
                    this.match(languageParser.AND);
                    this.state = 2532;
                    localctx.wfb2 = this.windowFrameBoundSpec();
                    localctx.wfe.args.push(localctx.wfb2.wfb);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.wfe);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    windowFrameBoundSpec() {
        let localctx = new WindowFrameBoundSpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, languageParser.RULE_windowFrameBoundSpec);
        try {
            this.state = 2545;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 327, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2537;
                    localctx.u = this.match(languageParser.UNBOUNDED);
                    this.state = 2538;
                    localctx.f = this.match(languageParser.FOLLOWING);
                    localctx.wfb = { op: this.valueWithTokenLocation('unboundedFollowing', localctx.u, localctx.f), args: [] };
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2540;
                    localctx.n = this.match(languageParser.Number);
                    this.state = 2541;
                    localctx.f = this.match(languageParser.FOLLOWING);
                    localctx.wfb = { op: this.valueWithTokenLocation('following', localctx.n, localctx.f), args: [this.numberLiteral(localctx.n)] };
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    localctx.wfb = {};
                    this.state = 2544;
                    this.windowFrameStartSpec(localctx.wfb);
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    windowFrameStartSpec(wf) {
        let localctx = new WindowFrameStartSpecContext(this, this._ctx, this.state, wf);
        this.enterRule(localctx, 164, languageParser.RULE_windowFrameStartSpec);
        try {
            this.state = 2556;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.UNBOUNDED:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2547;
                    localctx.u = this.match(languageParser.UNBOUNDED);
                    this.state = 2548;
                    localctx.p = this.match(languageParser.PRECEDING);
                    localctx.wf.op = this.valueWithTokenLocation('unboundedPreceding', localctx.u, localctx.p);
                    localctx.wf.args = [];
                    break;
                case languageParser.Number:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2550;
                    localctx.n = this.match(languageParser.Number);
                    this.state = 2551;
                    localctx.p = this.match(languageParser.PRECEDING);
                    localctx.wf.op = this.valueWithTokenLocation('preceding', localctx.p);
                    localctx.wf.args = [this.numberLiteral(localctx.n)];
                    break;
                case languageParser.CURRENT:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2553;
                    localctx.c = this.match(languageParser.CURRENT);
                    this.state = 2554;
                    localctx.r = this.match(languageParser.ROW);
                    localctx.wf.op = this.valueWithTokenLocation('currentRow', localctx.c, localctx.r);
                    localctx.wf.args = [];
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.wf);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    overClause() {
        let localctx = new OverClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, languageParser.RULE_overClause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2558;
            localctx.o = this.match(languageParser.OVER);
            localctx.over = { op: this.valueWithTokenLocation('over', localctx.o), args: [] };
            this.state = 2560;
            this.match(languageParser.T__5);
            this.state = 2564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.PARTITION) {
                this.state = 2561;
                localctx.pb = this.partitionByClause();
                localctx.over.args.push(localctx.pb.expr);
            }
            this.state = 2569;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.ORDER) {
                this.state = 2566;
                localctx.ob = this.overOrderByClause();
                localctx.over.args.push(localctx.ob.expr);
            }
            this.state = 2574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.ROWS) {
                this.state = 2571;
                localctx.wf = this.windowFrameClause();
                localctx.over.args.push(localctx.wf.wf);
            }
            this.state = 2576;
            this.match(languageParser.T__6);
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.over);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    limitClause(inQuery) {
        let localctx = new LimitClauseContext(this, this._ctx, this.state, inQuery);
        this.enterRule(localctx, 168, languageParser.RULE_limitClause);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2578;
            localctx.limkw = this.match(languageParser.LIMIT);
            localctx.query = this.unaryOpForParens(localctx.inQuery, '$' + 'query');
            this.state = 2584;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.Number:
                    this.state = 2580;
                    localctx.lim = this.match(languageParser.Number);
                    localctx.query.limit = { rows: this.numberLiteral(localctx.lim, '') };
                    break;
                case languageParser.NULL:
                    this.state = 2582;
                    localctx.limnull = this.match(languageParser.NULL);
                    localctx.query.limit = { rows: {
                            literal: 'null', val: null, location: this.tokenLocation(localctx.limnull)
                        } };
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 2589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.OFFSET) {
                this.state = 2586;
                this.match(languageParser.OFFSET);
                this.state = 2587;
                localctx.off = this.match(languageParser.Number);
                localctx.query.limit.offset = this.numberLiteral(localctx.off);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    orderBySpec() {
        let localctx = new OrderBySpecContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, languageParser.RULE_orderBySpec);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2591;
            localctx.e = this.expression();
            localctx.ob = localctx.e.expr;
            this.state = 2597;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ASC:
                    this.state = 2593;
                    localctx.asc = this.match(languageParser.ASC);
                    localctx.ob.sort = this.valueWithTokenLocation('asc', localctx.asc);
                    break;
                case languageParser.DESC:
                    this.state = 2595;
                    localctx.desc = this.match(languageParser.DESC);
                    localctx.ob.sort = this.valueWithTokenLocation('desc', localctx.desc);
                    break;
                case languageParser.EOF:
                case languageParser.T__0:
                case languageParser.T__2:
                case languageParser.T__3:
                case languageParser.T__6:
                case languageParser.T__7:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ASPECT:
                case languageParser.CONTEXT:
                case languageParser.DEFINE:
                case languageParser.ENTITY:
                case languageParser.EVENT:
                case languageParser.EXTEND:
                case languageParser.FUNCTION:
                case languageParser.LIMIT:
                case languageParser.NULLS:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.TYPE:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.HideAlternatives:
                    break;
                default:
                    break;
            }
            this.state = 2602;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.NULLS) {
                this.state = 2599;
                localctx.nb = this.match(languageParser.NULLS);
                this.state = 2600;
                localctx.ne = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === languageParser.FIRST || _la === languageParser.LAST)) {
                    localctx.ne = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                localctx.ob.nulls = this.valueWithTokenLocation((localctx.ne === null ? null : localctx.ne.text).toLowerCase(), localctx.nb, localctx.ne);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    queryTerm() {
        let localctx = new QueryTermContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, languageParser.RULE_queryTerm);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2604;
            localctx.qt1 = this.queryPrimary();
            localctx.query = localctx.qt1.query;
            this.state = 2615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.INTERSECT) {
                this.state = 2606;
                localctx.intersect = this.match(languageParser.INTERSECT);
                this.state = 2608;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === languageParser.DISTINCT) {
                    this.state = 2607;
                    localctx.quantifier = this.match(languageParser.DISTINCT);
                }
                this.state = 2610;
                localctx.qt = this.queryPrimary();
                localctx.query = this.leftAssocBinaryOp(localctx.query, localctx.intersect, localctx.quantifier, localctx.qt.query);
                localctx.quantifier = null;
                this.state = 2617;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.query);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    queryPrimary() {
        let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, languageParser.RULE_queryPrimary);
        var _la = 0; // Token type
        try {
            this.state = 2697;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2618;
                    localctx.open = this.match(languageParser.T__5);
                    this.state = 2619;
                    localctx.qe = this.queryExpression();
                    this.state = 2620;
                    localctx.close = this.match(languageParser.T__6);
                    localctx.query = this.surroundByParens(localctx.qe.query, localctx.open, localctx.close);
                    break;
                case languageParser.SELECT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2623;
                    localctx.select = this.match(languageParser.SELECT);
                    localctx.query = { op: this.valueWithTokenLocation('SELECT', localctx.select), location: this.startLocation() };
                    this.state = 2668;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.FROM:
                            this.state = 2625;
                            this.match(languageParser.FROM);
                            this.state = 2626;
                            this.querySource(localctx.query);
                            this.state = 2639;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.MIXIN) {
                                this.state = 2627;
                                localctx.mixin = this.match(languageParser.MIXIN);
                                this.state = 2628;
                                this.match(languageParser.T__1);
                                localctx.query.mixin = this.createDict();
                                this.state = 2633;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                while (((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0)) {
                                    this.state = 2630;
                                    this.mixinElementDef(localctx.query);
                                    this.state = 2635;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                }
                                this.state = 2636;
                                this.match(languageParser.T__3);
                                this.finalizeDictOrArray(localctx.query.mixin);
                                this.state = 2638;
                                this.match(languageParser.INTO);
                            }
                            this.state = 2643;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.ALL || _la === languageParser.DISTINCT) {
                                this.state = 2641;
                                localctx.ad = this._input.LT(1);
                                _la = this._input.LA(1);
                                if (!(_la === languageParser.ALL || _la === languageParser.DISTINCT)) {
                                    localctx.ad = this._errHandler.recoverInline(this);
                                }
                                else {
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                localctx.query.quantifier = this.valueWithTokenLocation((localctx.ad === null ? null : localctx.ad.text).toLowerCase(), localctx.ad);
                            }
                            this.state = 2646;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.T__1) {
                                this.state = 2645;
                                this.bracedSelectItemListDef(localctx.query, 'columns');
                            }
                            this.state = 2649;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.EXCLUDING) {
                                this.state = 2648;
                                this.excludingClause(localctx.query);
                            }
                            break;
                        case languageParser.T__1:
                        case languageParser.T__4:
                        case languageParser.T__5:
                        case languageParser.T__7:
                        case languageParser.T__9:
                        case languageParser.T__10:
                        case languageParser.T__11:
                        case languageParser.T__16:
                        case languageParser.T__27:
                        case languageParser.String:
                        case languageParser.QuotedLiteral:
                        case languageParser.Boolean:
                        case languageParser.ALL:
                        case languageParser.CASE:
                        case languageParser.CAST:
                        case languageParser.DISTINCT:
                        case languageParser.KEY:
                        case languageParser.NEW:
                        case languageParser.NULL:
                        case languageParser.Number:
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ARRAY:
                        case languageParser.ASC:
                        case languageParser.ASPECT:
                        case languageParser.ASSOCIATION:
                        case languageParser.BETWEEN:
                        case languageParser.COLUMNS:
                        case languageParser.COMPOSITION:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.CURRENT:
                        case languageParser.DEFAULT:
                        case languageParser.DEFINE:
                        case languageParser.DEFINITIONS:
                        case languageParser.DESC:
                        case languageParser.ELEMENT:
                        case languageParser.ELEMENTS:
                        case languageParser.ELSE:
                        case languageParser.END:
                        case languageParser.ENTITY:
                        case languageParser.ENUM:
                        case languageParser.EVENT:
                        case languageParser.ESCAPE:
                        case languageParser.EXACT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FIRST:
                        case languageParser.FLOATING:
                        case languageParser.FOLLOWING:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.INTO:
                        case languageParser.IS:
                        case languageParser.JOIN:
                        case languageParser.LAST:
                        case languageParser.LEFT:
                        case languageParser.LIKE:
                        case languageParser.LIMIT:
                        case languageParser.LOCALIZED:
                        case languageParser.MANY:
                        case languageParser.MASKED:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.NAMESPACE:
                        case languageParser.NULLS:
                        case languageParser.OFFSET:
                        case languageParser.ONE:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.OUTER:
                        case languageParser.PARAMETERS:
                        case languageParser.PARTITION:
                        case languageParser.PRECEDING:
                        case languageParser.PROJECTION:
                        case languageParser.REDIRECTED:
                        case languageParser.RETURNS:
                        case languageParser.RIGHT:
                        case languageParser.ROW:
                        case languageParser.ROWS:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TO:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.UNBOUNDED:
                        case languageParser.UP:
                        case languageParser.USING:
                        case languageParser.VARIABLE:
                        case languageParser.VIEW:
                        case languageParser.Identifier:
                        case languageParser.VIRTUAL:
                            this.state = 2653;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.ALL || _la === languageParser.DISTINCT) {
                                this.state = 2651;
                                localctx.ad = this._input.LT(1);
                                _la = this._input.LA(1);
                                if (!(_la === languageParser.ALL || _la === languageParser.DISTINCT)) {
                                    localctx.ad = this._errHandler.recoverInline(this);
                                }
                                else {
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                localctx.query.quantifier = this.valueWithTokenLocation((localctx.ad === null ? null : localctx.ad.text).toLowerCase(), localctx.ad);
                            }
                            localctx.query.columns = [];
                            this.state = 2656;
                            this.selectItemDef(localctx.query.columns);
                            this.state = 2662;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === languageParser.T__2) {
                                this.state = 2657;
                                this.match(languageParser.T__2);
                                if (this.isStraightBefore("}"))
                                    break;
                                this.state = 2659;
                                this.selectItemDef(localctx.query.columns);
                                this.state = 2664;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 2665;
                            this.match(languageParser.FROM);
                            this.state = 2666;
                            this.querySource(localctx.query);
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 2674;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.WHERE) {
                        this.state = 2670;
                        this.match(languageParser.WHERE);
                        this.state = 2671;
                        localctx.cond = this.condition();
                        localctx.query.where = localctx.cond.cond;
                    }
                    this.state = 2689;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.GROUP) {
                        this.state = 2676;
                        this.match(languageParser.GROUP);
                        this.state = 2677;
                        this.match(languageParser.BY);
                        this.state = 2678;
                        localctx.e1 = this.expression();
                        localctx.query.groupBy = [localctx.e1.expr];
                        this.state = 2686;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__2) {
                            this.state = 2680;
                            this.match(languageParser.T__2);
                            this.state = 2681;
                            localctx.en = this.expression();
                            localctx.query.groupBy.push(localctx.en.expr);
                            this.state = 2688;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 2695;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.HAVING) {
                        this.state = 2691;
                        this.match(languageParser.HAVING);
                        this.state = 2692;
                        localctx.having = this.condition();
                        localctx.query.having = localctx.having.cond;
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.query);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    querySource(query) {
        let localctx = new QuerySourceContext(this, this._ctx, this.state, query);
        this.enterRule(localctx, 176, languageParser.RULE_querySource);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2699;
            localctx.t1 = this.tableExpression();
            localctx.query.from = localctx.t1.table;
            this.state = 2710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__2) {
                const location = this.tokenLocation(this.getCurrentToken());
                localctx.query.from = { op: { val: 'join', location },
                    join: { val: 'cross', location },
                    args: [localctx.t1.table] };
                this.state = 2706;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 2702;
                    this.match(languageParser.T__2);
                    this.state = 2703;
                    localctx.tn = this.tableExpression();
                    if (localctx.tn.table)
                        localctx.query.from.args.push(localctx.tn.table);
                    this.state = 2708;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === languageParser.T__2);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.query.from);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tableExpression() {
        let localctx = new TableExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, languageParser.RULE_tableExpression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2712;
            localctx.qt = this.tableTerm();
            localctx.table = localctx.qt.table;
            this.state = 2729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (languageParser.CROSS - 74)) | (1 << (languageParser.FULL - 74)) | (1 << (languageParser.INNER - 74)) | (1 << (languageParser.JOIN - 74)) | (1 << (languageParser.LEFT - 74)))) !== 0) || _la === languageParser.RIGHT) {
                this.state = 2727;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case languageParser.FULL:
                    case languageParser.INNER:
                    case languageParser.JOIN:
                    case languageParser.LEFT:
                    case languageParser.RIGHT:
                        this.state = 2714;
                        localctx.join = this.joinOp(localctx.table);
                        localctx.table = localctx.join.table;
                        this.state = 2716;
                        localctx.te = this.tableExpression();
                        if (!localctx.table) {
                            localctx.table = {};
                        }
                        else if (localctx.te.table)
                            localctx.table.args.push(localctx.te.table);
                        this.state = 2718;
                        this.match(languageParser.ON);
                        this.state = 2719;
                        localctx.cond = this.condition();
                        localctx.table.on = localctx.cond.cond;
                        break;
                    case languageParser.CROSS:
                        this.state = 2722;
                        localctx.crj = this.match(languageParser.CROSS);
                        this.state = 2723;
                        localctx.jn = this.match(languageParser.JOIN);
                        this.state = 2724;
                        localctx.tt = this.tableTerm();
                        if (!localctx.table) {
                            localctx.table = {};
                        }
                        localctx.table = this.leftAssocBinaryOp(localctx.table, localctx.jn, localctx.crj, localctx.tt.table, 'join');
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 2731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.table);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    joinOp(left) {
        let localctx = new JoinOpContext(this, this._ctx, this.state, left);
        this.enterRule(localctx, 180, languageParser.RULE_joinOp);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2767;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.JOIN:
                    this.state = 2732;
                    localctx.op = this.match(languageParser.JOIN);
                    localctx.join = 'inner';
                    break;
                case languageParser.INNER:
                    this.state = 2734;
                    localctx.t1 = this.match(languageParser.INNER);
                    this.state = 2736;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                        this.state = 2735;
                        localctx.c = this.joinCardinality();
                    }
                    this.state = 2738;
                    localctx.op = this.match(languageParser.JOIN);
                    localctx.join = 'inner';
                    break;
                case languageParser.LEFT:
                    this.state = 2740;
                    localctx.t1 = this.match(languageParser.LEFT);
                    this.state = 2742;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.OUTER) {
                        this.state = 2741;
                        localctx.t2 = this.match(languageParser.OUTER);
                    }
                    this.state = 2745;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                        this.state = 2744;
                        localctx.c = this.joinCardinality();
                    }
                    this.state = 2747;
                    localctx.op = this.match(languageParser.JOIN);
                    localctx.join = 'left';
                    break;
                case languageParser.RIGHT:
                    this.state = 2749;
                    localctx.t1 = this.match(languageParser.RIGHT);
                    this.state = 2751;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.OUTER) {
                        this.state = 2750;
                        localctx.t2 = this.match(languageParser.OUTER);
                    }
                    this.state = 2754;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                        this.state = 2753;
                        localctx.c = this.joinCardinality();
                    }
                    this.state = 2756;
                    localctx.op = this.match(languageParser.JOIN);
                    localctx.join = 'right';
                    break;
                case languageParser.FULL:
                    this.state = 2758;
                    localctx.t1 = this.match(languageParser.FULL);
                    this.state = 2760;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.OUTER) {
                        this.state = 2759;
                        localctx.t2 = this.match(languageParser.OUTER);
                    }
                    this.state = 2763;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (languageParser.EXACT - 88)) | (1 << (languageParser.MANY - 88)) | (1 << (languageParser.ONE - 88)))) !== 0)) {
                        this.state = 2762;
                        localctx.c = this.joinCardinality();
                    }
                    this.state = 2765;
                    localctx.op = this.match(languageParser.JOIN);
                    localctx.join = 'full';
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            localctx.table = { op: this.valueWithTokenLocation('join', localctx.op),
                join: this.valueWithTokenLocation(localctx.join, localctx.t1 || localctx.op, localctx.t2),
                args: (localctx.left ? [localctx.left] : []),
                location: localctx.left && localctx.left.location };
            if (localctx.c)
                localctx.table.cardinality = localctx.c.joinCard;
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    joinCardinality() {
        let localctx = new JoinCardinalityContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, languageParser.RULE_joinCardinality);
        localctx.joinCard = {};
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2778;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.EXACT:
                case languageParser.ONE:
                    this.state = 2772;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.EXACT) {
                        this.state = 2771;
                        localctx.srcExact = this.match(languageParser.EXACT);
                    }
                    this.state = 2774;
                    localctx.srcMaxOne = this.match(languageParser.ONE);
                    if (localctx.srcExact)
                        localctx.joinCard.sourceMin = { literal: 'number', val: 1,
                            location: this.tokenLocation(localctx.srcExact) };
                    localctx.joinCard.sourceMax = { literal: 'number', val: 1,
                        location: this.tokenLocation(localctx.srcMaxOne) };
                    break;
                case languageParser.MANY:
                    this.state = 2776;
                    localctx.srcMaxMany = this.match(languageParser.MANY);
                    localctx.joinCard.sourceMax = { literal: 'string', val: '*',
                        location: this.tokenLocation(localctx.srcMaxMany) };
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 2780;
            this.match(languageParser.TO);
            this.state = 2788;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.EXACT:
                case languageParser.ONE:
                    this.state = 2782;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.EXACT) {
                        this.state = 2781;
                        localctx.tgtExact = this.match(languageParser.EXACT);
                    }
                    this.state = 2784;
                    localctx.tgtMaxOne = this.match(languageParser.ONE);
                    if (localctx.tgtExact)
                        localctx.joinCard.targetMin = { literal: 'number', val: 1,
                            location: this.tokenLocation(localctx.tgtExact) };
                    localctx.joinCard.targetMax = { literal: 'number', val: 1,
                        location: this.tokenLocation(localctx.tgtMaxOne) };
                    break;
                case languageParser.MANY:
                    this.state = 2786;
                    localctx.tgtMaxMany = this.match(languageParser.MANY);
                    localctx.joinCard.targetMax = { literal: 'string', val: '*',
                        location: this.tokenLocation(localctx.tgtMaxMany) };
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.joinCard);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tableTerm() {
        let localctx = new TableTermContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, languageParser.RULE_tableTerm);
        var _la = 0; // Token type
        try {
            this.state = 2827;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.enterOuterAlt(localctx, 1);
                    localctx.table = { path: [], scope: 0 };
                    this.state = 2791;
                    this.fromPath(localctx.table, 'artref');
                    this.state = 2795;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__4) {
                        this.state = 2792;
                        this.match(languageParser.T__4);
                        localctx.table.scope = localctx.table.path.length;
                        this.state = 2794;
                        this.fromPath(localctx.table, 'ref');
                    }
                    this.state = 2804;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.AS:
                            this.state = 2797;
                            this.match(languageParser.AS);
                            this.state = 2798;
                            localctx.n1 = this.ident('FromAlias');
                            localctx.table.name = localctx.n1.id;
                            break;
                        case languageParser.Identifier:
                            this.state = 2801;
                            localctx.n2 = this.identNoKeyword('FromAlias');
                            localctx.table.name = this.fragileAlias(localctx.n2.id);
                            break;
                        case languageParser.EOF:
                        case languageParser.T__0:
                        case languageParser.T__1:
                        case languageParser.T__2:
                        case languageParser.T__3:
                        case languageParser.T__6:
                        case languageParser.ALL:
                        case languageParser.DISTINCT:
                        case languageParser.ON:
                        case languageParser.WHERE:
                        case languageParser.ACTIONS:
                        case languageParser.CROSS:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.FULL:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.JOIN:
                        case languageParser.LEFT:
                        case languageParser.LIMIT:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.ORDER:
                        case languageParser.RIGHT:
                        case languageParser.UNION:
                            break;
                        default:
                            break;
                    }
                    if (!localctx.table.name)
                        this.classifyImplicitName(localctx.table.scope ? 'FromAlias' : 'Without');
                    break;
                case languageParser.T__5:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2808;
                    localctx.open = this.match(languageParser.T__5);
                    this.state = 2825;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 370, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 2809;
                            localctx.qe = this.queryExpression();
                            this.state = 2810;
                            localctx.close = this.match(languageParser.T__6);
                            localctx.table = this.surroundByParens(localctx.qe.query, localctx.open, localctx.close, true);
                            this.state = 2819;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.AS:
                                    this.state = 2812;
                                    this.match(languageParser.AS);
                                    this.state = 2813;
                                    localctx.a1 = this.ident('FromAlias');
                                    localctx.table.name = localctx.a1.id;
                                    break;
                                case languageParser.Identifier:
                                    this.state = 2816;
                                    localctx.a2 = this.identNoKeyword('FromAlias');
                                    localctx.table.name = this.fragileAlias(localctx.a2.id, true);
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            break;
                        case 2:
                            this.state = 2821;
                            localctx.te = this.tableExpression();
                            this.state = 2822;
                            localctx.close = this.match(languageParser.T__6);
                            localctx.table = this.surroundByParens(localctx.te.table, localctx.open, localctx.close);
                            break;
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */ this.attachLocation(localctx.table);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fromPath(qp, idkind) {
        let localctx = new FromPathContext(this, this._ctx, this.state, qp, idkind);
        this.enterRule(localctx, 186, languageParser.RULE_fromPath);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2829;
            localctx.id = this.ident(localctx.idkind);
            this.pushIdent(localctx.qp.path, localctx.id.id);
            this.state = 2836;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 2831;
                    this.fromArguments(localctx.id.id);
                    this.state = 2833;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__12) {
                        this.state = 2832;
                        this.cardinalityAndFilter(localctx.id.id);
                    }
                    break;
                case languageParser.T__12:
                    this.state = 2835;
                    this.cardinalityAndFilter(localctx.id.id);
                    break;
                case languageParser.EOF:
                case languageParser.T__0:
                case languageParser.T__1:
                case languageParser.T__2:
                case languageParser.T__3:
                case languageParser.T__4:
                case languageParser.T__6:
                case languageParser.T__7:
                case languageParser.T__15:
                case languageParser.ALL:
                case languageParser.AS:
                case languageParser.DISTINCT:
                case languageParser.ON:
                case languageParser.WHERE:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ASPECT:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.DEFINE:
                case languageParser.ENTITY:
                case languageParser.EVENT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.JOIN:
                case languageParser.LEFT:
                case languageParser.LIMIT:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.ORDER:
                case languageParser.RIGHT:
                case languageParser.SERVICE:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.USING:
                case languageParser.VIEW:
                case languageParser.Identifier:
                case languageParser.HideAlternatives:
                    break;
                default:
                    break;
            }
            this.state = 2850;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__15) {
                this.state = 2838;
                this.match(languageParser.T__15);
                this.state = 2839;
                localctx.id = this.ident(localctx.idkind);
                this.pushIdent(localctx.qp.path, localctx.id.id);
                this.state = 2846;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case languageParser.T__5:
                        this.state = 2841;
                        this.fromArguments(localctx.id.id);
                        this.state = 2843;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === languageParser.T__12) {
                            this.state = 2842;
                            this.cardinalityAndFilter(localctx.id.id);
                        }
                        break;
                    case languageParser.T__12:
                        this.state = 2845;
                        this.cardinalityAndFilter(localctx.id.id);
                        break;
                    case languageParser.EOF:
                    case languageParser.T__0:
                    case languageParser.T__1:
                    case languageParser.T__2:
                    case languageParser.T__3:
                    case languageParser.T__4:
                    case languageParser.T__6:
                    case languageParser.T__7:
                    case languageParser.T__15:
                    case languageParser.ALL:
                    case languageParser.AS:
                    case languageParser.DISTINCT:
                    case languageParser.ON:
                    case languageParser.WHERE:
                    case languageParser.ABSTRACT:
                    case languageParser.ACTION:
                    case languageParser.ACTIONS:
                    case languageParser.ANNOTATE:
                    case languageParser.ANNOTATION:
                    case languageParser.ASPECT:
                    case languageParser.CONTEXT:
                    case languageParser.CROSS:
                    case languageParser.DEFINE:
                    case languageParser.ENTITY:
                    case languageParser.EVENT:
                    case languageParser.EXCEPT:
                    case languageParser.EXCLUDING:
                    case languageParser.EXTEND:
                    case languageParser.FULL:
                    case languageParser.FUNCTION:
                    case languageParser.GROUP:
                    case languageParser.HAVING:
                    case languageParser.INNER:
                    case languageParser.INTERSECT:
                    case languageParser.JOIN:
                    case languageParser.LEFT:
                    case languageParser.LIMIT:
                    case languageParser.MINUS:
                    case languageParser.MIXIN:
                    case languageParser.ORDER:
                    case languageParser.RIGHT:
                    case languageParser.SERVICE:
                    case languageParser.TYPE:
                    case languageParser.UNION:
                    case languageParser.USING:
                    case languageParser.VIEW:
                    case languageParser.Identifier:
                    case languageParser.HideAlternatives:
                        break;
                    default:
                        break;
                }
                this.state = 2852;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.qp);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    condition() {
        let localctx = new ConditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, languageParser.RULE_condition);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2853;
            localctx.c1 = this.conditionAnd();
            localctx.args.push(localctx.c1.cond);
            this.state = 2861;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.OR) {
                this.state = 2855;
                localctx.or = this.match(languageParser.OR);
                this.state = 2856;
                localctx.c2 = this.conditionAnd();
                localctx.args.push(localctx.c2.cond);
                localctx.orl.push(this.valueWithTokenLocation('or', localctx.or));
                this.state = 2863;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            localctx.cond = (localctx.args.length === 1)
                ? this.attachLocation(localctx.args[0])
                : this.attachLocation({ op: localctx.orl[0], args: localctx.args });
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditionAnd() {
        let localctx = new ConditionAndContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, languageParser.RULE_conditionAnd);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2864;
            localctx.c1 = this.conditionTerm();
            localctx.args.push(localctx.c1.cond);
            this.state = 2872;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.AND) {
                this.state = 2866;
                localctx.and = this.match(languageParser.AND);
                this.state = 2867;
                localctx.c2 = this.conditionTerm();
                localctx.args.push(localctx.c2.cond);
                localctx.andl.push(this.valueWithTokenLocation('and', localctx.and));
                this.state = 2874;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            localctx.cond = (localctx.args.length === 1)
                ? localctx.args[0]
                : this.attachLocation({ op: localctx.andl[0], args: localctx.args });
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditionTerm() {
        let localctx = new ConditionTermContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, languageParser.RULE_conditionTerm);
        var _la = 0; // Token type
        try {
            this.state = 2920;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.NOT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2875;
                    localctx.nt = this.match(languageParser.NOT);
                    this.state = 2876;
                    localctx.ct = this.conditionTerm();
                    localctx.cond = { op: this.valueWithTokenLocation('not', localctx.nt), args: [localctx.ct.cond] };
                    break;
                case languageParser.EXISTS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2879;
                    localctx.ex = this.match(languageParser.EXISTS);
                    this.state = 2890;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__5:
                            this.state = 2880;
                            localctx.open = this.match(languageParser.T__5);
                            this.state = 2881;
                            localctx.qe = this.queryExpression();
                            this.state = 2882;
                            localctx.close = this.match(languageParser.T__6);
                            localctx.cond = { op: this.valueWithTokenLocation('exists', localctx.ex),
                                args: [this.surroundByParens(localctx.qe.query, localctx.open, localctx.close, true)] };
                            break;
                        case languageParser.T__16:
                        case languageParser.HideAlternatives:
                            this.state = 2885;
                            localctx.qm = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === languageParser.T__16 || _la === languageParser.HideAlternatives)) {
                                localctx.qm = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            localctx.cond = { op: this.valueWithTokenLocation('exists', localctx.ex), args: [
                                    { param: this.valueWithTokenLocation('?', localctx.qm), scope: 'param' }
                                ] };
                            this.csnParseOnly('Dynamic parameter "?" is not supported', localctx.qm);
                            break;
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ARRAY:
                        case languageParser.ASC:
                        case languageParser.ASPECT:
                        case languageParser.ASSOCIATION:
                        case languageParser.BETWEEN:
                        case languageParser.COLUMNS:
                        case languageParser.COMPOSITION:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.CURRENT:
                        case languageParser.DEFAULT:
                        case languageParser.DEFINE:
                        case languageParser.DEFINITIONS:
                        case languageParser.DESC:
                        case languageParser.ELEMENT:
                        case languageParser.ELEMENTS:
                        case languageParser.ELSE:
                        case languageParser.END:
                        case languageParser.ENTITY:
                        case languageParser.ENUM:
                        case languageParser.EVENT:
                        case languageParser.ESCAPE:
                        case languageParser.EXACT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FIRST:
                        case languageParser.FLOATING:
                        case languageParser.FOLLOWING:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.INTO:
                        case languageParser.IS:
                        case languageParser.JOIN:
                        case languageParser.LAST:
                        case languageParser.LEFT:
                        case languageParser.LIKE:
                        case languageParser.LIMIT:
                        case languageParser.LOCALIZED:
                        case languageParser.MANY:
                        case languageParser.MASKED:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.NAMESPACE:
                        case languageParser.NULLS:
                        case languageParser.OFFSET:
                        case languageParser.ONE:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.OUTER:
                        case languageParser.PARAMETERS:
                        case languageParser.PARTITION:
                        case languageParser.PRECEDING:
                        case languageParser.PROJECTION:
                        case languageParser.REDIRECTED:
                        case languageParser.RETURNS:
                        case languageParser.RIGHT:
                        case languageParser.ROW:
                        case languageParser.ROWS:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TO:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.UNBOUNDED:
                        case languageParser.UP:
                        case languageParser.USING:
                        case languageParser.VARIABLE:
                        case languageParser.VIEW:
                        case languageParser.Identifier:
                            this.state = 2887;
                            localctx.ep = this.valuePath('ref');
                            localctx.ep.qp['$' + 'expected'] = 'exists';
                            localctx.cond = { op: this.valueWithTokenLocation('exists', localctx.ex), args: [localctx.ep.qp] };
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2892;
                    localctx.expr = this.expression();
                    this.state = 2918;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__8:
                        case languageParser.T__17:
                        case languageParser.T__18:
                        case languageParser.T__19:
                        case languageParser.T__20:
                        case languageParser.T__21:
                        case languageParser.T__22:
                            this.state = 2893;
                            localctx.rel = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__8) | (1 << languageParser.T__17) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21) | (1 << languageParser.T__22))) !== 0))) {
                                localctx.rel = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            localctx.cond = { op: this.valueWithTokenLocation((localctx.rel === null ? null : localctx.rel.text), localctx.rel), args: [localctx.expr.expr] };
                            this.state = 2897;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (languageParser.ALL - 38)) | (1 << (languageParser.ANY - 38)) | (1 << (languageParser.SOME - 38)))) !== 0)) {
                                this.state = 2895;
                                localctx.asa = this._input.LT(1);
                                _la = this._input.LA(1);
                                if (!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (languageParser.ALL - 38)) | (1 << (languageParser.ANY - 38)) | (1 << (languageParser.SOME - 38)))) !== 0))) {
                                    localctx.asa = this._errHandler.recoverInline(this);
                                }
                                else {
                                    this._errHandler.reportMatch(this);
                                    this.consume();
                                }
                                localctx.cond.quantifier = this.valueWithTokenLocation((localctx.asa === null ? null : localctx.asa.text).toLowerCase(), localctx.asa);
                            }
                            this.state = 2899;
                            localctx.e2 = this.expression();
                            localctx.cond.args.push(localctx.e2.expr);
                            break;
                        case languageParser.IS:
                            this.state = 2902;
                            this.match(languageParser.IS);
                            this.state = 2906;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.NOT:
                                    this.state = 2903;
                                    localctx.inn = this.match(languageParser.NOT);
                                    this.state = 2904;
                                    this.match(languageParser.NULL);
                                    break;
                                case languageParser.NULL:
                                    this.state = 2905;
                                    localctx.innu = this.match(languageParser.NULL);
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            localctx.cond = { op: localctx.inn ? this.valueWithTokenLocation('isNotNull', localctx.inn) : this.valueWithTokenLocation('isNull', localctx.innu), args: [localctx.expr.expr] };
                            break;
                        case languageParser.NOT:
                            localctx.cond = { args: [localctx.expr.expr] };
                            this.state = 2910;
                            this.match(languageParser.NOT);
                            this.state = 2911;
                            this.predicate(localctx.cond, true);
                            if (!localctx.cond.op)
                                localctx.cond = null;
                            break;
                        case languageParser.IN:
                        case languageParser.BETWEEN:
                        case languageParser.LIKE:
                            localctx.cond = { args: [localctx.expr.expr] };
                            this.state = 2915;
                            this.predicate(localctx.cond, false);
                            if (!localctx.cond.op)
                                localctx.cond = null;
                            break;
                        case languageParser.EOF:
                        case languageParser.T__0:
                        case languageParser.T__1:
                        case languageParser.T__2:
                        case languageParser.T__3:
                        case languageParser.T__6:
                        case languageParser.T__7:
                        case languageParser.T__14:
                        case languageParser.ALL:
                        case languageParser.DISTINCT:
                        case languageParser.FROM:
                        case languageParser.ON:
                        case languageParser.WHERE:
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ASPECT:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.DEFINE:
                        case languageParser.ENTITY:
                        case languageParser.EVENT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.JOIN:
                        case languageParser.LEFT:
                        case languageParser.LIMIT:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.RIGHT:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.USING:
                        case languageParser.VIEW:
                        case languageParser.HideAlternatives:
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.cond) {
                this.attachLocation(localctx.cond);
            }
            else {
                localctx.cond = localctx.expr.expr;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    predicate(cond, negated) {
        let localctx = new PredicateContext(this, this._ctx, this.state, cond, negated);
        this.enterRule(localctx, 194, languageParser.RULE_predicate);
        var _la = 0; // Token type
        try {
            this.state = 2942;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.IN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2922;
                    localctx.ino = this.match(languageParser.IN);
                    this.state = 2923;
                    localctx.e1 = this.expression();
                    localctx.cond.op = this.valueWithTokenLocation((negated) ? 'notIn' : 'in', localctx.ino);
                    localctx.cond.args.push(localctx.e1.expr);
                    break;
                case languageParser.BETWEEN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2926;
                    localctx.bw = this.match(languageParser.BETWEEN);
                    this.state = 2927;
                    localctx.e2 = this.expression();
                    localctx.cond.op = this.valueWithTokenLocation((negated) ? 'notBetween' : 'between', localctx.bw);
                    localctx.cond.args.push(localctx.e2.expr);
                    this.state = 2929;
                    this.match(languageParser.AND);
                    this.state = 2930;
                    localctx.e3 = this.expression();
                    localctx.cond.args.push(localctx.e3.expr);
                    break;
                case languageParser.LIKE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2933;
                    localctx.lk = this.match(languageParser.LIKE);
                    this.state = 2934;
                    localctx.e4 = this.expression();
                    localctx.cond.op = this.valueWithTokenLocation((negated) ? 'notLike' : 'like', localctx.lk);
                    localctx.cond.args.push(localctx.e4.expr);
                    this.state = 2940;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ESCAPE) {
                        this.state = 2936;
                        this.match(languageParser.ESCAPE);
                        this.state = 2937;
                        localctx.e5 = this.expression();
                        localctx.cond.args.push(localctx.e5.expr);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression() {
        let localctx = new ExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, languageParser.RULE_expression);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2944;
            localctx.e1 = this.expressionSum();
            localctx.expr = localctx.e1.expr;
            this.state = 2952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__23) {
                this.state = 2946;
                localctx.or = this.match(languageParser.T__23);
                this.state = 2947;
                localctx.e2 = this.expressionSum();
                localctx.expr = {
                    op: this.valueWithTokenLocation('||', localctx.or), args: [localctx.expr, localctx.e2.expr],
                    location: this.combinedLocation(localctx.expr, localctx.e2.expr)
                };
                this.state = 2954;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.expr) {
                this.attachLocation(localctx.expr);
            }
            else {
                localctx.expr = this.attachLocation({});
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expressionSum() {
        let localctx = new ExpressionSumContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, languageParser.RULE_expressionSum);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2955;
            localctx.e1 = this.expressionFactor();
            localctx.expr = localctx.e1.expr;
            this.state = 2963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__9 || _la === languageParser.T__10) {
                this.state = 2957;
                localctx.op = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === languageParser.T__9 || _la === languageParser.T__10)) {
                    localctx.op = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2958;
                localctx.e2 = this.expressionFactor();
                localctx.expr = {
                    op: this.valueWithTokenLocation((localctx.op === null ? null : localctx.op.text), localctx.op), args: [localctx.expr, localctx.e2.expr],
                    location: this.combinedLocation(localctx.expr, localctx.e2.expr)
                };
                this.state = 2965;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.expr)
                this.attachLocation(localctx.expr);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expressionFactor() {
        let localctx = new ExpressionFactorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, languageParser.RULE_expressionFactor);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2966;
            localctx.e1 = this.expressionTerm();
            localctx.expr = localctx.e1.expr;
            this.state = 2974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__11 || _la === languageParser.T__24) {
                this.state = 2968;
                localctx.op = this._input.LT(1);
                _la = this._input.LA(1);
                if (!(_la === languageParser.T__11 || _la === languageParser.T__24)) {
                    localctx.op = this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2969;
                localctx.e2 = this.expressionTerm();
                localctx.expr = {
                    op: this.valueWithTokenLocation((localctx.op === null ? null : localctx.op.text), localctx.op), args: [localctx.expr, localctx.e2.expr],
                    location: this.combinedLocation(localctx.expr, localctx.e2.expr)
                };
                this.state = 2976;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            if (localctx.expr)
                this.attachLocation(localctx.expr);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expressionTerm() {
        let localctx = new ExpressionTermContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, languageParser.RULE_expressionTerm);
        var _la = 0; // Token type
        try {
            this.state = 3067;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__9:
                case languageParser.T__10:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2977;
                    localctx.unary = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!(_la === languageParser.T__9 || _la === languageParser.T__10)) {
                        localctx.unary = this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2978;
                    localctx.e1 = this.expressionTerm();
                    localctx.expr = this.signedExpression(localctx.unary, localctx.e1.expr);
                    break;
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3065;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__27:
                        case languageParser.String:
                        case languageParser.QuotedLiteral:
                        case languageParser.Boolean:
                        case languageParser.NULL:
                        case languageParser.Number:
                            this.state = 2981;
                            localctx.val = this.literalValue();
                            localctx.expr = localctx.val.val;
                            break;
                        case languageParser.CAST:
                            this.state = 2984;
                            localctx.sf = this.specialFunction();
                            localctx.expr = localctx.sf.ret;
                            break;
                        case languageParser.CASE:
                            this.state = 2987;
                            localctx.ca = this.match(languageParser.CASE);
                            localctx.expr = { op: this.valueWithTokenLocation('case', localctx.ca), args: [] };
                            this.state = 3011;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.T__4:
                                case languageParser.T__5:
                                case languageParser.T__9:
                                case languageParser.T__10:
                                case languageParser.T__16:
                                case languageParser.T__27:
                                case languageParser.String:
                                case languageParser.QuotedLiteral:
                                case languageParser.Boolean:
                                case languageParser.CASE:
                                case languageParser.CAST:
                                case languageParser.NEW:
                                case languageParser.NULL:
                                case languageParser.Number:
                                case languageParser.ABSTRACT:
                                case languageParser.ACTION:
                                case languageParser.ACTIONS:
                                case languageParser.AND:
                                case languageParser.ANNOTATE:
                                case languageParser.ANNOTATION:
                                case languageParser.ARRAY:
                                case languageParser.ASC:
                                case languageParser.ASPECT:
                                case languageParser.ASSOCIATION:
                                case languageParser.BETWEEN:
                                case languageParser.COLUMNS:
                                case languageParser.COMPOSITION:
                                case languageParser.CONTEXT:
                                case languageParser.CROSS:
                                case languageParser.CURRENT:
                                case languageParser.DEFAULT:
                                case languageParser.DEFINE:
                                case languageParser.DEFINITIONS:
                                case languageParser.DESC:
                                case languageParser.ELEMENT:
                                case languageParser.ELEMENTS:
                                case languageParser.ELSE:
                                case languageParser.END:
                                case languageParser.ENTITY:
                                case languageParser.ENUM:
                                case languageParser.EVENT:
                                case languageParser.ESCAPE:
                                case languageParser.EXACT:
                                case languageParser.EXCEPT:
                                case languageParser.EXCLUDING:
                                case languageParser.EXTEND:
                                case languageParser.FIRST:
                                case languageParser.FLOATING:
                                case languageParser.FOLLOWING:
                                case languageParser.FULL:
                                case languageParser.FUNCTION:
                                case languageParser.GROUP:
                                case languageParser.HAVING:
                                case languageParser.INNER:
                                case languageParser.INTERSECT:
                                case languageParser.INTO:
                                case languageParser.IS:
                                case languageParser.JOIN:
                                case languageParser.LAST:
                                case languageParser.LEFT:
                                case languageParser.LIKE:
                                case languageParser.LIMIT:
                                case languageParser.LOCALIZED:
                                case languageParser.MANY:
                                case languageParser.MASKED:
                                case languageParser.MINUS:
                                case languageParser.MIXIN:
                                case languageParser.NAMESPACE:
                                case languageParser.NULLS:
                                case languageParser.OFFSET:
                                case languageParser.ONE:
                                case languageParser.OR:
                                case languageParser.ORDER:
                                case languageParser.OUTER:
                                case languageParser.PARAMETERS:
                                case languageParser.PARTITION:
                                case languageParser.PRECEDING:
                                case languageParser.PROJECTION:
                                case languageParser.REDIRECTED:
                                case languageParser.RETURNS:
                                case languageParser.RIGHT:
                                case languageParser.ROW:
                                case languageParser.ROWS:
                                case languageParser.SERVICE:
                                case languageParser.THEN:
                                case languageParser.TO:
                                case languageParser.TYPE:
                                case languageParser.UNION:
                                case languageParser.UNBOUNDED:
                                case languageParser.UP:
                                case languageParser.USING:
                                case languageParser.VARIABLE:
                                case languageParser.VIEW:
                                case languageParser.Identifier:
                                    this.state = 2989;
                                    localctx.e2 = this.expression();
                                    localctx.expr.args.push(localctx.e2.expr);
                                    this.state = 2997;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        this.state = 2991;
                                        localctx.ow = this.match(languageParser.WHEN);
                                        this.state = 2992;
                                        localctx.ew = this.expression();
                                        this.state = 2993;
                                        this.match(languageParser.THEN);
                                        this.state = 2994;
                                        localctx.e3 = this.expression();
                                        localctx.expr.args.push(this.createPrefixOp(localctx.ow, [localctx.ew.expr, localctx.e3.expr]));
                                        this.state = 2999;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === languageParser.WHEN);
                                    break;
                                case languageParser.WHEN:
                                    this.state = 3007;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    do {
                                        this.state = 3001;
                                        localctx.ow = this.match(languageParser.WHEN);
                                        this.state = 3002;
                                        localctx.c = this.condition();
                                        this.state = 3003;
                                        this.match(languageParser.THEN);
                                        this.state = 3004;
                                        localctx.e3 = this.expression();
                                        localctx.expr.args.push(this.createPrefixOp(localctx.ow, [localctx.c.cond, localctx.e3.expr]));
                                        this.state = 3009;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    } while (_la === languageParser.WHEN);
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            this.state = 3017;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.ELSE) {
                                this.state = 3013;
                                localctx.el = this.match(languageParser.ELSE);
                                this.state = 3014;
                                localctx.e4 = this.expression();
                                localctx.expr.args.push(this.createPrefixOp(localctx.el, [localctx.e4.expr]));
                            }
                            this.state = 3019;
                            this.match(languageParser.END);
                            break;
                        case languageParser.NEW:
                            this.state = 3021;
                            localctx.ne = this.match(languageParser.NEW);
                            this.state = 3022;
                            localctx.nqp = this.valuePath('ref', null);
                            localctx.expr = { op: this.valueWithTokenLocation('new', localctx.ne), args: [] };
                            this.notSupportedYet(localctx.ne);
                            break;
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ARRAY:
                        case languageParser.ASC:
                        case languageParser.ASPECT:
                        case languageParser.ASSOCIATION:
                        case languageParser.BETWEEN:
                        case languageParser.COLUMNS:
                        case languageParser.COMPOSITION:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.CURRENT:
                        case languageParser.DEFAULT:
                        case languageParser.DEFINE:
                        case languageParser.DEFINITIONS:
                        case languageParser.DESC:
                        case languageParser.ELEMENT:
                        case languageParser.ELEMENTS:
                        case languageParser.ELSE:
                        case languageParser.END:
                        case languageParser.ENTITY:
                        case languageParser.ENUM:
                        case languageParser.EVENT:
                        case languageParser.ESCAPE:
                        case languageParser.EXACT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FIRST:
                        case languageParser.FLOATING:
                        case languageParser.FOLLOWING:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.INTO:
                        case languageParser.IS:
                        case languageParser.JOIN:
                        case languageParser.LAST:
                        case languageParser.LEFT:
                        case languageParser.LIKE:
                        case languageParser.LIMIT:
                        case languageParser.LOCALIZED:
                        case languageParser.MANY:
                        case languageParser.MASKED:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.NAMESPACE:
                        case languageParser.NULLS:
                        case languageParser.OFFSET:
                        case languageParser.ONE:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.OUTER:
                        case languageParser.PARAMETERS:
                        case languageParser.PARTITION:
                        case languageParser.PRECEDING:
                        case languageParser.PROJECTION:
                        case languageParser.REDIRECTED:
                        case languageParser.RETURNS:
                        case languageParser.RIGHT:
                        case languageParser.ROW:
                        case languageParser.ROWS:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TO:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.UNBOUNDED:
                        case languageParser.UP:
                        case languageParser.USING:
                        case languageParser.VARIABLE:
                        case languageParser.VIEW:
                        case languageParser.Identifier:
                            this.state = 3025;
                            localctx.vp = this.valuePath('ref', null);
                            localctx.expr = this.valuePathAst(localctx.vp.qp);
                            this.setLocalTokenIfBefore('OVER', 'OVER', /^\($/i);
                            this.state = 3031;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === languageParser.OVER) {
                                this.state = 3028;
                                localctx.over = this.overClause();
                                localctx.expr.suffix = [localctx.over.over];
                            }
                            break;
                        case languageParser.T__4:
                            this.state = 3033;
                            this.match(languageParser.T__4);
                            this.state = 3039;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.ABSTRACT:
                                case languageParser.ACTION:
                                case languageParser.ACTIONS:
                                case languageParser.AND:
                                case languageParser.ANNOTATE:
                                case languageParser.ANNOTATION:
                                case languageParser.ARRAY:
                                case languageParser.ASC:
                                case languageParser.ASPECT:
                                case languageParser.ASSOCIATION:
                                case languageParser.BETWEEN:
                                case languageParser.COLUMNS:
                                case languageParser.COMPOSITION:
                                case languageParser.CONTEXT:
                                case languageParser.CROSS:
                                case languageParser.CURRENT:
                                case languageParser.DEFAULT:
                                case languageParser.DEFINE:
                                case languageParser.DEFINITIONS:
                                case languageParser.DESC:
                                case languageParser.ELEMENT:
                                case languageParser.ELEMENTS:
                                case languageParser.ELSE:
                                case languageParser.END:
                                case languageParser.ENTITY:
                                case languageParser.ENUM:
                                case languageParser.EVENT:
                                case languageParser.ESCAPE:
                                case languageParser.EXACT:
                                case languageParser.EXCEPT:
                                case languageParser.EXCLUDING:
                                case languageParser.EXTEND:
                                case languageParser.FIRST:
                                case languageParser.FLOATING:
                                case languageParser.FOLLOWING:
                                case languageParser.FULL:
                                case languageParser.FUNCTION:
                                case languageParser.GROUP:
                                case languageParser.HAVING:
                                case languageParser.INNER:
                                case languageParser.INTERSECT:
                                case languageParser.INTO:
                                case languageParser.IS:
                                case languageParser.JOIN:
                                case languageParser.LAST:
                                case languageParser.LEFT:
                                case languageParser.LIKE:
                                case languageParser.LIMIT:
                                case languageParser.LOCALIZED:
                                case languageParser.MANY:
                                case languageParser.MASKED:
                                case languageParser.MINUS:
                                case languageParser.MIXIN:
                                case languageParser.NAMESPACE:
                                case languageParser.NULLS:
                                case languageParser.OFFSET:
                                case languageParser.ONE:
                                case languageParser.OR:
                                case languageParser.ORDER:
                                case languageParser.OUTER:
                                case languageParser.PARAMETERS:
                                case languageParser.PARTITION:
                                case languageParser.PRECEDING:
                                case languageParser.PROJECTION:
                                case languageParser.REDIRECTED:
                                case languageParser.RETURNS:
                                case languageParser.RIGHT:
                                case languageParser.ROW:
                                case languageParser.ROWS:
                                case languageParser.SERVICE:
                                case languageParser.THEN:
                                case languageParser.TO:
                                case languageParser.TYPE:
                                case languageParser.UNION:
                                case languageParser.UNBOUNDED:
                                case languageParser.UP:
                                case languageParser.USING:
                                case languageParser.VARIABLE:
                                case languageParser.VIEW:
                                case languageParser.Identifier:
                                    this.state = 3034;
                                    localctx.vp = this.valuePath('paramref', this.startLocation());
                                    localctx.expr = localctx.vp.qp;
                                    localctx.expr.scope = 'param';
                                    break;
                                case languageParser.Number:
                                    this.state = 3037;
                                    localctx.pp = this.match(languageParser.Number);
                                    localctx.expr = { param: this.numberLiteral(localctx.pp), scope: 'param' };
                                    this.csnParseOnly('Positional parameter ":' + (localctx.pp === null ? null : localctx.pp.text) + '" is not supported', localctx.pp);
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            break;
                        case languageParser.T__16:
                            this.state = 3041;
                            localctx.qm = this.match(languageParser.T__16);
                            localctx.expr = { param: this.valueWithTokenLocation('?', localctx.qm), scope: 'param' };
                            this.csnParseOnly('Dynamic parameter "?" is not supported', localctx.qm);
                            break;
                        case languageParser.T__5:
                            this.state = 3043;
                            localctx.open = this.match(languageParser.T__5);
                            this.state = 3063;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 396, this._ctx);
                            switch (la_) {
                                case 1:
                                    this.state = 3044;
                                    localctx.qe = this.queryExpression();
                                    this.state = 3045;
                                    localctx.close = this.match(languageParser.T__6);
                                    localctx.expr = this.surroundByParens(localctx.qe.query, localctx.open, localctx.close, true);
                                    break;
                                case 2:
                                    this.state = 3048;
                                    localctx.c1 = this.condition();
                                    localctx.expr = [localctx.c1.cond];
                                    this.state = 3057;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === languageParser.T__2) {
                                        this.state = 3050;
                                        this.match(languageParser.T__2);
                                        if (localctx.expr.length > 1 && this.isStraightBefore(')'))
                                            break;
                                        this.state = 3052;
                                        localctx.cn = this.expression();
                                        if (localctx.cn.expr)
                                            localctx.expr.push(localctx.cn.expr);
                                        this.state = 3059;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 3060;
                                    localctx.close = this.match(languageParser.T__6);
                                    if (localctx.expr.length > 1)
                                        localctx.expr = { op: this.valueWithTokenLocation(',', localctx.open), args: localctx.expr };
                                    else if (localctx.expr[0]) // can be `null` if condition failed to parse
                                        localctx.expr = this.surroundByParens(localctx.expr[0], localctx.open, localctx.close);
                                    break;
                            }
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            /* #ATN 1 */ this.attachLocation(localctx.expr);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    specialFunction() {
        let localctx = new SpecialFunctionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 204, languageParser.RULE_specialFunction);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3069;
            localctx.ca = this.match(languageParser.CAST);
            this.state = 3070;
            this.match(languageParser.T__5);
            localctx.ret = {
                op: this.valueWithTokenLocation('cast', localctx.ca),
                args: this.createArray(),
                location: this.tokenLocation(localctx.ca)
            };
            this.state = 3072;
            localctx.e = this.expression();
            this.state = 3073;
            this.match(languageParser.AS);
            this.state = 3074;
            this.typeRefOptArgs(localctx.ret);
            localctx.ret.args.push(localctx.e.expr);
            this.state = 3076;
            this.match(languageParser.T__6);
            this.finalizeDictOrArray(localctx.ret.args);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    valuePath(category, location) {
        let localctx = new ValuePathContext(this, this._ctx, this.state, category, location);
        this.enterRule(localctx, 206, languageParser.RULE_valuePath);
        localctx.qp.location = location || this.startLocation();
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3079;
            localctx.id = this.ident(localctx.category);
            this.pushIdent(localctx.qp.path, localctx.id.id);
            this.state = 3086;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__5:
                    this.state = 3081;
                    this.pathArguments(localctx.id.id, localctx.id.id);
                    this.state = 3083;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__12) {
                        this.state = 3082;
                        this.cardinalityAndFilter(localctx.id.id);
                    }
                    break;
                case languageParser.T__12:
                    this.state = 3085;
                    this.cardinalityAndFilter(localctx.id.id);
                    break;
                case languageParser.EOF:
                case languageParser.T__0:
                case languageParser.T__1:
                case languageParser.T__2:
                case languageParser.T__3:
                case languageParser.T__4:
                case languageParser.T__6:
                case languageParser.T__7:
                case languageParser.T__8:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__11:
                case languageParser.T__14:
                case languageParser.T__15:
                case languageParser.T__17:
                case languageParser.T__18:
                case languageParser.T__19:
                case languageParser.T__20:
                case languageParser.T__21:
                case languageParser.T__22:
                case languageParser.T__23:
                case languageParser.T__24:
                case languageParser.ALL:
                case languageParser.AS:
                case languageParser.DISTINCT:
                case languageParser.FROM:
                case languageParser.IN:
                case languageParser.NOT:
                case languageParser.NULL:
                case languageParser.ON:
                case languageParser.WHEN:
                case languageParser.WHERE:
                case languageParser.WITH:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                case languageParser.OVER:
                case languageParser.HideAlternatives:
                case languageParser.GenericSeparator:
                case languageParser.DOTbeforeBRACE:
                    break;
                default:
                    break;
            }
            this.state = 3100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__15) {
                this.state = 3088;
                this.match(languageParser.T__15);
                this.state = 3089;
                localctx.id = this.ident('ref');
                this.pushIdent(localctx.qp.path, localctx.id.id);
                this.state = 3096;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case languageParser.T__5:
                        this.state = 3091;
                        this.pathArguments(localctx.id.id);
                        this.state = 3093;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === languageParser.T__12) {
                            this.state = 3092;
                            this.cardinalityAndFilter(localctx.id.id);
                        }
                        break;
                    case languageParser.T__12:
                        this.state = 3095;
                        this.cardinalityAndFilter(localctx.id.id);
                        break;
                    case languageParser.EOF:
                    case languageParser.T__0:
                    case languageParser.T__1:
                    case languageParser.T__2:
                    case languageParser.T__3:
                    case languageParser.T__4:
                    case languageParser.T__6:
                    case languageParser.T__7:
                    case languageParser.T__8:
                    case languageParser.T__9:
                    case languageParser.T__10:
                    case languageParser.T__11:
                    case languageParser.T__14:
                    case languageParser.T__15:
                    case languageParser.T__17:
                    case languageParser.T__18:
                    case languageParser.T__19:
                    case languageParser.T__20:
                    case languageParser.T__21:
                    case languageParser.T__22:
                    case languageParser.T__23:
                    case languageParser.T__24:
                    case languageParser.ALL:
                    case languageParser.AS:
                    case languageParser.DISTINCT:
                    case languageParser.FROM:
                    case languageParser.IN:
                    case languageParser.NOT:
                    case languageParser.NULL:
                    case languageParser.ON:
                    case languageParser.WHEN:
                    case languageParser.WHERE:
                    case languageParser.WITH:
                    case languageParser.ABSTRACT:
                    case languageParser.ACTION:
                    case languageParser.ACTIONS:
                    case languageParser.AND:
                    case languageParser.ANNOTATE:
                    case languageParser.ANNOTATION:
                    case languageParser.ARRAY:
                    case languageParser.ASC:
                    case languageParser.ASPECT:
                    case languageParser.ASSOCIATION:
                    case languageParser.BETWEEN:
                    case languageParser.COLUMNS:
                    case languageParser.COMPOSITION:
                    case languageParser.CONTEXT:
                    case languageParser.CROSS:
                    case languageParser.CURRENT:
                    case languageParser.DEFAULT:
                    case languageParser.DEFINE:
                    case languageParser.DEFINITIONS:
                    case languageParser.DESC:
                    case languageParser.ELEMENT:
                    case languageParser.ELEMENTS:
                    case languageParser.ELSE:
                    case languageParser.END:
                    case languageParser.ENTITY:
                    case languageParser.ENUM:
                    case languageParser.EVENT:
                    case languageParser.ESCAPE:
                    case languageParser.EXACT:
                    case languageParser.EXCEPT:
                    case languageParser.EXCLUDING:
                    case languageParser.EXTEND:
                    case languageParser.FIRST:
                    case languageParser.FLOATING:
                    case languageParser.FOLLOWING:
                    case languageParser.FULL:
                    case languageParser.FUNCTION:
                    case languageParser.GROUP:
                    case languageParser.HAVING:
                    case languageParser.INNER:
                    case languageParser.INTERSECT:
                    case languageParser.INTO:
                    case languageParser.IS:
                    case languageParser.JOIN:
                    case languageParser.LAST:
                    case languageParser.LEFT:
                    case languageParser.LIKE:
                    case languageParser.LIMIT:
                    case languageParser.LOCALIZED:
                    case languageParser.MANY:
                    case languageParser.MASKED:
                    case languageParser.MINUS:
                    case languageParser.MIXIN:
                    case languageParser.NAMESPACE:
                    case languageParser.NULLS:
                    case languageParser.OFFSET:
                    case languageParser.ONE:
                    case languageParser.OR:
                    case languageParser.ORDER:
                    case languageParser.OUTER:
                    case languageParser.PARAMETERS:
                    case languageParser.PARTITION:
                    case languageParser.PRECEDING:
                    case languageParser.PROJECTION:
                    case languageParser.REDIRECTED:
                    case languageParser.RETURNS:
                    case languageParser.RIGHT:
                    case languageParser.ROW:
                    case languageParser.ROWS:
                    case languageParser.SERVICE:
                    case languageParser.THEN:
                    case languageParser.TO:
                    case languageParser.TYPE:
                    case languageParser.UNION:
                    case languageParser.UNBOUNDED:
                    case languageParser.UP:
                    case languageParser.USING:
                    case languageParser.VARIABLE:
                    case languageParser.VIEW:
                    case languageParser.Identifier:
                    case languageParser.OVER:
                    case languageParser.HideAlternatives:
                    case languageParser.GenericSeparator:
                    case languageParser.DOTbeforeBRACE:
                        break;
                    default:
                        break;
                }
                this.state = 3102;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.qp);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fromArguments(pathStep) {
        let localctx = new FromArgumentsContext(this, this._ctx, this.state, pathStep);
        this.enterRule(localctx, 208, languageParser.RULE_fromArguments);
        if (!localctx.pathStep)
            localctx.pathStep = {};
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3103;
            this.match(languageParser.T__5);
            localctx.pathStep.args = this.createDict();
            localctx.pathStep['$' + 'syntax'] = ':';
            this.state = 3105;
            localctx.name = this.ident('paramname');
            this.state = 3106;
            this.match(languageParser.T__4);
            this.state = 3107;
            this.namedExpression(localctx.pathStep, localctx.name.id);
            this.state = 3116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__2) {
                this.state = 3108;
                this.match(languageParser.T__2);
                if (this.isStraightBefore(')'))
                    break;
                this.state = 3110;
                localctx.name = this.ident('paramname');
                this.state = 3111;
                this.match(languageParser.T__4);
                this.state = 3112;
                this.namedExpression(localctx.pathStep, localctx.name.id);
                this.state = 3118;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3119;
            this.match(languageParser.T__6);
            this.finalizeDictOrArray(localctx.pathStep.args);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    pathArguments(pathStep, considerSpecial) {
        let localctx = new PathArgumentsContext(this, this._ctx, this.state, pathStep, considerSpecial);
        this.enterRule(localctx, 210, languageParser.RULE_pathArguments);
        if (!localctx.pathStep)
            localctx.pathStep = {}; // grammar robustness, see test/negative/parser/NamedExpression.cds
        this.genericFunctionsStack.push(this['$' + 'genericKeywords']);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.excludeExpected(['ORDER']);
            this.state = 3123;
            this.match(languageParser.T__5);
            if (!this.setLocalTokenForId({ ':': 'HelperToken1', '=>': 'HelperToken2' }))
                this.prepareGenericKeywords(localctx.considerSpecial);
            this.state = 3171;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.HelperToken1:
                    localctx.pathStep.args = this.createDict();
                    localctx.pathStep['$' + 'syntax'] = ':';
                    this.state = 3126;
                    localctx.id = this.match(languageParser.HelperToken1);
                    this.state = 3127;
                    this.match(languageParser.T__4);
                    this.state = 3128;
                    this.namedExpression(localctx.pathStep, this.identAst(localctx.id, 'paramname', true));
                    this.state = 3137;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 3129;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore(')'))
                            break;
                        this.state = 3131;
                        localctx.name = this.ident('paramname');
                        this.state = 3132;
                        this.match(languageParser.T__4);
                        this.state = 3133;
                        this.namedExpression(localctx.pathStep, localctx.name.id);
                        this.state = 3139;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case languageParser.HelperToken2:
                    localctx.pathStep.args = this.createDict();
                    this.state = 3141;
                    localctx.id = this.match(languageParser.HelperToken2);
                    this.state = 3142;
                    this.match(languageParser.T__25);
                    this.state = 3143;
                    this.namedExpression(localctx.pathStep, this.identAst(localctx.id, 'paramname', true));
                    this.state = 3152;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 3144;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore(')'))
                            break;
                        this.state = 3146;
                        localctx.name = this.ident('paramname');
                        this.state = 3147;
                        this.match(languageParser.T__25);
                        this.state = 3148;
                        this.namedExpression(localctx.pathStep, localctx.name.id);
                        this.state = 3154;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__11:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.ALL:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.DISTINCT:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                case languageParser.HideAlternatives:
                case languageParser.GenericExpr:
                case languageParser.GenericIntro:
                    localctx.pathStep.args = this.createArray();
                    this.state = 3156;
                    this.funcExpression(localctx.pathStep, localctx.considerSpecial);
                    this.state = 3162;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 3157;
                        this.match(languageParser.T__2);
                        if (this.isStraightBefore(')'))
                            break;
                        this.state = 3159;
                        this.funcExpression(localctx.pathStep, localctx.considerSpecial);
                        this.state = 3164;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3168;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.ORDER) {
                        this.state = 3165;
                        localctx.ob = this.functionOrderByClause(localctx.pathStep.args[localctx.pathStep.args.length - 1]);
                        // Remove the last entry which was copied to localctx.ob.expr and push localctx.ob.expr.
                        localctx.pathStep.args[localctx.pathStep.args.length - 1] = localctx.ob.expr;
                    }
                    break;
                case languageParser.T__6:
                    localctx.pathStep.args = this.createArray();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 3173;
            this.match(languageParser.T__6);
            this.finalizeDictOrArray(localctx.pathStep.args);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            // see @init
            if (!localctx.pathStep.args)
                localctx.pathStep.args = [];
            this['$' + 'genericKeywords'] = this.genericFunctionsStack.pop();
            this.exitRule();
        }
        return localctx;
    }
    namedExpression(pathStep, id) {
        let localctx = new NamedExpressionContext(this, this._ctx, this.state, pathStep, id);
        this.enterRule(localctx, 212, languageParser.RULE_namedExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3176;
            localctx.elem = this.expression();
            if (localctx.pathStep && localctx.id) {
                this.addDef((localctx.elem) ? localctx.elem.expr : { location: localctx.id.location }, localctx.pathStep, 'args', 0, localctx.id);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    funcExpression(pathStep, considerSpecial) {
        let localctx = new FuncExpressionContext(this, this._ctx, this.state, pathStep, considerSpecial);
        this.enterRule(localctx, 214, languageParser.RULE_funcExpression);
        this.prepareGenericKeywords(localctx.considerSpecial);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3192;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__4:
                case languageParser.T__5:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__16:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.state = 3179;
                    localctx.expr = this.expression();
                    localctx.pathStep.args.push(localctx.expr.expr);
                    break;
                case languageParser.GenericExpr:
                    this.state = 3182;
                    this.match(languageParser.GenericExpr);
                    localctx.pathStep.args.push(this.xprToken());
                    break;
                case languageParser.GenericIntro:
                    this.state = 3184;
                    this.match(languageParser.GenericIntro);
                    localctx.pathStep.args.push(this.xprToken());
                    this.state = 3186;
                    localctx.expr = this.expression();
                    localctx.args = this.setLastAsXpr(localctx.pathStep.args);
                    localctx.args.push(localctx.expr.expr);
                    break;
                case languageParser.T__11:
                case languageParser.ALL:
                case languageParser.DISTINCT:
                case languageParser.HideAlternatives:
                    this.reportErrorForGenericKeyword();
                    this.state = 3190;
                    _la = this._input.LA(1);
                    if (!(_la === languageParser.T__11 || _la === languageParser.ALL || _la === languageParser.DISTINCT || _la === languageParser.HideAlternatives)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    localctx.pathStep.args.push(this.xprToken());
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 3216;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (languageParser.FROM - 46)) | (1 << (languageParser.IN - 46)) | (1 << (languageParser.WITH - 46)))) !== 0) || _la === languageParser.GROUP || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (languageParser.Identifier - 139)) | (1 << (languageParser.HideAlternatives - 139)) | (1 << (languageParser.GenericSeparator - 139)))) !== 0)) {
                if (!localctx.args)
                    localctx.args = this.setLastAsXpr(localctx.pathStep.args);
                this.state = 3212;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.prepareGenericKeywords(localctx.considerSpecial, 'separator');
                    this.state = 3199;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.GenericSeparator:
                            this.state = 3196;
                            this.match(languageParser.GenericSeparator);
                            break;
                        case languageParser.FROM:
                        case languageParser.IN:
                        case languageParser.WITH:
                        case languageParser.GROUP:
                        case languageParser.Identifier:
                        case languageParser.HideAlternatives:
                            this.reportErrorForGenericKeyword();
                            this.state = 3198;
                            _la = this._input.LA(1);
                            if (!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (languageParser.FROM - 46)) | (1 << (languageParser.IN - 46)) | (1 << (languageParser.WITH - 46)))) !== 0) || _la === languageParser.GROUP || _la === languageParser.Identifier || _la === languageParser.HideAlternatives)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    localctx.args.push(this.xprToken());
                    this.prepareGenericKeywords(localctx.considerSpecial, 'expr');
                    this.state = 3210;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__4:
                        case languageParser.T__5:
                        case languageParser.T__9:
                        case languageParser.T__10:
                        case languageParser.T__16:
                        case languageParser.T__27:
                        case languageParser.String:
                        case languageParser.QuotedLiteral:
                        case languageParser.Boolean:
                        case languageParser.CASE:
                        case languageParser.CAST:
                        case languageParser.NEW:
                        case languageParser.NULL:
                        case languageParser.Number:
                        case languageParser.ABSTRACT:
                        case languageParser.ACTION:
                        case languageParser.ACTIONS:
                        case languageParser.AND:
                        case languageParser.ANNOTATE:
                        case languageParser.ANNOTATION:
                        case languageParser.ARRAY:
                        case languageParser.ASC:
                        case languageParser.ASPECT:
                        case languageParser.ASSOCIATION:
                        case languageParser.BETWEEN:
                        case languageParser.COLUMNS:
                        case languageParser.COMPOSITION:
                        case languageParser.CONTEXT:
                        case languageParser.CROSS:
                        case languageParser.CURRENT:
                        case languageParser.DEFAULT:
                        case languageParser.DEFINE:
                        case languageParser.DEFINITIONS:
                        case languageParser.DESC:
                        case languageParser.ELEMENT:
                        case languageParser.ELEMENTS:
                        case languageParser.ELSE:
                        case languageParser.END:
                        case languageParser.ENTITY:
                        case languageParser.ENUM:
                        case languageParser.EVENT:
                        case languageParser.ESCAPE:
                        case languageParser.EXACT:
                        case languageParser.EXCEPT:
                        case languageParser.EXCLUDING:
                        case languageParser.EXTEND:
                        case languageParser.FIRST:
                        case languageParser.FLOATING:
                        case languageParser.FOLLOWING:
                        case languageParser.FULL:
                        case languageParser.FUNCTION:
                        case languageParser.GROUP:
                        case languageParser.HAVING:
                        case languageParser.INNER:
                        case languageParser.INTERSECT:
                        case languageParser.INTO:
                        case languageParser.IS:
                        case languageParser.JOIN:
                        case languageParser.LAST:
                        case languageParser.LEFT:
                        case languageParser.LIKE:
                        case languageParser.LIMIT:
                        case languageParser.LOCALIZED:
                        case languageParser.MANY:
                        case languageParser.MASKED:
                        case languageParser.MINUS:
                        case languageParser.MIXIN:
                        case languageParser.NAMESPACE:
                        case languageParser.NULLS:
                        case languageParser.OFFSET:
                        case languageParser.ONE:
                        case languageParser.OR:
                        case languageParser.ORDER:
                        case languageParser.OUTER:
                        case languageParser.PARAMETERS:
                        case languageParser.PARTITION:
                        case languageParser.PRECEDING:
                        case languageParser.PROJECTION:
                        case languageParser.REDIRECTED:
                        case languageParser.RETURNS:
                        case languageParser.RIGHT:
                        case languageParser.ROW:
                        case languageParser.ROWS:
                        case languageParser.SERVICE:
                        case languageParser.THEN:
                        case languageParser.TO:
                        case languageParser.TYPE:
                        case languageParser.UNION:
                        case languageParser.UNBOUNDED:
                        case languageParser.UP:
                        case languageParser.USING:
                        case languageParser.VARIABLE:
                        case languageParser.VIEW:
                        case languageParser.Identifier:
                            this.state = 3202;
                            localctx.expr = this.expression();
                            localctx.args.push(localctx.expr.expr);
                            break;
                        case languageParser.GenericExpr:
                            this.state = 3205;
                            this.match(languageParser.GenericExpr);
                            localctx.args.push(this.xprToken());
                            break;
                        case languageParser.ALL:
                        case languageParser.HideAlternatives:
                            this.reportErrorForGenericKeyword();
                            this.state = 3208;
                            _la = this._input.LA(1);
                            if (!(_la === languageParser.ALL || _la === languageParser.HideAlternatives)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            localctx.args.push(this.xprToken());
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 3214;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (languageParser.FROM - 46)) | (1 << (languageParser.IN - 46)) | (1 << (languageParser.WITH - 46)))) !== 0) || _la === languageParser.GROUP || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (languageParser.Identifier - 139)) | (1 << (languageParser.HideAlternatives - 139)) | (1 << (languageParser.GenericSeparator - 139)))) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cardinalityAndFilter(pathStep) {
        let localctx = new CardinalityAndFilterContext(this, this._ctx, this.state, pathStep);
        this.enterRule(localctx, 216, languageParser.RULE_cardinalityAndFilter);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3218;
            this.match(languageParser.T__12);
            this.state = 3220;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.Number) {
                this.state = 3219;
                this.optionalCardinality(pathStep);
            }
            this.state = 3222;
            this.optionalWhereForFilter();
            this.state = 3223;
            localctx.co = this.condition();
            if (localctx.pathStep)
                localctx.pathStep.where = localctx.co.cond;
            this.state = 3225;
            this.match(languageParser.T__14);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionalCardinality(pathStep) {
        let localctx = new OptionalCardinalityContext(this, this._ctx, this.state, pathStep);
        this.enterRule(localctx, 218, languageParser.RULE_optionalCardinality);
        try {
            this.enterOuterAlt(localctx, 1);
            if (this._input.LT(2).text !== ':')
                return localctx;
            this.state = 3228;
            localctx.trgMax = this.match(languageParser.Number);
            this.state = 3229;
            this.match(languageParser.T__4);
            if (localctx.pathStep)
                localctx.pathStep.cardinality = { targetMax: this.numberLiteral(localctx.trgMax), location: this.startLocation() };
            this._ctx.stop = this._input.LT(-1);
            if (localctx.pathStep && localctx.pathStep.cardinality)
                this.attachLocation(localctx.pathStep.cardinality);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionalWhereForFilter() {
        let localctx = new OptionalWhereForFilterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, languageParser.RULE_optionalWhereForFilter);
        try {
            this.enterOuterAlt(localctx, 1);
            var text = this.getCurrentToken().text.toUpperCase();
            if (!['WHERE', 'GROUP', 'ORDER', 'LIMIT'].includes(text))
                return;
            // TODO: should we somehow add those keywords to $(EXPECTED)?
            this.state = 3233;
            this.match(languageParser.WHERE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annoValue(assignment) {
        let localctx = new AnnoValueContext(this, this._ctx, this.state, assignment);
        this.enterRule(localctx, 222, languageParser.RULE_annoValue);
        var _la = 0; // Token type
        try {
            this.state = 3243;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                case languageParser.T__9:
                case languageParser.T__10:
                case languageParser.T__12:
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.NULL:
                case languageParser.Number:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3235;
                    localctx.base = this.annoValueBase(localctx.assignment);
                    break;
                case languageParser.T__7:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3237;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__7) {
                        this.state = 3236;
                        localctx.at = this.match(languageParser.T__7);
                    }
                    this.state = 3239;
                    this.annotationPath(localctx.assignment, 'ref', localctx.at);
                    this.state = 3241;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__27) {
                        this.state = 3240;
                        this.annotationPathVariant(localctx.assignment);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annoValueBase(assignment) {
        let localctx = new AnnoValueBaseContext(this, this._ctx, this.state, assignment);
        this.enterRule(localctx, 224, languageParser.RULE_annoValueBase);
        var _la = 0; // Token type
        try {
            this.state = 3305;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3245;
                    this.match(languageParser.T__1);
                    localctx.assignment['$' + 'flatten'] = [];
                    this.meltKeywordToIdentifier();
                    this.state = 3247;
                    this.flattenedValue(localctx.assignment);
                    this.state = 3253;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 3248;
                        this.match(languageParser.T__2);
                        this.meltKeywordToIdentifier();
                        if (this.isStraightBefore("}"))
                            break; // allow ',' before ')'
                        this.state = 3250;
                        this.flattenedValue(localctx.assignment);
                        this.state = 3255;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3256;
                    this.match(languageParser.T__3);
                    break;
                case languageParser.T__12:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3258;
                    this.match(languageParser.T__12);
                    localctx.assignment.val = [];
                    localctx.assignment.literal = 'array';
                    this.state = 3292;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__12) | (1 << languageParser.T__26) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.GROUP - 97)) | (1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
                        this.state = 3270;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case languageParser.T__1:
                            case languageParser.T__7:
                            case languageParser.T__9:
                            case languageParser.T__10:
                            case languageParser.T__12:
                            case languageParser.T__27:
                            case languageParser.String:
                            case languageParser.QuotedLiteral:
                            case languageParser.Boolean:
                            case languageParser.NULL:
                            case languageParser.Number:
                            case languageParser.ABSTRACT:
                            case languageParser.ACTION:
                            case languageParser.ACTIONS:
                            case languageParser.AND:
                            case languageParser.ANNOTATE:
                            case languageParser.ANNOTATION:
                            case languageParser.ARRAY:
                            case languageParser.ASC:
                            case languageParser.ASPECT:
                            case languageParser.ASSOCIATION:
                            case languageParser.BETWEEN:
                            case languageParser.COLUMNS:
                            case languageParser.COMPOSITION:
                            case languageParser.CONTEXT:
                            case languageParser.CROSS:
                            case languageParser.CURRENT:
                            case languageParser.DEFAULT:
                            case languageParser.DEFINE:
                            case languageParser.DEFINITIONS:
                            case languageParser.DESC:
                            case languageParser.ELEMENT:
                            case languageParser.ELEMENTS:
                            case languageParser.ELSE:
                            case languageParser.END:
                            case languageParser.ENTITY:
                            case languageParser.ENUM:
                            case languageParser.EVENT:
                            case languageParser.ESCAPE:
                            case languageParser.EXACT:
                            case languageParser.EXCEPT:
                            case languageParser.EXCLUDING:
                            case languageParser.EXTEND:
                            case languageParser.FIRST:
                            case languageParser.FLOATING:
                            case languageParser.FOLLOWING:
                            case languageParser.FULL:
                            case languageParser.FUNCTION:
                            case languageParser.GROUP:
                            case languageParser.HAVING:
                            case languageParser.INNER:
                            case languageParser.INTERSECT:
                            case languageParser.INTO:
                            case languageParser.IS:
                            case languageParser.JOIN:
                            case languageParser.LAST:
                            case languageParser.LEFT:
                            case languageParser.LIKE:
                            case languageParser.LIMIT:
                            case languageParser.LOCALIZED:
                            case languageParser.MANY:
                            case languageParser.MASKED:
                            case languageParser.MINUS:
                            case languageParser.MIXIN:
                            case languageParser.NAMESPACE:
                            case languageParser.NULLS:
                            case languageParser.OFFSET:
                            case languageParser.ONE:
                            case languageParser.OR:
                            case languageParser.ORDER:
                            case languageParser.OUTER:
                            case languageParser.PARAMETERS:
                            case languageParser.PARTITION:
                            case languageParser.PRECEDING:
                            case languageParser.PROJECTION:
                            case languageParser.REDIRECTED:
                            case languageParser.RETURNS:
                            case languageParser.RIGHT:
                            case languageParser.ROW:
                            case languageParser.ROWS:
                            case languageParser.SERVICE:
                            case languageParser.THEN:
                            case languageParser.TO:
                            case languageParser.TYPE:
                            case languageParser.UNION:
                            case languageParser.UNBOUNDED:
                            case languageParser.UP:
                            case languageParser.USING:
                            case languageParser.VARIABLE:
                            case languageParser.VIEW:
                            case languageParser.Identifier:
                                this.state = 3260;
                                localctx.head = this.annoSubValue();
                                localctx.assignment.val.push(localctx.head.val);
                                break;
                            case languageParser.T__26:
                                this.state = 3263;
                                localctx.e = this.match(languageParser.T__26);
                                this.state = 3267;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                if (_la === languageParser.UP) {
                                    this.state = 3264;
                                    this.match(languageParser.UP);
                                    this.state = 3265;
                                    this.match(languageParser.TO);
                                    this.state = 3266;
                                    localctx.upTo = this.annoSubValue();
                                }
                                {
                                    const item = { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) };
                                    localctx.assignment.val.push(item);
                                    if (localctx.upTo)
                                        item.upTo = localctx.upTo.val;
                                    localctx.seenEllipsis = !localctx.upTo || 'upTo';
                                }
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 3289;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__2) {
                            this.state = 3272;
                            this.match(languageParser.T__2);
                            if (this.isStraightBefore(']'))
                                break;
                            this.state = 3285;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case languageParser.T__1:
                                case languageParser.T__7:
                                case languageParser.T__9:
                                case languageParser.T__10:
                                case languageParser.T__12:
                                case languageParser.T__27:
                                case languageParser.String:
                                case languageParser.QuotedLiteral:
                                case languageParser.Boolean:
                                case languageParser.NULL:
                                case languageParser.Number:
                                case languageParser.ABSTRACT:
                                case languageParser.ACTION:
                                case languageParser.ACTIONS:
                                case languageParser.AND:
                                case languageParser.ANNOTATE:
                                case languageParser.ANNOTATION:
                                case languageParser.ARRAY:
                                case languageParser.ASC:
                                case languageParser.ASPECT:
                                case languageParser.ASSOCIATION:
                                case languageParser.BETWEEN:
                                case languageParser.COLUMNS:
                                case languageParser.COMPOSITION:
                                case languageParser.CONTEXT:
                                case languageParser.CROSS:
                                case languageParser.CURRENT:
                                case languageParser.DEFAULT:
                                case languageParser.DEFINE:
                                case languageParser.DEFINITIONS:
                                case languageParser.DESC:
                                case languageParser.ELEMENT:
                                case languageParser.ELEMENTS:
                                case languageParser.ELSE:
                                case languageParser.END:
                                case languageParser.ENTITY:
                                case languageParser.ENUM:
                                case languageParser.EVENT:
                                case languageParser.ESCAPE:
                                case languageParser.EXACT:
                                case languageParser.EXCEPT:
                                case languageParser.EXCLUDING:
                                case languageParser.EXTEND:
                                case languageParser.FIRST:
                                case languageParser.FLOATING:
                                case languageParser.FOLLOWING:
                                case languageParser.FULL:
                                case languageParser.FUNCTION:
                                case languageParser.GROUP:
                                case languageParser.HAVING:
                                case languageParser.INNER:
                                case languageParser.INTERSECT:
                                case languageParser.INTO:
                                case languageParser.IS:
                                case languageParser.JOIN:
                                case languageParser.LAST:
                                case languageParser.LEFT:
                                case languageParser.LIKE:
                                case languageParser.LIMIT:
                                case languageParser.LOCALIZED:
                                case languageParser.MANY:
                                case languageParser.MASKED:
                                case languageParser.MINUS:
                                case languageParser.MIXIN:
                                case languageParser.NAMESPACE:
                                case languageParser.NULLS:
                                case languageParser.OFFSET:
                                case languageParser.ONE:
                                case languageParser.OR:
                                case languageParser.ORDER:
                                case languageParser.OUTER:
                                case languageParser.PARAMETERS:
                                case languageParser.PARTITION:
                                case languageParser.PRECEDING:
                                case languageParser.PROJECTION:
                                case languageParser.REDIRECTED:
                                case languageParser.RETURNS:
                                case languageParser.RIGHT:
                                case languageParser.ROW:
                                case languageParser.ROWS:
                                case languageParser.SERVICE:
                                case languageParser.THEN:
                                case languageParser.TO:
                                case languageParser.TYPE:
                                case languageParser.UNION:
                                case languageParser.UNBOUNDED:
                                case languageParser.UP:
                                case languageParser.USING:
                                case languageParser.VARIABLE:
                                case languageParser.VIEW:
                                case languageParser.Identifier:
                                    this.state = 3274;
                                    localctx.tail = this.annoSubValue();
                                    localctx.assignment.val.push(localctx.tail.val);
                                    break;
                                case languageParser.T__26:
                                    localctx.upTo = null;
                                    this.state = 3278;
                                    localctx.e = this.match(languageParser.T__26);
                                    this.state = 3282;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === languageParser.UP) {
                                        this.state = 3279;
                                        this.match(languageParser.UP);
                                        this.state = 3280;
                                        this.match(languageParser.TO);
                                        this.state = 3281;
                                        localctx.upTo = this.annoSubValue();
                                    }
                                    {
                                        const item = { literal: 'token', val: '...', location: this.tokenLocation(localctx.e) };
                                        if (localctx.upTo)
                                            item.upTo = localctx.upTo.val;
                                        localctx.assignment.val.push(item);
                                        if (localctx.seenEllipsis === true) // TODO: adapt msg to UP TO
                                            this.error('syntax-unexpected-ellipsis', localctx.e, { '#': 'std', code: '...' });
                                        else
                                            localctx.seenEllipsis = !localctx.upTo || 'upTo';
                                    }
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            this.state = 3291;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 3294;
                    localctx.cb = this.match(languageParser.T__14);
                    if (localctx.seenEllipsis === 'upTo')
                        this.error('syntax-expecting-ellipsis', localctx.cb, // at closing bracket
                        { code: '... up to', newcode: '...' }, 'Expecting an array item $(NEWCODE) after an item with $(CODE)');
                    break;
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.NULL:
                case languageParser.Number:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3296;
                    localctx.v1 = this.literalValue();
                    Object.assign(localctx.assignment, localctx.v1.val);
                    break;
                case languageParser.T__9:
                case languageParser.T__10:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3301;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__9:
                            this.state = 3299;
                            localctx.plus = this.match(languageParser.T__9);
                            break;
                        case languageParser.T__10:
                            this.state = 3300;
                            localctx.min = this.match(languageParser.T__10);
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 3303;
                    localctx.num = this.match(languageParser.Number);
                    Object.assign(localctx.assignment, this.numberLiteral(localctx.num, localctx.plus || localctx.min));
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.assignment);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    flattenedValue(assignment) {
        let localctx = new FlattenedValueContext(this, this._ctx, this.state, assignment);
        this.enterRule(localctx, 226, languageParser.RULE_flattenedValue);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__7) {
                this.state = 3307;
                localctx.at = this.match(languageParser.T__7);
            }
            this.state = 3310;
            this.annotationPath(localctx.val.name, 'name', localctx.at);
            this.state = 3312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__27) {
                this.state = 3311;
                this.annotationPathVariant(localctx.val.name);
            }
            this.state = 3317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 3314;
                this.match(languageParser.T__4);
                this.meltKeywordToIdentifier(true);
                this.state = 3316;
                this.annoValue(localctx.val);
            }
            localctx.assignment['$' + 'flatten'].push(localctx.val);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedValue(struct) {
        let localctx = new NamedValueContext(this, this._ctx, this.state, struct);
        this.enterRule(localctx, 228, languageParser.RULE_namedValue);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__7) {
                this.state = 3321;
                localctx.at = this.match(languageParser.T__7);
            }
            this.state = 3324;
            this.annotationPath(localctx.val.name, 'name', localctx.at);
            this.state = 3329;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === languageParser.T__4) {
                this.state = 3325;
                this.match(languageParser.T__4);
                this.state = 3326;
                localctx.sub = this.annoSubValue();
                Object.assign(localctx.val, localctx.sub.val);
            }
            if (!localctx.val.location)
                localctx.val.location = localctx.val.name.location;
            this.addDef(localctx.val, localctx.struct, 'struct', null, localctx.val.name); // TODO: re-check name
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annoSubValue() {
        let localctx = new AnnoSubValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 230, languageParser.RULE_annoSubValue);
        var _la = 0; // Token type
        try {
            this.state = 3380;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3333;
                    this.match(languageParser.T__1);
                    localctx.val.struct = Object.create(null);
                    localctx.val.literal = 'struct';
                    this.meltKeywordToIdentifier();
                    this.state = 3336;
                    this.namedValue(localctx.val);
                    this.state = 3342;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === languageParser.T__2) {
                        this.state = 3337;
                        this.match(languageParser.T__2);
                        this.meltKeywordToIdentifier();
                        if (this.isStraightBefore("}"))
                            break; // allow ',' before '}'
                        this.state = 3339;
                        this.namedValue(localctx.val);
                        this.state = 3344;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3345;
                    this.match(languageParser.T__3);
                    break;
                case languageParser.T__12:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3347;
                    this.match(languageParser.T__12);
                    localctx.val.val = [];
                    localctx.val.literal = 'array';
                    this.state = 3361;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__7) | (1 << languageParser.T__9) | (1 << languageParser.T__10) | (1 << languageParser.T__12) | (1 << languageParser.T__27))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (languageParser.String - 33)) | (1 << (languageParser.QuotedLiteral - 33)) | (1 << (languageParser.Boolean - 33)) | (1 << (languageParser.NULL - 33)) | (1 << (languageParser.Number - 33)) | (1 << (languageParser.ABSTRACT - 33)) | (1 << (languageParser.ACTION - 33)) | (1 << (languageParser.ACTIONS - 33)) | (1 << (languageParser.AND - 33)) | (1 << (languageParser.ANNOTATE - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (languageParser.ANNOTATION - 65)) | (1 << (languageParser.ARRAY - 65)) | (1 << (languageParser.ASC - 65)) | (1 << (languageParser.ASPECT - 65)) | (1 << (languageParser.ASSOCIATION - 65)) | (1 << (languageParser.BETWEEN - 65)) | (1 << (languageParser.COLUMNS - 65)) | (1 << (languageParser.COMPOSITION - 65)) | (1 << (languageParser.CONTEXT - 65)) | (1 << (languageParser.CROSS - 65)) | (1 << (languageParser.CURRENT - 65)) | (1 << (languageParser.DEFAULT - 65)) | (1 << (languageParser.DEFINE - 65)) | (1 << (languageParser.DEFINITIONS - 65)) | (1 << (languageParser.DESC - 65)) | (1 << (languageParser.ELEMENT - 65)) | (1 << (languageParser.ELEMENTS - 65)) | (1 << (languageParser.ELSE - 65)) | (1 << (languageParser.END - 65)) | (1 << (languageParser.ENTITY - 65)) | (1 << (languageParser.ENUM - 65)) | (1 << (languageParser.EVENT - 65)) | (1 << (languageParser.ESCAPE - 65)) | (1 << (languageParser.EXACT - 65)) | (1 << (languageParser.EXCEPT - 65)) | (1 << (languageParser.EXCLUDING - 65)) | (1 << (languageParser.EXTEND - 65)) | (1 << (languageParser.FIRST - 65)) | (1 << (languageParser.FLOATING - 65)) | (1 << (languageParser.FOLLOWING - 65)) | (1 << (languageParser.FULL - 65)) | (1 << (languageParser.FUNCTION - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (languageParser.GROUP - 97)) | (1 << (languageParser.HAVING - 97)) | (1 << (languageParser.INNER - 97)) | (1 << (languageParser.INTERSECT - 97)) | (1 << (languageParser.INTO - 97)) | (1 << (languageParser.IS - 97)) | (1 << (languageParser.JOIN - 97)) | (1 << (languageParser.LAST - 97)) | (1 << (languageParser.LEFT - 97)) | (1 << (languageParser.LIKE - 97)) | (1 << (languageParser.LIMIT - 97)) | (1 << (languageParser.LOCALIZED - 97)) | (1 << (languageParser.MANY - 97)) | (1 << (languageParser.MASKED - 97)) | (1 << (languageParser.MINUS - 97)) | (1 << (languageParser.MIXIN - 97)) | (1 << (languageParser.NAMESPACE - 97)) | (1 << (languageParser.NULLS - 97)) | (1 << (languageParser.OFFSET - 97)) | (1 << (languageParser.ONE - 97)) | (1 << (languageParser.OR - 97)) | (1 << (languageParser.ORDER - 97)) | (1 << (languageParser.OUTER - 97)) | (1 << (languageParser.PARAMETERS - 97)) | (1 << (languageParser.PARTITION - 97)) | (1 << (languageParser.PRECEDING - 97)) | (1 << (languageParser.PROJECTION - 97)) | (1 << (languageParser.REDIRECTED - 97)) | (1 << (languageParser.RETURNS - 97)) | (1 << (languageParser.RIGHT - 97)) | (1 << (languageParser.ROW - 97)) | (1 << (languageParser.ROWS - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (languageParser.SERVICE - 129)) | (1 << (languageParser.THEN - 129)) | (1 << (languageParser.TO - 129)) | (1 << (languageParser.TYPE - 129)) | (1 << (languageParser.UNION - 129)) | (1 << (languageParser.UNBOUNDED - 129)) | (1 << (languageParser.UP - 129)) | (1 << (languageParser.USING - 129)) | (1 << (languageParser.VARIABLE - 129)) | (1 << (languageParser.VIEW - 129)) | (1 << (languageParser.Identifier - 129)))) !== 0)) {
                        this.state = 3349;
                        localctx.head = this.annoSubValue();
                        localctx.val.val.push(localctx.head.val);
                        this.state = 3358;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        while (_la === languageParser.T__2) {
                            this.state = 3351;
                            this.match(languageParser.T__2);
                            if (this.isStraightBefore(']'))
                                break;
                            this.state = 3353;
                            localctx.tail = this.annoSubValue();
                            localctx.val.val.push(localctx.tail.val);
                            this.state = 3360;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        }
                    }
                    this.state = 3363;
                    this.match(languageParser.T__14);
                    break;
                case languageParser.T__27:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.NULL:
                case languageParser.Number:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3364;
                    localctx.v1 = this.literalValue();
                    Object.assign(localctx.val, localctx.v1.val);
                    break;
                case languageParser.T__9:
                case languageParser.T__10:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3369;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case languageParser.T__9:
                            this.state = 3367;
                            localctx.plus = this.match(languageParser.T__9);
                            break;
                        case languageParser.T__10:
                            this.state = 3368;
                            localctx.min = this.match(languageParser.T__10);
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 3371;
                    localctx.num = this.match(languageParser.Number);
                    Object.assign(localctx.val, this.numberLiteral(localctx.num, localctx.plus || localctx.min));
                    break;
                case languageParser.T__7:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.BETWEEN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEFINITIONS:
                case languageParser.DESC:
                case languageParser.ELEMENT:
                case languageParser.ELEMENTS:
                case languageParser.ELSE:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.ESCAPE:
                case languageParser.EXACT:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXTEND:
                case languageParser.FIRST:
                case languageParser.FLOATING:
                case languageParser.FOLLOWING:
                case languageParser.FULL:
                case languageParser.FUNCTION:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.LAST:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.NAMESPACE:
                case languageParser.NULLS:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OUTER:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PRECEDING:
                case languageParser.PROJECTION:
                case languageParser.REDIRECTED:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROW:
                case languageParser.ROWS:
                case languageParser.SERVICE:
                case languageParser.THEN:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNBOUNDED:
                case languageParser.UP:
                case languageParser.USING:
                case languageParser.VARIABLE:
                case languageParser.VIEW:
                case languageParser.Identifier:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3374;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__7) {
                        this.state = 3373;
                        localctx.at = this.match(languageParser.T__7);
                    }
                    this.state = 3376;
                    this.annotationPath(localctx.val, 'ref', localctx.at);
                    this.state = 3378;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === languageParser.T__27) {
                        this.state = 3377;
                        this.annotationPathVariant(localctx.val);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.val);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literalValue() {
        let localctx = new LiteralValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 232, languageParser.RULE_literalValue);
        localctx.tok = this.getCurrentToken();
        try {
            this.state = 3396;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case languageParser.T__27:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3382;
                    this.match(languageParser.T__27);
                    this.state = 3383;
                    localctx.name = this.ident('enumref');
                    localctx.val = { literal: 'enum', sym: localctx.name.id };
                    break;
                case languageParser.NULL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3386;
                    this.match(languageParser.NULL);
                    localctx.val = { literal: 'null', val: null };
                    break;
                case languageParser.Boolean:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3388;
                    this.match(languageParser.Boolean);
                    localctx.val = { literal: 'boolean', val: localctx.tok.text.toLowerCase() != 'false' };
                    break;
                case languageParser.Number:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3390;
                    this.match(languageParser.Number);
                    localctx.val = this.numberLiteral(localctx.tok, '');
                    break;
                case languageParser.String:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3392;
                    this.match(languageParser.String);
                    localctx.val = this.quotedLiteral(localctx.tok, 'string');
                    break;
                case languageParser.QuotedLiteral:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 3394;
                    this.match(languageParser.QuotedLiteral);
                    localctx.val = this.quotedLiteral(localctx.tok);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.val);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simplePath(art, category) {
        let localctx = new SimplePathContext(this, this._ctx, this.state, art, category);
        this.enterRule(localctx, 234, languageParser.RULE_simplePath);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3398;
            localctx.head = this.ident(localctx.category);
            if (!localctx.art.path)
                localctx.art.path = [];
            this.pushIdent(localctx.art.path, localctx.head.id);
            if (localctx.category === 'artref')
                localctx.art.scope = 0;
            this.state = 3406;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__15) {
                this.state = 3400;
                this.match(languageParser.T__15);
                this.state = 3401;
                localctx.tail = this.ident(localctx.category);
                this.pushIdent(localctx.art.path, localctx.tail.id);
                this.state = 3408;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationPath(art, category, headat) {
        let localctx = new AnnotationPathContext(this, this._ctx, this.state, art, category, headat);
        this.enterRule(localctx, 236, languageParser.RULE_annotationPath);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3409;
            localctx.head = this.ident(localctx.category);
            localctx.art.path = [];
            this.pushIdent(localctx.art.path, localctx.head.id, localctx.headat);
            if (localctx.category === 'artref')
                localctx.art.scope = 0;
            this.state = 3420;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === languageParser.T__15) {
                this.state = 3411;
                this.match(languageParser.T__15);
                this.state = 3413;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === languageParser.T__7) {
                    this.state = 3412;
                    localctx.at = this.match(languageParser.T__7);
                }
                this.state = 3415;
                localctx.tail = this.ident(localctx.category);
                this.pushIdent(localctx.art.path, localctx.tail.id, localctx.at);
                // Otherwise, localctx.at may continue to be set after one `.@anno` segment.
                localctx.at = null;
                this.state = 3422;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    annotationPathVariant(art) {
        let localctx = new AnnotationPathVariantContext(this, this._ctx, this.state, art);
        this.enterRule(localctx, 238, languageParser.RULE_annotationPathVariant);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3423;
            this.match(languageParser.T__27);
            this.meltKeywordToIdentifier();
            this.state = 3425;
            this.simplePath(localctx.variant, 'variant');
            localctx.art.variant = localctx.variant;
            this._ctx.stop = this._input.LT(-1);
            this.attachLocation(localctx.art);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identNoKeyword(category) {
        let localctx = new IdentNoKeywordContext(this, this._ctx, this.state, category);
        this.enterRule(localctx, 240, languageParser.RULE_identNoKeyword);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3428;
            this.match(languageParser.Identifier);
            this._ctx.stop = this._input.LT(-1);
            localctx.id = this.identAst(localctx.stop, localctx.category);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ident(category) {
        let localctx = new IdentContext(this, this._ctx, this.state, category);
        this.enterRule(localctx, 242, languageParser.RULE_ident);
        var _la = 0; // Token type
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3430;
            _la = this._input.LA(1);
            if (!(((((_la - 60)) & ~0x1f) == 0 && ((1 << (_la - 60)) & ((1 << (languageParser.ABSTRACT - 60)) | (1 << (languageParser.ACTION - 60)) | (1 << (languageParser.ACTIONS - 60)) | (1 << (languageParser.AND - 60)) | (1 << (languageParser.ANNOTATE - 60)) | (1 << (languageParser.ANNOTATION - 60)) | (1 << (languageParser.ARRAY - 60)) | (1 << (languageParser.ASC - 60)) | (1 << (languageParser.ASPECT - 60)) | (1 << (languageParser.ASSOCIATION - 60)) | (1 << (languageParser.BETWEEN - 60)) | (1 << (languageParser.COLUMNS - 60)) | (1 << (languageParser.COMPOSITION - 60)) | (1 << (languageParser.CONTEXT - 60)) | (1 << (languageParser.CROSS - 60)) | (1 << (languageParser.CURRENT - 60)) | (1 << (languageParser.DEFAULT - 60)) | (1 << (languageParser.DEFINE - 60)) | (1 << (languageParser.DEFINITIONS - 60)) | (1 << (languageParser.DESC - 60)) | (1 << (languageParser.ELEMENT - 60)) | (1 << (languageParser.ELEMENTS - 60)) | (1 << (languageParser.ELSE - 60)) | (1 << (languageParser.END - 60)) | (1 << (languageParser.ENTITY - 60)) | (1 << (languageParser.ENUM - 60)) | (1 << (languageParser.EVENT - 60)) | (1 << (languageParser.ESCAPE - 60)) | (1 << (languageParser.EXACT - 60)) | (1 << (languageParser.EXCEPT - 60)) | (1 << (languageParser.EXCLUDING - 60)) | (1 << (languageParser.EXTEND - 60)))) !== 0) || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (languageParser.FIRST - 92)) | (1 << (languageParser.FLOATING - 92)) | (1 << (languageParser.FOLLOWING - 92)) | (1 << (languageParser.FULL - 92)) | (1 << (languageParser.FUNCTION - 92)) | (1 << (languageParser.GROUP - 92)) | (1 << (languageParser.HAVING - 92)) | (1 << (languageParser.INNER - 92)) | (1 << (languageParser.INTERSECT - 92)) | (1 << (languageParser.INTO - 92)) | (1 << (languageParser.IS - 92)) | (1 << (languageParser.JOIN - 92)) | (1 << (languageParser.LAST - 92)) | (1 << (languageParser.LEFT - 92)) | (1 << (languageParser.LIKE - 92)) | (1 << (languageParser.LIMIT - 92)) | (1 << (languageParser.LOCALIZED - 92)) | (1 << (languageParser.MANY - 92)) | (1 << (languageParser.MASKED - 92)) | (1 << (languageParser.MINUS - 92)) | (1 << (languageParser.MIXIN - 92)) | (1 << (languageParser.NAMESPACE - 92)) | (1 << (languageParser.NULLS - 92)) | (1 << (languageParser.OFFSET - 92)) | (1 << (languageParser.ONE - 92)) | (1 << (languageParser.OR - 92)) | (1 << (languageParser.ORDER - 92)) | (1 << (languageParser.OUTER - 92)) | (1 << (languageParser.PARAMETERS - 92)) | (1 << (languageParser.PARTITION - 92)) | (1 << (languageParser.PRECEDING - 92)) | (1 << (languageParser.PROJECTION - 92)))) !== 0) || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.REDIRECTED - 124)) | (1 << (languageParser.RETURNS - 124)) | (1 << (languageParser.RIGHT - 124)) | (1 << (languageParser.ROW - 124)) | (1 << (languageParser.ROWS - 124)) | (1 << (languageParser.SERVICE - 124)) | (1 << (languageParser.THEN - 124)) | (1 << (languageParser.TO - 124)) | (1 << (languageParser.TYPE - 124)) | (1 << (languageParser.UNION - 124)) | (1 << (languageParser.UNBOUNDED - 124)) | (1 << (languageParser.UP - 124)) | (1 << (languageParser.USING - 124)) | (1 << (languageParser.VARIABLE - 124)) | (1 << (languageParser.VIEW - 124)) | (1 << (languageParser.Identifier - 124)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
            this._ctx.stop = this._input.LT(-1);
            localctx.id = this.identAst(localctx.stop, localctx.category);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
exports.default = languageParser;
languageParser.grammarFileName = "language.g4";
languageParser.literalNames = [null, "';'", "'{'", "','", "'}'", "':'", "'('",
    "')'", "'@'", "'='", "'+'", "'-'", "'*'", "'['",
    "'..'", "']'", "'.'", "'?'", "'<>'", "'>'",
    "'>='", "'<'", "'<='", "'!='", "'||'", "'/'",
    "'=>'", "'...'", "'#'"];
languageParser.symbolicNames = [null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, "WhiteSpace",
    "DocComment", "Comment", "LineComment", "String",
    "QuotedLiteral", "UnterminatedLiteral", "UnterminatedDelimitedIdentifier",
    "Boolean", "ALL", "ANY", "AS", "BY", "CASE",
    "CAST", "DISTINCT", "EXISTS", "FROM", "IN",
    "KEY", "NEW", "NOT", "NULL", "OF", "ON", "SELECT",
    "SOME", "WHEN", "WHERE", "WITH", "Number",
    "ABSTRACT", "ACTION", "ACTIONS", "AND", "ANNOTATE",
    "ANNOTATION", "ARRAY", "ASC", "ASPECT", "ASSOCIATION",
    "BETWEEN", "COLUMNS", "COMPOSITION", "CONTEXT",
    "CROSS", "CURRENT", "DEFAULT", "DEFINE", "DEFINITIONS",
    "DESC", "ELEMENT", "ELEMENTS", "ELSE", "END",
    "ENTITY", "ENUM", "EVENT", "ESCAPE", "EXACT",
    "EXCEPT", "EXCLUDING", "EXTEND", "FIRST", "FLOATING",
    "FOLLOWING", "FULL", "FUNCTION", "GROUP", "HAVING",
    "INNER", "INTERSECT", "INTO", "IS", "JOIN",
    "LAST", "LEFT", "LIKE", "LIMIT", "LOCALIZED",
    "MANY", "MASKED", "MINUS", "MIXIN", "NAMESPACE",
    "NULLS", "OFFSET", "ONE", "OR", "ORDER", "OUTER",
    "PARAMETERS", "PARTITION", "PRECEDING", "PROJECTION",
    "REDIRECTED", "RETURNS", "RIGHT", "ROW", "ROWS",
    "SERVICE", "THEN", "TO", "TYPE", "UNION", "UNBOUNDED",
    "UP", "USING", "VARIABLE", "VIEW", "Identifier",
    "IllegalToken", "VIRTUAL", "OVER", "HelperToken1",
    "HelperToken2", "HideAlternatives", "GenericExpr",
    "GenericSeparator", "GenericIntro", "DOTbeforeBRACE",
    "COMPOSITIONofBRACE"];
languageParser.ruleNames = ["start", "queryEOF", "conditionEOF", "namespaceDeclaration",
    "usingDeclaration", "innerUsing", "externalPath",
    "annotationAssignment_1", "annotationAssignment_paren",
    "annotationAssignment_fix", "annotationAssignment_ll1",
    "annotationAssignment_atn", "requiredSemi", "optionalSemi",
    "artifactDef", "contextDef", "extendContext", "entityDef",
    "projectionSpec", "projectionClauses", "excludingClause",
    "projectionExclusion", "extendEntity", "extendForEntity",
    "extendProjection", "actionFunctionDef", "actionFunctionMainDef",
    "eventDef", "aspectDef", "typeDef", "extendType",
    "annotationDef", "extendArtifact", "extendWithOptElementsOrType",
    "annotateArtifact", "annotateElement", "annotateAction",
    "annotateParam", "enumSymbolDef", "defaultValue",
    "elementDefOrExtend", "elementDef", "mixinElementDef",
    "elementDefInner", "extendElement", "selectItemDef",
    "selectItemDefBody", "bracedSelectItemListDef",
    "selectItemInlineList", "selectItemInlineDef",
    "parameterListDef", "parameterDef", "nullability",
    "elementProperties", "viewDef", "includeRef", "typeSpec",
    "returnTypeSpec", "typeSpecSemi", "typeStruct",
    "typeCompoStruct", "typeArray", "typeAssociationBase",
    "typeAssociationCont", "typeAssociationElementCont",
    "typeToOne", "typeToMany", "cardinality", "foreignKey",
    "typeTypeOf", "typeRefOptArgs", "typeRefArgs",
    "typeNamedArgList", "typeNamedArg", "queryExpression",
    "orderByClause", "functionOrderByClause", "overOrderByClause",
    "partitionByClause", "windowFrameClause", "windowFrameExtentSpec",
    "windowFrameBoundSpec", "windowFrameStartSpec",
    "overClause", "limitClause", "orderBySpec", "queryTerm",
    "queryPrimary", "querySource", "tableExpression",
    "joinOp", "joinCardinality", "tableTerm", "fromPath",
    "condition", "conditionAnd", "conditionTerm", "predicate",
    "expression", "expressionSum", "expressionFactor",
    "expressionTerm", "specialFunction", "valuePath",
    "fromArguments", "pathArguments", "namedExpression",
    "funcExpression", "cardinalityAndFilter", "optionalCardinality",
    "optionalWhereForFilter", "annoValue", "annoValueBase",
    "flattenedValue", "namedValue", "annoSubValue",
    "literalValue", "simplePath", "annotationPath",
    "annotationPathVariant", "identNoKeyword", "ident"];
languageParser.EOF = antlr4_1.default.Token.EOF;
languageParser.T__0 = 1;
languageParser.T__1 = 2;
languageParser.T__2 = 3;
languageParser.T__3 = 4;
languageParser.T__4 = 5;
languageParser.T__5 = 6;
languageParser.T__6 = 7;
languageParser.T__7 = 8;
languageParser.T__8 = 9;
languageParser.T__9 = 10;
languageParser.T__10 = 11;
languageParser.T__11 = 12;
languageParser.T__12 = 13;
languageParser.T__13 = 14;
languageParser.T__14 = 15;
languageParser.T__15 = 16;
languageParser.T__16 = 17;
languageParser.T__17 = 18;
languageParser.T__18 = 19;
languageParser.T__19 = 20;
languageParser.T__20 = 21;
languageParser.T__21 = 22;
languageParser.T__22 = 23;
languageParser.T__23 = 24;
languageParser.T__24 = 25;
languageParser.T__25 = 26;
languageParser.T__26 = 27;
languageParser.T__27 = 28;
languageParser.WhiteSpace = 29;
languageParser.DocComment = 30;
languageParser.Comment = 31;
languageParser.LineComment = 32;
languageParser.String = 33;
languageParser.QuotedLiteral = 34;
languageParser.UnterminatedLiteral = 35;
languageParser.UnterminatedDelimitedIdentifier = 36;
languageParser.Boolean = 37;
languageParser.ALL = 38;
languageParser.ANY = 39;
languageParser.AS = 40;
languageParser.BY = 41;
languageParser.CASE = 42;
languageParser.CAST = 43;
languageParser.DISTINCT = 44;
languageParser.EXISTS = 45;
languageParser.FROM = 46;
languageParser.IN = 47;
languageParser.KEY = 48;
languageParser.NEW = 49;
languageParser.NOT = 50;
languageParser.NULL = 51;
languageParser.OF = 52;
languageParser.ON = 53;
languageParser.SELECT = 54;
languageParser.SOME = 55;
languageParser.WHEN = 56;
languageParser.WHERE = 57;
languageParser.WITH = 58;
languageParser.Number = 59;
languageParser.ABSTRACT = 60;
languageParser.ACTION = 61;
languageParser.ACTIONS = 62;
languageParser.AND = 63;
languageParser.ANNOTATE = 64;
languageParser.ANNOTATION = 65;
languageParser.ARRAY = 66;
languageParser.ASC = 67;
languageParser.ASPECT = 68;
languageParser.ASSOCIATION = 69;
languageParser.BETWEEN = 70;
languageParser.COLUMNS = 71;
languageParser.COMPOSITION = 72;
languageParser.CONTEXT = 73;
languageParser.CROSS = 74;
languageParser.CURRENT = 75;
languageParser.DEFAULT = 76;
languageParser.DEFINE = 77;
languageParser.DEFINITIONS = 78;
languageParser.DESC = 79;
languageParser.ELEMENT = 80;
languageParser.ELEMENTS = 81;
languageParser.ELSE = 82;
languageParser.END = 83;
languageParser.ENTITY = 84;
languageParser.ENUM = 85;
languageParser.EVENT = 86;
languageParser.ESCAPE = 87;
languageParser.EXACT = 88;
languageParser.EXCEPT = 89;
languageParser.EXCLUDING = 90;
languageParser.EXTEND = 91;
languageParser.FIRST = 92;
languageParser.FLOATING = 93;
languageParser.FOLLOWING = 94;
languageParser.FULL = 95;
languageParser.FUNCTION = 96;
languageParser.GROUP = 97;
languageParser.HAVING = 98;
languageParser.INNER = 99;
languageParser.INTERSECT = 100;
languageParser.INTO = 101;
languageParser.IS = 102;
languageParser.JOIN = 103;
languageParser.LAST = 104;
languageParser.LEFT = 105;
languageParser.LIKE = 106;
languageParser.LIMIT = 107;
languageParser.LOCALIZED = 108;
languageParser.MANY = 109;
languageParser.MASKED = 110;
languageParser.MINUS = 111;
languageParser.MIXIN = 112;
languageParser.NAMESPACE = 113;
languageParser.NULLS = 114;
languageParser.OFFSET = 115;
languageParser.ONE = 116;
languageParser.OR = 117;
languageParser.ORDER = 118;
languageParser.OUTER = 119;
languageParser.PARAMETERS = 120;
languageParser.PARTITION = 121;
languageParser.PRECEDING = 122;
languageParser.PROJECTION = 123;
languageParser.REDIRECTED = 124;
languageParser.RETURNS = 125;
languageParser.RIGHT = 126;
languageParser.ROW = 127;
languageParser.ROWS = 128;
languageParser.SERVICE = 129;
languageParser.THEN = 130;
languageParser.TO = 131;
languageParser.TYPE = 132;
languageParser.UNION = 133;
languageParser.UNBOUNDED = 134;
languageParser.UP = 135;
languageParser.USING = 136;
languageParser.VARIABLE = 137;
languageParser.VIEW = 138;
languageParser.Identifier = 139;
languageParser.IllegalToken = 140;
languageParser.VIRTUAL = 141;
languageParser.OVER = 142;
languageParser.HelperToken1 = 143;
languageParser.HelperToken2 = 144;
languageParser.HideAlternatives = 145;
languageParser.GenericExpr = 146;
languageParser.GenericSeparator = 147;
languageParser.GenericIntro = 148;
languageParser.DOTbeforeBRACE = 149;
languageParser.COMPOSITIONofBRACE = 150;
languageParser.RULE_start = 0;
languageParser.RULE_queryEOF = 1;
languageParser.RULE_conditionEOF = 2;
languageParser.RULE_namespaceDeclaration = 3;
languageParser.RULE_usingDeclaration = 4;
languageParser.RULE_innerUsing = 5;
languageParser.RULE_externalPath = 6;
languageParser.RULE_annotationAssignment_1 = 7;
languageParser.RULE_annotationAssignment_paren = 8;
languageParser.RULE_annotationAssignment_fix = 9;
languageParser.RULE_annotationAssignment_ll1 = 10;
languageParser.RULE_annotationAssignment_atn = 11;
languageParser.RULE_requiredSemi = 12;
languageParser.RULE_optionalSemi = 13;
languageParser.RULE_artifactDef = 14;
languageParser.RULE_contextDef = 15;
languageParser.RULE_extendContext = 16;
languageParser.RULE_entityDef = 17;
languageParser.RULE_projectionSpec = 18;
languageParser.RULE_projectionClauses = 19;
languageParser.RULE_excludingClause = 20;
languageParser.RULE_projectionExclusion = 21;
languageParser.RULE_extendEntity = 22;
languageParser.RULE_extendForEntity = 23;
languageParser.RULE_extendProjection = 24;
languageParser.RULE_actionFunctionDef = 25;
languageParser.RULE_actionFunctionMainDef = 26;
languageParser.RULE_eventDef = 27;
languageParser.RULE_aspectDef = 28;
languageParser.RULE_typeDef = 29;
languageParser.RULE_extendType = 30;
languageParser.RULE_annotationDef = 31;
languageParser.RULE_extendArtifact = 32;
languageParser.RULE_extendWithOptElementsOrType = 33;
languageParser.RULE_annotateArtifact = 34;
languageParser.RULE_annotateElement = 35;
languageParser.RULE_annotateAction = 36;
languageParser.RULE_annotateParam = 37;
languageParser.RULE_enumSymbolDef = 38;
languageParser.RULE_defaultValue = 39;
languageParser.RULE_elementDefOrExtend = 40;
languageParser.RULE_elementDef = 41;
languageParser.RULE_mixinElementDef = 42;
languageParser.RULE_elementDefInner = 43;
languageParser.RULE_extendElement = 44;
languageParser.RULE_selectItemDef = 45;
languageParser.RULE_selectItemDefBody = 46;
languageParser.RULE_bracedSelectItemListDef = 47;
languageParser.RULE_selectItemInlineList = 48;
languageParser.RULE_selectItemInlineDef = 49;
languageParser.RULE_parameterListDef = 50;
languageParser.RULE_parameterDef = 51;
languageParser.RULE_nullability = 52;
languageParser.RULE_elementProperties = 53;
languageParser.RULE_viewDef = 54;
languageParser.RULE_includeRef = 55;
languageParser.RULE_typeSpec = 56;
languageParser.RULE_returnTypeSpec = 57;
languageParser.RULE_typeSpecSemi = 58;
languageParser.RULE_typeStruct = 59;
languageParser.RULE_typeCompoStruct = 60;
languageParser.RULE_typeArray = 61;
languageParser.RULE_typeAssociationBase = 62;
languageParser.RULE_typeAssociationCont = 63;
languageParser.RULE_typeAssociationElementCont = 64;
languageParser.RULE_typeToOne = 65;
languageParser.RULE_typeToMany = 66;
languageParser.RULE_cardinality = 67;
languageParser.RULE_foreignKey = 68;
languageParser.RULE_typeTypeOf = 69;
languageParser.RULE_typeRefOptArgs = 70;
languageParser.RULE_typeRefArgs = 71;
languageParser.RULE_typeNamedArgList = 72;
languageParser.RULE_typeNamedArg = 73;
languageParser.RULE_queryExpression = 74;
languageParser.RULE_orderByClause = 75;
languageParser.RULE_functionOrderByClause = 76;
languageParser.RULE_overOrderByClause = 77;
languageParser.RULE_partitionByClause = 78;
languageParser.RULE_windowFrameClause = 79;
languageParser.RULE_windowFrameExtentSpec = 80;
languageParser.RULE_windowFrameBoundSpec = 81;
languageParser.RULE_windowFrameStartSpec = 82;
languageParser.RULE_overClause = 83;
languageParser.RULE_limitClause = 84;
languageParser.RULE_orderBySpec = 85;
languageParser.RULE_queryTerm = 86;
languageParser.RULE_queryPrimary = 87;
languageParser.RULE_querySource = 88;
languageParser.RULE_tableExpression = 89;
languageParser.RULE_joinOp = 90;
languageParser.RULE_joinCardinality = 91;
languageParser.RULE_tableTerm = 92;
languageParser.RULE_fromPath = 93;
languageParser.RULE_condition = 94;
languageParser.RULE_conditionAnd = 95;
languageParser.RULE_conditionTerm = 96;
languageParser.RULE_predicate = 97;
languageParser.RULE_expression = 98;
languageParser.RULE_expressionSum = 99;
languageParser.RULE_expressionFactor = 100;
languageParser.RULE_expressionTerm = 101;
languageParser.RULE_specialFunction = 102;
languageParser.RULE_valuePath = 103;
languageParser.RULE_fromArguments = 104;
languageParser.RULE_pathArguments = 105;
languageParser.RULE_namedExpression = 106;
languageParser.RULE_funcExpression = 107;
languageParser.RULE_cardinalityAndFilter = 108;
languageParser.RULE_optionalCardinality = 109;
languageParser.RULE_optionalWhereForFilter = 110;
languageParser.RULE_annoValue = 111;
languageParser.RULE_annoValueBase = 112;
languageParser.RULE_flattenedValue = 113;
languageParser.RULE_namedValue = 114;
languageParser.RULE_annoSubValue = 115;
languageParser.RULE_literalValue = 116;
languageParser.RULE_simplePath = 117;
languageParser.RULE_annotationPath = 118;
languageParser.RULE_annotationPathVariant = 119;
languageParser.RULE_identNoKeyword = 120;
languageParser.RULE_ident = 121;
class StartContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.usingDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(UsingDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(UsingDeclarationContext, i);
            }
        };
        this.artifactDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArtifactDefContext);
            }
            else {
                return this.getTypedRuleContext(ArtifactDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_start;
        this.source = null;
        this._sync = 'recover';
    }
    EOF() {
        return this.getToken(languageParser.EOF, 0);
    }
    ;
    namespaceDeclaration() {
        return this.getTypedRuleContext(NamespaceDeclarationContext, 0);
    }
    ;
}
class QueryEOFContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryEOF;
        this.query = null;
        this.q = null; // QueryExpressionContext
    }
    EOF() {
        return this.getToken(languageParser.EOF, 0);
    }
    ;
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
}
class ConditionEOFContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionEOF;
        this.cond = null;
        this.c = null; // ConditionContext
    }
    EOF() {
        return this.getToken(languageParser.EOF, 0);
    }
    ;
    condition() {
        return this.getTypedRuleContext(ConditionContext, 0);
    }
    ;
}
class NamespaceDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, source) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namespaceDeclaration;
        this.source = null;
        this.decl = {};
        this.source = source || null;
    }
    NAMESPACE() {
        return this.getToken(languageParser.NAMESPACE, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
}
class UsingDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, source) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.innerUsing = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InnerUsingContext);
            }
            else {
                return this.getTypedRuleContext(InnerUsingContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_usingDeclaration;
        this.source = null;
        this.decl = {};
        this.str = null; // Token
        this.path = null; // ExternalPathContext
        this.name = null; // IdentContext
        this.source = source || null;
    }
    USING() {
        return this.getToken(languageParser.USING, 0);
    }
    ;
    FROM() {
        return this.getToken(languageParser.FROM, 0);
    }
    ;
    String() {
        return this.getToken(languageParser.String, 0);
    }
    ;
    externalPath() {
        return this.getTypedRuleContext(ExternalPathContext, 0);
    }
    ;
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
}
class InnerUsingContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, using) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_innerUsing;
        this.using = null;
        this.decl = {};
        this.path = null; // ExternalPathContext
        this.name = null; // IdentContext
        this.using = using || null;
    }
    externalPath() {
        return this.getTypedRuleContext(ExternalPathContext, 0);
    }
    ;
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
}
class ExternalPathContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_externalPath;
        this.extern = {};
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
}
class AnnotationAssignment_1Context extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_1;
        this.art = null;
        this.assignment = { name: {} };
        this.val = null; // AnnoValueContext
        this.art = art || null;
    }
    annotationPath() {
        return this.getTypedRuleContext(AnnotationPathContext, 0);
    }
    ;
    annotationPathVariant() {
        return this.getTypedRuleContext(AnnotationPathVariantContext, 0);
    }
    ;
    annoValue() {
        return this.getTypedRuleContext(AnnoValueContext, 0);
    }
    ;
}
class AnnotationAssignment_parenContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_paren;
        this.art = null;
        this.art = art || null;
    }
}
class AnnotationAssignment_fixContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_fix;
        this.art = null;
        this.assignment = null;
        this.art = art || null;
    }
    annotationAssignment_paren() {
        return this.getTypedRuleContext(AnnotationAssignment_parenContext, 0);
    }
    ;
    annotationPath() {
        return this.getTypedRuleContext(AnnotationPathContext, 0);
    }
    ;
    annotationPathVariant() {
        return this.getTypedRuleContext(AnnotationPathVariantContext, 0);
    }
    ;
}
class AnnotationAssignment_ll1Context extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_ll1;
        this.art = null;
        this.assignment = null;
        this.val = null; // AnnoValueContext
        this.art = art || null;
    }
    annotationAssignment_paren() {
        return this.getTypedRuleContext(AnnotationAssignment_parenContext, 0);
    }
    ;
    annotationPath() {
        return this.getTypedRuleContext(AnnotationPathContext, 0);
    }
    ;
    annotationPathVariant() {
        return this.getTypedRuleContext(AnnotationPathVariantContext, 0);
    }
    ;
    annoValue() {
        return this.getTypedRuleContext(AnnoValueContext, 0);
    }
    ;
}
class AnnotationAssignment_atnContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationPath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationPathContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationPathContext, i);
            }
        };
        this.HelperToken1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.HelperToken1);
            }
            else {
                return this.getToken(languageParser.HelperToken1, i);
            }
        };
        this.ident = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentContext);
            }
            else {
                return this.getTypedRuleContext(IdentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationAssignment_atn;
        this.art = null;
        this.assignment = null;
        this.variant = null; // IdentContext
        this.val = null; // AnnoValueBaseContext
        this.at = null; // Token
        this.art = art || null;
    }
    annotationAssignment_paren() {
        return this.getTypedRuleContext(AnnotationAssignment_parenContext, 0);
    }
    ;
    HelperToken2() {
        return this.getToken(languageParser.HelperToken2, 0);
    }
    ;
    annoValueBase() {
        return this.getTypedRuleContext(AnnoValueBaseContext, 0);
    }
    ;
}
class RequiredSemiContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_requiredSemi;
    }
}
class OptionalSemiContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalSemi;
    }
}
class ArtifactDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer, defOnly) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_artifactDef;
        this.outer = null;
        this.defOnly = false;
        this.art = {};
        this.extend = null; // Token
        this.annotate = null; // Token
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }
    annotateArtifact() {
        return this.getTypedRuleContext(AnnotateArtifactContext, 0);
    }
    ;
    EXTEND() {
        return this.getToken(languageParser.EXTEND, 0);
    }
    ;
    ANNOTATE() {
        return this.getToken(languageParser.ANNOTATE, 0);
    }
    ;
    contextDef() {
        return this.getTypedRuleContext(ContextDefContext, 0);
    }
    ;
    entityDef() {
        return this.getTypedRuleContext(EntityDefContext, 0);
    }
    ;
    typeDef() {
        return this.getTypedRuleContext(TypeDefContext, 0);
    }
    ;
    aspectDef() {
        return this.getTypedRuleContext(AspectDefContext, 0);
    }
    ;
    annotationDef() {
        return this.getTypedRuleContext(AnnotationDefContext, 0);
    }
    ;
    viewDef() {
        return this.getTypedRuleContext(ViewDefContext, 0);
    }
    ;
    eventDef() {
        return this.getTypedRuleContext(EventDefContext, 0);
    }
    ;
    actionFunctionMainDef() {
        return this.getTypedRuleContext(ActionFunctionMainDefContext, 0);
    }
    ;
    extendContext() {
        return this.getTypedRuleContext(ExtendContextContext, 0);
    }
    ;
    extendEntity() {
        return this.getTypedRuleContext(ExtendEntityContext, 0);
    }
    ;
    extendProjection() {
        return this.getTypedRuleContext(ExtendProjectionContext, 0);
    }
    ;
    extendType() {
        return this.getTypedRuleContext(ExtendTypeContext, 0);
    }
    ;
    extendArtifact() {
        return this.getTypedRuleContext(ExtendArtifactContext, 0);
    }
    ;
    DEFINE() {
        return this.getToken(languageParser.DEFINE, 0);
    }
    ;
}
class ContextDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer, defOnly) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.artifactDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArtifactDefContext);
            }
            else {
                return this.getTypedRuleContext(ArtifactDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_contextDef;
        this.art = null;
        this.outer = null;
        this.defOnly = false;
        this.name = {};
        this.service = null; // Token
        this.art = art || null;
        this.outer = outer || null;
        this.defOnly = defOnly || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    CONTEXT() {
        return this.getToken(languageParser.CONTEXT, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    SERVICE() {
        return this.getToken(languageParser.SERVICE, 0);
    }
    ;
}
class ExtendContextContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.artifactDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArtifactDefContext);
            }
            else {
                return this.getTypedRuleContext(ArtifactDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendContext;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.service = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    CONTEXT() {
        return this.getToken(languageParser.CONTEXT, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    SERVICE() {
        return this.getToken(languageParser.SERVICE, 0);
    }
    ;
    WITH() {
        return this.getToken(languageParser.WITH, 0);
    }
    ;
}
class EntityDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.includeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IncludeRefContext);
            }
            else {
                return this.getTypedRuleContext(IncludeRefContext, i);
            }
        };
        this.elementDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElementDefContext);
            }
            else {
                return this.getTypedRuleContext(ElementDefContext, i);
            }
        };
        this.actionFunctionDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActionFunctionDefContext);
            }
            else {
                return this.getTypedRuleContext(ActionFunctionDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_entityDef;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.qe = null; // QueryExpressionContext
        this.qp = null; // ProjectionSpecContext
        this.art = art || null;
        this.outer = outer || null;
    }
    ENTITY() {
        return this.getToken(languageParser.ENTITY, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    parameterListDef() {
        return this.getTypedRuleContext(ParameterListDefContext, 0);
    }
    ;
    projectionClauses() {
        return this.getTypedRuleContext(ProjectionClausesContext, 0);
    }
    ;
    ACTIONS() {
        return this.getToken(languageParser.ACTIONS, 0);
    }
    ;
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
    projectionSpec() {
        return this.getTypedRuleContext(ProjectionSpecContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
}
class ProjectionSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.fromPath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FromPathContext);
            }
            else {
                return this.getTypedRuleContext(FromPathContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionSpec;
        this.query = null;
        this.src = null;
        this.proj = null; // Token
        this.aliasName = null; // IdentContext
    }
    ON() {
        return this.getToken(languageParser.ON, 0);
    }
    ;
    PROJECTION() {
        return this.getToken(languageParser.PROJECTION, 0);
    }
    ;
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    bracedSelectItemListDef() {
        return this.getTypedRuleContext(BracedSelectItemListDefContext, 0);
    }
    ;
    excludingClause() {
        return this.getTypedRuleContext(ExcludingClauseContext, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
}
class ProjectionClausesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, query) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.condition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConditionContext);
            }
            else {
                return this.getTypedRuleContext(ConditionContext, i);
            }
        };
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionClauses;
        this.query = null;
        this.cond = null; // ConditionContext
        this.e1 = null; // ExpressionContext
        this.en = null; // ExpressionContext
        this.having = null; // ConditionContext
        this.ob = null; // OrderByClauseContext
        this.lc = null; // LimitClauseContext
        this.query = query || null;
    }
    WHERE() {
        return this.getToken(languageParser.WHERE, 0);
    }
    ;
    GROUP() {
        return this.getToken(languageParser.GROUP, 0);
    }
    ;
    BY() {
        return this.getToken(languageParser.BY, 0);
    }
    ;
    HAVING() {
        return this.getToken(languageParser.HAVING, 0);
    }
    ;
    orderByClause() {
        return this.getTypedRuleContext(OrderByClauseContext, 0);
    }
    ;
    limitClause() {
        return this.getTypedRuleContext(LimitClauseContext, 0);
    }
    ;
}
class ExcludingClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, query) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.projectionExclusion = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ProjectionExclusionContext);
            }
            else {
                return this.getTypedRuleContext(ProjectionExclusionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_excludingClause;
        this.query = null;
        this.query = query || null;
    }
    EXCLUDING() {
        return this.getToken(languageParser.EXCLUDING, 0);
    }
    ;
}
class ProjectionExclusionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_projectionExclusion;
        this.outer = null;
        this.art = {};
        this.name = null; // IdentContext
        this.outer = outer || null;
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
}
class ExtendEntityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.includeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IncludeRefContext);
            }
            else {
                return this.getTypedRuleContext(IncludeRefContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendEntity;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.kind = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    ASPECT() {
        return this.getToken(languageParser.ASPECT, 0);
    }
    ;
    ENTITY() {
        return this.getToken(languageParser.ENTITY, 0);
    }
    ;
    WITH() {
        return this.getToken(languageParser.WITH, 0);
    }
    ;
    extendForEntity() {
        return this.getTypedRuleContext(ExtendForEntityContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
}
class ExtendForEntityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.elementDefOrExtend = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElementDefOrExtendContext);
            }
            else {
                return this.getTypedRuleContext(ElementDefOrExtendContext, i);
            }
        };
        this.actionFunctionDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActionFunctionDefContext);
            }
            else {
                return this.getTypedRuleContext(ActionFunctionDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendForEntity;
        this.art = null;
        this.art = art || null;
    }
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    ACTIONS() {
        return this.getToken(languageParser.ACTIONS, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
}
class ExtendProjectionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.selectItemDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SelectItemDefContext);
            }
            else {
                return this.getTypedRuleContext(SelectItemDefContext, i);
            }
        };
        this.actionFunctionDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActionFunctionDefContext);
            }
            else {
                return this.getTypedRuleContext(ActionFunctionDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendProjection;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.expected = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    PROJECTION() {
        return this.getToken(languageParser.PROJECTION, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    ACTIONS() {
        return this.getToken(languageParser.ACTIONS, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    WITH() {
        return this.getToken(languageParser.WITH, 0);
    }
    ;
}
class ActionFunctionDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_actionFunctionDef;
        this.outer = null;
        this.art = {};
        this.name = null; // IdentContext
        this.outer = outer || null;
    }
    ACTION() {
        return this.getToken(languageParser.ACTION, 0);
    }
    ;
    parameterListDef() {
        return this.getTypedRuleContext(ParameterListDefContext, 0);
    }
    ;
    FUNCTION() {
        return this.getToken(languageParser.FUNCTION, 0);
    }
    ;
    returnTypeSpec() {
        return this.getTypedRuleContext(ReturnTypeSpecContext, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
}
class ActionFunctionMainDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_actionFunctionMainDef;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.art = art || null;
        this.outer = outer || null;
    }
    ACTION() {
        return this.getToken(languageParser.ACTION, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    parameterListDef() {
        return this.getTypedRuleContext(ParameterListDefContext, 0);
    }
    ;
    returnTypeSpec() {
        return this.getTypedRuleContext(ReturnTypeSpecContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    FUNCTION() {
        return this.getToken(languageParser.FUNCTION, 0);
    }
    ;
}
class EventDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simplePath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimplePathContext);
            }
            else {
                return this.getTypedRuleContext(SimplePathContext, i);
            }
        };
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.includeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IncludeRefContext);
            }
            else {
                return this.getTypedRuleContext(IncludeRefContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_eventDef;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.qp = null; // ProjectionSpecContext
        this.art = art || null;
        this.outer = outer || null;
    }
    EVENT() {
        return this.getToken(languageParser.EVENT, 0);
    }
    ;
    typeStruct() {
        return this.getTypedRuleContext(TypeStructContext, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    projectionSpec() {
        return this.getTypedRuleContext(ProjectionSpecContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
}
class AspectDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.elementDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElementDefContext);
            }
            else {
                return this.getTypedRuleContext(ElementDefContext, i);
            }
        };
        this.includeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IncludeRefContext);
            }
            else {
                return this.getTypedRuleContext(IncludeRefContext, i);
            }
        };
        this.actionFunctionDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActionFunctionDefContext);
            }
            else {
                return this.getTypedRuleContext(ActionFunctionDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_aspectDef;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.abs = null; // Token
        this.ent = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    ASPECT() {
        return this.getToken(languageParser.ASPECT, 0);
    }
    ;
    ENTITY() {
        return this.getToken(languageParser.ENTITY, 0);
    }
    ;
    ACTIONS() {
        return this.getToken(languageParser.ACTIONS, 0);
    }
    ;
    HideAlternatives() {
        return this.getToken(languageParser.HideAlternatives, 0);
    }
    ;
    ABSTRACT() {
        return this.getToken(languageParser.ABSTRACT, 0);
    }
    ;
}
class TypeDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeDef;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.art = art || null;
        this.outer = outer || null;
    }
    TYPE() {
        return this.getToken(languageParser.TYPE, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    typeSpecSemi() {
        return this.getTypedRuleContext(TypeSpecSemiContext, 0);
    }
    ;
}
class ExtendTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendType;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.art = art || null;
        this.outer = outer || null;
    }
    TYPE() {
        return this.getToken(languageParser.TYPE, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    extendWithOptElementsOrType() {
        return this.getTypedRuleContext(ExtendWithOptElementsOrTypeContext, 0);
    }
    ;
}
class AnnotationDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationDef;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.annotation = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    typeSpecSemi() {
        return this.getTypedRuleContext(TypeSpecSemiContext, 0);
    }
    ;
    ANNOTATION() {
        return this.getToken(languageParser.ANNOTATION, 0);
    }
    ;
}
class ExtendArtifactContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simplePath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimplePathContext);
            }
            else {
                return this.getTypedRuleContext(SimplePathContext, i);
            }
        };
        this.includeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IncludeRefContext);
            }
            else {
                return this.getTypedRuleContext(IncludeRefContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.elementDefOrExtend = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElementDefOrExtendContext);
            }
            else {
                return this.getTypedRuleContext(ElementDefOrExtendContext, i);
            }
        };
        this.artifactDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArtifactDefContext);
            }
            else {
                return this.getTypedRuleContext(ArtifactDefContext, i);
            }
        };
        this.selectItemDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SelectItemDefContext);
            }
            else {
                return this.getTypedRuleContext(SelectItemDefContext, i);
            }
        };
        this.actionFunctionDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActionFunctionDefContext);
            }
            else {
                return this.getTypedRuleContext(ActionFunctionDefContext, i);
            }
        };
        this.enumSymbolDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumSymbolDefContext);
            }
            else {
                return this.getTypedRuleContext(EnumSymbolDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendArtifact;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.elemName = {};
        this.art = art || null;
        this.outer = outer || null;
    }
    WITH() {
        return this.getToken(languageParser.WITH, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    DEFINITIONS() {
        return this.getToken(languageParser.DEFINITIONS, 0);
    }
    ;
    COLUMNS() {
        return this.getToken(languageParser.COLUMNS, 0);
    }
    ;
    ACTIONS() {
        return this.getToken(languageParser.ACTIONS, 0);
    }
    ;
    ELEMENTS() {
        return this.getToken(languageParser.ELEMENTS, 0);
    }
    ;
    ENUM() {
        return this.getToken(languageParser.ENUM, 0);
    }
    ;
    typeNamedArgList() {
        return this.getTypedRuleContext(TypeNamedArgListContext, 0);
    }
    ;
}
class ExtendWithOptElementsOrTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.includeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IncludeRefContext);
            }
            else {
                return this.getTypedRuleContext(IncludeRefContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.elementDefOrExtend = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElementDefOrExtendContext);
            }
            else {
                return this.getTypedRuleContext(ElementDefOrExtendContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendWithOptElementsOrType;
        this.art = null;
        this.art = art || null;
    }
    WITH() {
        return this.getToken(languageParser.WITH, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    typeNamedArgList() {
        return this.getTypedRuleContext(TypeNamedArgListContext, 0);
    }
    ;
}
class AnnotateArtifactContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simplePath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimplePathContext);
            }
            else {
                return this.getTypedRuleContext(SimplePathContext, i);
            }
        };
        this.annotateParam = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotateParamContext);
            }
            else {
                return this.getTypedRuleContext(AnnotateParamContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.annotateElement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotateElementContext);
            }
            else {
                return this.getTypedRuleContext(AnnotateElementContext, i);
            }
        };
        this.annotateAction = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotateActionContext);
            }
            else {
                return this.getTypedRuleContext(AnnotateActionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateArtifact;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.elemName = {};
        this.art = art || null;
        this.outer = outer || null;
    }
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    ACTIONS() {
        return this.getToken(languageParser.ACTIONS, 0);
    }
    ;
    RETURNS() {
        return this.getToken(languageParser.RETURNS, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    WITH() {
        return this.getToken(languageParser.WITH, 0);
    }
    ;
}
class AnnotateElementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.annotateElement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotateElementContext);
            }
            else {
                return this.getTypedRuleContext(AnnotateElementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateElement;
        this.outer = null;
        this.art = {};
        this.name = null; // IdentContext
        this.outer = outer || null;
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
}
class AnnotateActionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.annotateParam = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotateParamContext);
            }
            else {
                return this.getTypedRuleContext(AnnotateParamContext, i);
            }
        };
        this.annotateElement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotateElementContext);
            }
            else {
                return this.getTypedRuleContext(AnnotateElementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateAction;
        this.outer = null;
        this.art = {};
        this.name = null; // IdentContext
        this.outer = outer || null;
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    RETURNS() {
        return this.getToken(languageParser.RETURNS, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
}
class AnnotateParamContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotateParam;
        this.outer = null;
        this.art = {};
        this.param = null; // IdentContext
        this.outer = outer || null;
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
}
class EnumSymbolDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_enumSymbolDef;
        this.outer = null;
        this.art = {};
        this.name = null; // IdentContext
        this.val = null; // LiteralValueContext
        this.plus = null; // Token
        this.min = null; // Token
        this.num = null; // Token
        this.outer = outer || null;
    }
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    literalValue() {
        return this.getTypedRuleContext(LiteralValueContext, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
}
class DefaultValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_defaultValue;
        this.art = null;
        this.elem = null;
        this.elements = {};
        this.expr = null; // ExpressionContext
        this.art = art || null;
    }
    DEFAULT() {
        return this.getToken(languageParser.DEFAULT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
}
class ElementDefOrExtendContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDefOrExtend;
        this.outer = null;
        this.art = {};
        this.outer = outer || null;
    }
    EXTEND() {
        return this.getToken(languageParser.EXTEND, 0);
    }
    ;
    extendElement() {
        return this.getTypedRuleContext(ExtendElementContext, 0);
    }
    ;
    elementDefInner() {
        return this.getTypedRuleContext(ElementDefInnerContext, 0);
    }
    ;
}
class ElementDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDef;
        this.outer = null;
        this.art = {};
        this.outer = outer || null;
    }
    elementDefInner() {
        return this.getTypedRuleContext(ElementDefInnerContext, 0);
    }
    ;
}
class MixinElementDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_mixinElementDef;
        this.outer = null;
        this.art = {};
        this.name = null; // IdentContext
        this.as = null; // Token
        this.outer = outer || null;
    }
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    typeAssociationBase() {
        return this.getTypedRuleContext(TypeAssociationBaseContext, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    typeToMany() {
        return this.getTypedRuleContext(TypeToManyContext, 0);
    }
    ;
    typeToOne() {
        return this.getTypedRuleContext(TypeToOneContext, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    typeAssociationCont() {
        return this.getTypedRuleContext(TypeAssociationContContext, 0);
    }
    ;
}
class ElementDefInnerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer, allowEq) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.nullability = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NullabilityContext);
            }
            else {
                return this.getTypedRuleContext(NullabilityContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.enumSymbolDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumSymbolDefContext);
            }
            else {
                return this.getTypedRuleContext(EnumSymbolDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementDefInner;
        this.art = null;
        this.outer = null;
        this.allowEq = null;
        this.virtual = null; // Token
        this.key = null; // Token
        this.masked = null; // Token
        this.name = null; // IdentContext
        this.one = null; // Token
        this.many = null; // Token
        this.array = null; // Token
        this.of = null; // Token
        this.l = null; // Token
        this.eq = null; // Token
        this.e = null; // ExpressionContext
        this.art = art || null;
        this.outer = outer || null;
        this.allowEq = allowEq || null;
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    typeStruct() {
        return this.getTypedRuleContext(TypeStructContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    ELEMENT() {
        return this.getToken(languageParser.ELEMENT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    VIRTUAL() {
        return this.getToken(languageParser.VIRTUAL, 0);
    }
    ;
    KEY() {
        return this.getToken(languageParser.KEY, 0);
    }
    ;
    MASKED() {
        return this.getToken(languageParser.MASKED, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    typeAssociationBase() {
        return this.getTypedRuleContext(TypeAssociationBaseContext, 0);
    }
    ;
    typeTypeOf() {
        return this.getTypedRuleContext(TypeTypeOfContext, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    LOCALIZED() {
        return this.getToken(languageParser.LOCALIZED, 0);
    }
    ;
    typeCompoStruct() {
        return this.getTypedRuleContext(TypeCompoStructContext, 0);
    }
    ;
    typeToMany() {
        return this.getTypedRuleContext(TypeToManyContext, 0);
    }
    ;
    typeAssociationElementCont() {
        return this.getTypedRuleContext(TypeAssociationElementContContext, 0);
    }
    ;
    typeToOne() {
        return this.getTypedRuleContext(TypeToOneContext, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    ONE() {
        return this.getToken(languageParser.ONE, 0);
    }
    ;
    MANY() {
        return this.getToken(languageParser.MANY, 0);
    }
    ;
    ARRAY() {
        return this.getToken(languageParser.ARRAY, 0);
    }
    ;
    OF() {
        return this.getToken(languageParser.OF, 0);
    }
    ;
    elementProperties() {
        return this.getTypedRuleContext(ElementPropertiesContext, 0);
    }
    ;
    ENUM() {
        return this.getToken(languageParser.ENUM, 0);
    }
    ;
}
class ExtendElementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_extendElement;
        this.art = null;
        this.outer = null;
        this.expected = null; // Token
        this.name = null; // IdentContext
        this.art = art || null;
        this.outer = outer || null;
    }
    extendWithOptElementsOrType() {
        return this.getTypedRuleContext(ExtendWithOptElementsOrTypeContext, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    ELEMENT() {
        return this.getToken(languageParser.ELEMENT, 0);
    }
    ;
}
class SelectItemDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_atn = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_atnContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemDef;
        this.outer = null;
        this.art = null;
        this.star = null; // Token
        this.virtual = null; // Token
        this.key = null; // Token
        this.outer = outer || null;
    }
    selectItemDefBody() {
        return this.getTypedRuleContext(SelectItemDefBodyContext, 0);
    }
    ;
    VIRTUAL() {
        return this.getToken(languageParser.VIRTUAL, 0);
    }
    ;
    KEY() {
        return this.getToken(languageParser.KEY, 0);
    }
    ;
}
class SelectItemDefBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemDefBody;
        this.art = null;
        this.outer = null;
        this.e = null; // ExpressionContext
        this.as = null; // Token
        this.n1 = null; // IdentContext
        this.n2 = null; // IdentContext
        this.star = null; // Token
        this.re = null; // Token
        this.to = null; // Token
        this.art = art || null;
        this.outer = outer || null;
    }
    selectItemInlineList() {
        return this.getTypedRuleContext(SelectItemInlineListContext, 0);
    }
    ;
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    DOTbeforeBRACE() {
        return this.getToken(languageParser.DOTbeforeBRACE, 0);
    }
    ;
    excludingClause() {
        return this.getTypedRuleContext(ExcludingClauseContext, 0);
    }
    ;
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    typeTypeOf() {
        return this.getTypedRuleContext(TypeTypeOfContext, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    typeAssociationBase() {
        return this.getTypedRuleContext(TypeAssociationBaseContext, 0);
    }
    ;
    REDIRECTED() {
        return this.getToken(languageParser.REDIRECTED, 0);
    }
    ;
    TO() {
        return this.getToken(languageParser.TO, 0);
    }
    ;
    typeAssociationCont() {
        return this.getTypedRuleContext(TypeAssociationContContext, 0);
    }
    ;
    typeToMany() {
        return this.getTypedRuleContext(TypeToManyContext, 0);
    }
    ;
    typeToOne() {
        return this.getTypedRuleContext(TypeToOneContext, 0);
    }
    ;
}
class BracedSelectItemListDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, query) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.selectItemDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SelectItemDefContext);
            }
            else {
                return this.getTypedRuleContext(SelectItemDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_bracedSelectItemListDef;
        this.query = null;
        this.query = query || null;
    }
}
class SelectItemInlineListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, clause) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.selectItemInlineDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SelectItemInlineDefContext);
            }
            else {
                return this.getTypedRuleContext(SelectItemInlineDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemInlineList;
        this.art = null;
        this.clause = null;
        this.art = art || null;
        this.clause = clause || null;
    }
}
class SelectItemInlineDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_atn = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_atnContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_selectItemInlineDef;
        this.outer = null;
        this.art = null;
        this.star = null; // Token
        this.outer = outer || null;
    }
    selectItemDefBody() {
        return this.getTypedRuleContext(SelectItemDefBodyContext, 0);
    }
    ;
}
class ParameterListDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parameterDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ParameterDefContext);
            }
            else {
                return this.getTypedRuleContext(ParameterDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_parameterListDef;
        this.art = null;
        this.art = art || null;
    }
}
class ParameterDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_parameterDef;
        this.outer = null;
        this.art = {};
        this.name = null; // IdentContext
        this.outer = outer || null;
    }
    typeSpec() {
        return this.getTypedRuleContext(TypeSpecContext, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    defaultValue() {
        return this.getTypedRuleContext(DefaultValueContext, 0);
    }
    ;
}
class NullabilityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_nullability;
        this.art = null;
        this.not = null; // Token
        this.n1 = null; // Token
        this.n2 = null; // Token
        this.art = art || null;
    }
    NOT() {
        return this.getToken(languageParser.NOT, 0);
    }
    ;
    NULL() {
        return this.getToken(languageParser.NULL, 0);
    }
    ;
}
class ElementPropertiesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, elem) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_elementProperties;
        this.elem = null;
        this.eq = null; // Token
        this.elem = elem || null;
    }
    nullability() {
        return this.getTypedRuleContext(NullabilityContext, 0);
    }
    ;
    defaultValue() {
        return this.getTypedRuleContext(DefaultValueContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
}
class ViewDefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_fix = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_fixContext, i);
            }
        };
        this.parameterDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ParameterDefContext);
            }
            else {
                return this.getTypedRuleContext(ParameterDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_viewDef;
        this.art = null;
        this.outer = null;
        this.name = {};
        this.v = null; // Token
        this.qe = null; // QueryExpressionContext
        this.art = art || null;
        this.outer = outer || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    VIEW() {
        return this.getToken(languageParser.VIEW, 0);
    }
    ;
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
    parameterListDef() {
        return this.getTypedRuleContext(ParameterListDefContext, 0);
    }
    ;
    PARAMETERS() {
        return this.getToken(languageParser.PARAMETERS, 0);
    }
    ;
    HideAlternatives() {
        return this.getToken(languageParser.HideAlternatives, 0);
    }
    ;
    WITH() {
        return this.getToken(languageParser.WITH, 0);
    }
    ;
}
class IncludeRefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_includeRef;
        this.art = null;
        this.incl = {};
        this.art = art || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
}
class TypeSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.enumSymbolDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumSymbolDefContext);
            }
            else {
                return this.getTypedRuleContext(EnumSymbolDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpec;
        this.art = null;
        this.art = art || null;
    }
    typeStruct() {
        return this.getTypedRuleContext(TypeStructContext, 0);
    }
    ;
    typeArray() {
        return this.getTypedRuleContext(TypeArrayContext, 0);
    }
    ;
    typeTypeOf() {
        return this.getTypedRuleContext(TypeTypeOfContext, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    nullability() {
        return this.getTypedRuleContext(NullabilityContext, 0);
    }
    ;
    ENUM() {
        return this.getToken(languageParser.ENUM, 0);
    }
    ;
}
class ReturnTypeSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.enumSymbolDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumSymbolDefContext);
            }
            else {
                return this.getTypedRuleContext(EnumSymbolDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_returnTypeSpec;
        this.art = null;
        this.ret = null; // Token
        this.art = art || null;
    }
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    RETURNS() {
        return this.getToken(languageParser.RETURNS, 0);
    }
    ;
    typeStruct() {
        return this.getTypedRuleContext(TypeStructContext, 0);
    }
    ;
    typeArray() {
        return this.getTypedRuleContext(TypeArrayContext, 0);
    }
    ;
    typeTypeOf() {
        return this.getTypedRuleContext(TypeTypeOfContext, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    nullability() {
        return this.getTypedRuleContext(NullabilityContext, 0);
    }
    ;
    ENUM() {
        return this.getToken(languageParser.ENUM, 0);
    }
    ;
}
class TypeSpecSemiContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simplePath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimplePathContext);
            }
            else {
                return this.getTypedRuleContext(SimplePathContext, i);
            }
        };
        this.nullability = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NullabilityContext);
            }
            else {
                return this.getTypedRuleContext(NullabilityContext, i);
            }
        };
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.includeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IncludeRefContext);
            }
            else {
                return this.getTypedRuleContext(IncludeRefContext, i);
            }
        };
        this.enumSymbolDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumSymbolDefContext);
            }
            else {
                return this.getTypedRuleContext(EnumSymbolDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeSpecSemi;
        this.art = null;
        this.many = null; // Token
        this.array = null; // Token
        this.of = null; // Token
        this.l = null; // Token
        this.art = art || null;
    }
    typeStruct() {
        return this.getTypedRuleContext(TypeStructContext, 0);
    }
    ;
    optionalSemi() {
        return this.getTypedRuleContext(OptionalSemiContext, 0);
    }
    ;
    typeAssociationBase() {
        return this.getTypedRuleContext(TypeAssociationBaseContext, 0);
    }
    ;
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    typeTypeOf() {
        return this.getTypedRuleContext(TypeTypeOfContext, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    HelperToken1() {
        return this.getToken(languageParser.HelperToken1, 0);
    }
    ;
    LOCALIZED() {
        return this.getToken(languageParser.LOCALIZED, 0);
    }
    ;
    typeToMany() {
        return this.getTypedRuleContext(TypeToManyContext, 0);
    }
    ;
    typeToOne() {
        return this.getTypedRuleContext(TypeToOneContext, 0);
    }
    ;
    typeAssociationCont() {
        return this.getTypedRuleContext(TypeAssociationContContext, 0);
    }
    ;
    ARRAY() {
        return this.getToken(languageParser.ARRAY, 0);
    }
    ;
    OF() {
        return this.getToken(languageParser.OF, 0);
    }
    ;
    MANY() {
        return this.getToken(languageParser.MANY, 0);
    }
    ;
    defaultValue() {
        return this.getTypedRuleContext(DefaultValueContext, 0);
    }
    ;
    ENUM() {
        return this.getToken(languageParser.ENUM, 0);
    }
    ;
    typeRefArgs() {
        return this.getTypedRuleContext(TypeRefArgsContext, 0);
    }
    ;
}
class TypeStructContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, attachLoc) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.elementDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElementDefContext);
            }
            else {
                return this.getTypedRuleContext(ElementDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeStruct;
        this.art = null;
        this.attachLoc = false;
        this.art = art || null;
        this.attachLoc = attachLoc || null;
    }
}
class TypeCompoStructContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.elementDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElementDefContext);
            }
            else {
                return this.getTypedRuleContext(ElementDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeCompoStruct;
        this.art = null;
        this.art = art || null;
    }
    COMPOSITIONofBRACE() {
        return this.getToken(languageParser.COMPOSITIONofBRACE, 0);
    }
    ;
}
class TypeArrayContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.enumSymbolDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumSymbolDefContext);
            }
            else {
                return this.getTypedRuleContext(EnumSymbolDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeArray;
        this.art = null;
        this.array = null; // Token
        this.of = null; // Token
        this.many = null; // Token
        this.art = art || null;
    }
    typeStruct() {
        return this.getTypedRuleContext(TypeStructContext, 0);
    }
    ;
    typeTypeOf() {
        return this.getTypedRuleContext(TypeTypeOfContext, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    ARRAY() {
        return this.getToken(languageParser.ARRAY, 0);
    }
    ;
    OF() {
        return this.getToken(languageParser.OF, 0);
    }
    ;
    MANY() {
        return this.getToken(languageParser.MANY, 0);
    }
    ;
    nullability() {
        return this.getTypedRuleContext(NullabilityContext, 0);
    }
    ;
    ENUM() {
        return this.getToken(languageParser.ENUM, 0);
    }
    ;
}
class TypeAssociationBaseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, handleTypeCompo) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationBase;
        this.art = null;
        this.handleTypeCompo = null;
        this.assoc = null; // Token
        this.compo = null; // Token
        this.art = art || null;
        this.handleTypeCompo = handleTypeCompo || null;
    }
    TO() {
        return this.getToken(languageParser.TO, 0);
    }
    ;
    OF() {
        return this.getToken(languageParser.OF, 0);
    }
    ;
    ASSOCIATION() {
        return this.getToken(languageParser.ASSOCIATION, 0);
    }
    ;
    COMPOSITION() {
        return this.getToken(languageParser.COMPOSITION, 0);
    }
    ;
    cardinality() {
        return this.getTypedRuleContext(CardinalityContext, 0);
    }
    ;
}
class TypeAssociationContContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.foreignKey = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ForeignKeyContext);
            }
            else {
                return this.getTypedRuleContext(ForeignKeyContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationCont;
        this.art = null;
        this.cond = null; // ConditionContext
        this.art = art || null;
    }
    ON() {
        return this.getToken(languageParser.ON, 0);
    }
    ;
    condition() {
        return this.getTypedRuleContext(ConditionContext, 0);
    }
    ;
}
class TypeAssociationElementContContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.annotationAssignment_ll1 = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
            }
            else {
                return this.getTypedRuleContext(AnnotationAssignment_ll1Context, i);
            }
        };
        this.foreignKey = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ForeignKeyContext);
            }
            else {
                return this.getTypedRuleContext(ForeignKeyContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeAssociationElementCont;
        this.art = null;
        this.cond = null; // ConditionContext
        this.art = art || null;
    }
    requiredSemi() {
        return this.getTypedRuleContext(RequiredSemiContext, 0);
    }
    ;
    ON() {
        return this.getToken(languageParser.ON, 0);
    }
    ;
    nullability() {
        return this.getTypedRuleContext(NullabilityContext, 0);
    }
    ;
    condition() {
        return this.getTypedRuleContext(ConditionContext, 0);
    }
    ;
}
class TypeToOneContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeToOne;
        this.art = null;
        this.one = null; // Token
        this.art = art || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    ONE() {
        return this.getToken(languageParser.ONE, 0);
    }
    ;
}
class TypeToManyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeToMany;
        this.art = null;
        this.many = null; // Token
        this.art = art || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    MANY() {
        return this.getToken(languageParser.MANY, 0);
    }
    ;
}
class CardinalityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.Number = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.Number);
            }
            else {
                return this.getToken(languageParser.Number, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_cardinality;
        this.art = null;
        this.card = {};
        this.lbrack = null; // Token
        this.srcMax = null; // Token
        this.srcMaxStar = null; // Token
        this.trgMin = null; // Token
        this.trgMax = null; // Token
        this.trgMaxStar = null; // Token
        this.art = art || null;
    }
}
class ForeignKeyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, outer) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_foreignKey;
        this.outer = null;
        this.art = {};
        this.elem = {};
        this.name = null; // IdentContext
        this.outer = outer || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
}
class TypeTypeOfContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simplePath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimplePathContext);
            }
            else {
                return this.getTypedRuleContext(SimplePathContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeTypeOf;
        this.art = null;
        this._sync = 'nop';
        this.art = art || null;
    }
    TYPE() {
        return this.getToken(languageParser.TYPE, 0);
    }
    ;
    OF() {
        return this.getToken(languageParser.OF, 0);
    }
    ;
}
class TypeRefOptArgsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.simplePath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SimplePathContext);
            }
            else {
                return this.getTypedRuleContext(SimplePathContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeRefOptArgs;
        this.art = null;
        this.art = art || null;
    }
    typeRefArgs() {
        return this.getTypedRuleContext(TypeRefArgsContext, 0);
    }
    ;
}
class TypeRefArgsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeNamedArg = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeNamedArgContext);
            }
            else {
                return this.getTypedRuleContext(TypeNamedArgContext, i);
            }
        };
        this.Number = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.Number);
            }
            else {
                return this.getToken(languageParser.Number, i);
            }
        };
        this.VARIABLE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.VARIABLE);
            }
            else {
                return this.getToken(languageParser.VARIABLE, i);
            }
        };
        this.FLOATING = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.FLOATING);
            }
            else {
                return this.getToken(languageParser.FLOATING, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeRefArgs;
        this.art = null;
        this.paren = null; // Token
        this.head = null; // Token
        this.v = null; // Token
        this.f = null; // Token
        this.tail = null; // Token
        this.art = art || null;
    }
}
class TypeNamedArgListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeNamedArg = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeNamedArgContext);
            }
            else {
                return this.getTypedRuleContext(TypeNamedArgContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeNamedArgList;
        this.art = null;
        this.paren = null; // Token
        this.art = art || null;
    }
}
class TypeNamedArgContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_typeNamedArg;
        this.art = null;
        this.arg = '';
        this.name = null; // IdentContext
        this.val = null; // Token
        this.v = null; // Token
        this.f = null; // Token
        this.art = art || null;
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
    VARIABLE() {
        return this.getToken(languageParser.VARIABLE, 0);
    }
    ;
    FLOATING() {
        return this.getToken(languageParser.FLOATING, 0);
    }
    ;
}
class QueryExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.queryTerm = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(QueryTermContext);
            }
            else {
                return this.getTypedRuleContext(QueryTermContext, i);
            }
        };
        this.UNION = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.UNION);
            }
            else {
                return this.getToken(languageParser.UNION, i);
            }
        };
        this.EXCEPT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.EXCEPT);
            }
            else {
                return this.getToken(languageParser.EXCEPT, i);
            }
        };
        this.MINUS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.MINUS);
            }
            else {
                return this.getToken(languageParser.MINUS, i);
            }
        };
        this.DISTINCT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.DISTINCT);
            }
            else {
                return this.getToken(languageParser.DISTINCT, i);
            }
        };
        this.ALL = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.ALL);
            }
            else {
                return this.getToken(languageParser.ALL, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryExpression;
        this.query = null;
        this.qt1 = null; // QueryTermContext
        this.op = null; // Token
        this.q = null; // Token
        this.qt = null; // QueryTermContext
        this.ob = null; // OrderByClauseContext
        this.lc = null; // LimitClauseContext
    }
    orderByClause() {
        return this.getTypedRuleContext(OrderByClauseContext, 0);
    }
    ;
    limitClause() {
        return this.getTypedRuleContext(LimitClauseContext, 0);
    }
    ;
}
class OrderByClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, inQuery) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.orderBySpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(OrderBySpecContext);
            }
            else {
                return this.getTypedRuleContext(OrderBySpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderByClause;
        this.inQuery = null;
        this.query = null;
        this.ob1 = null; // OrderBySpecContext
        this.obn = null; // OrderBySpecContext
        this.inQuery = inQuery || null;
    }
    ORDER() {
        return this.getToken(languageParser.ORDER, 0);
    }
    ;
    BY() {
        return this.getToken(languageParser.BY, 0);
    }
    ;
}
class FunctionOrderByClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, lhsExpr) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.orderBySpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(OrderBySpecContext);
            }
            else {
                return this.getTypedRuleContext(OrderBySpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_functionOrderByClause;
        this.lhsExpr = null;
        this.expr = null;
        this.o = null; // Token
        this.b = null; // Token
        this.ob1 = null; // OrderBySpecContext
        this.obn = null; // OrderBySpecContext
        this.lhsExpr = lhsExpr || null;
    }
    ORDER() {
        return this.getToken(languageParser.ORDER, 0);
    }
    ;
    BY() {
        return this.getToken(languageParser.BY, 0);
    }
    ;
}
class OverOrderByClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.orderBySpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(OrderBySpecContext);
            }
            else {
                return this.getTypedRuleContext(OrderBySpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_overOrderByClause;
        this.expr = null;
        this.o = null; // Token
        this.b = null; // Token
        this.ob1 = null; // OrderBySpecContext
        this.obn = null; // OrderBySpecContext
    }
    ORDER() {
        return this.getToken(languageParser.ORDER, 0);
    }
    ;
    BY() {
        return this.getToken(languageParser.BY, 0);
    }
    ;
}
class PartitionByClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_partitionByClause;
        this.expr = null;
        this.p = null; // Token
        this.b = null; // Token
        this.e1 = null; // ExpressionContext
        this.en = null; // ExpressionContext
    }
    PARTITION() {
        return this.getToken(languageParser.PARTITION, 0);
    }
    ;
    BY() {
        return this.getToken(languageParser.BY, 0);
    }
    ;
}
class WindowFrameClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameClause;
        this.wf = null;
        this.r = null; // Token
        this.wfe = null; // WindowFrameExtentSpecContext
    }
    ROWS() {
        return this.getToken(languageParser.ROWS, 0);
    }
    ;
    windowFrameExtentSpec() {
        return this.getTypedRuleContext(WindowFrameExtentSpecContext, 0);
    }
    ;
}
class WindowFrameExtentSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.windowFrameBoundSpec = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(WindowFrameBoundSpecContext);
            }
            else {
                return this.getTypedRuleContext(WindowFrameBoundSpecContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameExtentSpec;
        this.wfe = null;
        this.b = null; // Token
        this.wfb1 = null; // WindowFrameBoundSpecContext
        this.wfb2 = null; // WindowFrameBoundSpecContext
    }
    windowFrameStartSpec() {
        return this.getTypedRuleContext(WindowFrameStartSpecContext, 0);
    }
    ;
    AND() {
        return this.getToken(languageParser.AND, 0);
    }
    ;
    BETWEEN() {
        return this.getToken(languageParser.BETWEEN, 0);
    }
    ;
}
class WindowFrameBoundSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameBoundSpec;
        this.wfb = null;
        this.u = null; // Token
        this.f = null; // Token
        this.n = null; // Token
    }
    UNBOUNDED() {
        return this.getToken(languageParser.UNBOUNDED, 0);
    }
    ;
    FOLLOWING() {
        return this.getToken(languageParser.FOLLOWING, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
    windowFrameStartSpec() {
        return this.getTypedRuleContext(WindowFrameStartSpecContext, 0);
    }
    ;
}
class WindowFrameStartSpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, wf) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_windowFrameStartSpec;
        this.wf = null;
        this.u = null; // Token
        this.p = null; // Token
        this.n = null; // Token
        this.c = null; // Token
        this.r = null; // Token
        this.wf = wf || null;
    }
    UNBOUNDED() {
        return this.getToken(languageParser.UNBOUNDED, 0);
    }
    ;
    PRECEDING() {
        return this.getToken(languageParser.PRECEDING, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
    CURRENT() {
        return this.getToken(languageParser.CURRENT, 0);
    }
    ;
    ROW() {
        return this.getToken(languageParser.ROW, 0);
    }
    ;
}
class OverClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_overClause;
        this.over = null;
        this.o = null; // Token
        this.pb = null; // PartitionByClauseContext
        this.ob = null; // OverOrderByClauseContext
        this.wf = null; // WindowFrameClauseContext
    }
    OVER() {
        return this.getToken(languageParser.OVER, 0);
    }
    ;
    partitionByClause() {
        return this.getTypedRuleContext(PartitionByClauseContext, 0);
    }
    ;
    overOrderByClause() {
        return this.getTypedRuleContext(OverOrderByClauseContext, 0);
    }
    ;
    windowFrameClause() {
        return this.getTypedRuleContext(WindowFrameClauseContext, 0);
    }
    ;
}
class LimitClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, inQuery) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.Number = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.Number);
            }
            else {
                return this.getToken(languageParser.Number, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_limitClause;
        this.inQuery = null;
        this.query = null;
        this.limkw = null; // Token
        this.lim = null; // Token
        this.limnull = null; // Token
        this.off = null; // Token
        this.inQuery = inQuery || null;
    }
    LIMIT() {
        return this.getToken(languageParser.LIMIT, 0);
    }
    ;
    NULL() {
        return this.getToken(languageParser.NULL, 0);
    }
    ;
    OFFSET() {
        return this.getToken(languageParser.OFFSET, 0);
    }
    ;
}
class OrderBySpecContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_orderBySpec;
        this.ob = null;
        this.e = null; // ExpressionContext
        this.asc = null; // Token
        this.desc = null; // Token
        this.nb = null; // Token
        this.ne = null; // Token
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    ASC() {
        return this.getToken(languageParser.ASC, 0);
    }
    ;
    DESC() {
        return this.getToken(languageParser.DESC, 0);
    }
    ;
    NULLS() {
        return this.getToken(languageParser.NULLS, 0);
    }
    ;
    FIRST() {
        return this.getToken(languageParser.FIRST, 0);
    }
    ;
    LAST() {
        return this.getToken(languageParser.LAST, 0);
    }
    ;
}
class QueryTermContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.queryPrimary = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(QueryPrimaryContext);
            }
            else {
                return this.getTypedRuleContext(QueryPrimaryContext, i);
            }
        };
        this.INTERSECT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.INTERSECT);
            }
            else {
                return this.getToken(languageParser.INTERSECT, i);
            }
        };
        this.DISTINCT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.DISTINCT);
            }
            else {
                return this.getToken(languageParser.DISTINCT, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryTerm;
        this.query = null;
        this.qt1 = null; // QueryPrimaryContext
        this.intersect = null; // Token
        this.quantifier = null; // Token
        this.qt = null; // QueryPrimaryContext
    }
}
class QueryPrimaryContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.selectItemDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SelectItemDefContext);
            }
            else {
                return this.getTypedRuleContext(SelectItemDefContext, i);
            }
        };
        this.condition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConditionContext);
            }
            else {
                return this.getTypedRuleContext(ConditionContext, i);
            }
        };
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.mixinElementDef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(MixinElementDefContext);
            }
            else {
                return this.getTypedRuleContext(MixinElementDefContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_queryPrimary;
        this.query = {};
        this.open = null; // Token
        this.qe = null; // QueryExpressionContext
        this.close = null; // Token
        this.select = null; // Token
        this.mixin = null; // Token
        this.ad = null; // Token
        this.cond = null; // ConditionContext
        this.e1 = null; // ExpressionContext
        this.en = null; // ExpressionContext
        this.having = null; // ConditionContext
    }
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
    SELECT() {
        return this.getToken(languageParser.SELECT, 0);
    }
    ;
    FROM() {
        return this.getToken(languageParser.FROM, 0);
    }
    ;
    querySource() {
        return this.getTypedRuleContext(QuerySourceContext, 0);
    }
    ;
    WHERE() {
        return this.getToken(languageParser.WHERE, 0);
    }
    ;
    GROUP() {
        return this.getToken(languageParser.GROUP, 0);
    }
    ;
    BY() {
        return this.getToken(languageParser.BY, 0);
    }
    ;
    HAVING() {
        return this.getToken(languageParser.HAVING, 0);
    }
    ;
    INTO() {
        return this.getToken(languageParser.INTO, 0);
    }
    ;
    bracedSelectItemListDef() {
        return this.getTypedRuleContext(BracedSelectItemListDefContext, 0);
    }
    ;
    excludingClause() {
        return this.getTypedRuleContext(ExcludingClauseContext, 0);
    }
    ;
    MIXIN() {
        return this.getToken(languageParser.MIXIN, 0);
    }
    ;
    ALL() {
        return this.getToken(languageParser.ALL, 0);
    }
    ;
    DISTINCT() {
        return this.getToken(languageParser.DISTINCT, 0);
    }
    ;
}
class QuerySourceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, query) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.tableExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TableExpressionContext);
            }
            else {
                return this.getTypedRuleContext(TableExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_querySource;
        this.query = null;
        this.t1 = null; // TableExpressionContext
        this.tn = null; // TableExpressionContext
        this.query = query || null;
    }
}
class TableExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.tableTerm = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TableTermContext);
            }
            else {
                return this.getTypedRuleContext(TableTermContext, i);
            }
        };
        this.ON = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.ON);
            }
            else {
                return this.getToken(languageParser.ON, i);
            }
        };
        this.joinOp = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(JoinOpContext);
            }
            else {
                return this.getTypedRuleContext(JoinOpContext, i);
            }
        };
        this.tableExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TableExpressionContext);
            }
            else {
                return this.getTypedRuleContext(TableExpressionContext, i);
            }
        };
        this.condition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConditionContext);
            }
            else {
                return this.getTypedRuleContext(ConditionContext, i);
            }
        };
        this.CROSS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.CROSS);
            }
            else {
                return this.getToken(languageParser.CROSS, i);
            }
        };
        this.JOIN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.JOIN);
            }
            else {
                return this.getToken(languageParser.JOIN, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableExpression;
        this.table = null;
        this.qt = null; // TableTermContext
        this.join = null; // JoinOpContext
        this.te = null; // TableExpressionContext
        this.cond = null; // ConditionContext
        this.crj = null; // Token
        this.jn = null; // Token
        this.tt = null; // TableTermContext
    }
}
class JoinOpContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, left) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_joinOp;
        this.left = null;
        this.table = null;
        this.join = null;
        this.op = null; // Token
        this.t1 = null; // Token
        this.c = null; // JoinCardinalityContext
        this.t2 = null; // Token
        this.left = left || null;
    }
    JOIN() {
        return this.getToken(languageParser.JOIN, 0);
    }
    ;
    INNER() {
        return this.getToken(languageParser.INNER, 0);
    }
    ;
    LEFT() {
        return this.getToken(languageParser.LEFT, 0);
    }
    ;
    RIGHT() {
        return this.getToken(languageParser.RIGHT, 0);
    }
    ;
    FULL() {
        return this.getToken(languageParser.FULL, 0);
    }
    ;
    joinCardinality() {
        return this.getTypedRuleContext(JoinCardinalityContext, 0);
    }
    ;
    OUTER() {
        return this.getToken(languageParser.OUTER, 0);
    }
    ;
}
class JoinCardinalityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ONE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.ONE);
            }
            else {
                return this.getToken(languageParser.ONE, i);
            }
        };
        this.MANY = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.MANY);
            }
            else {
                return this.getToken(languageParser.MANY, i);
            }
        };
        this.EXACT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.EXACT);
            }
            else {
                return this.getToken(languageParser.EXACT, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_joinCardinality;
        this.joinCard = null;
        this.srcExact = null; // Token
        this.srcMaxOne = null; // Token
        this.srcMaxMany = null; // Token
        this.tgtExact = null; // Token
        this.tgtMaxOne = null; // Token
        this.tgtMaxMany = null; // Token
    }
    TO() {
        return this.getToken(languageParser.TO, 0);
    }
    ;
}
class TableTermContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.fromPath = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FromPathContext);
            }
            else {
                return this.getTypedRuleContext(FromPathContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_tableTerm;
        this.table = null;
        this.n1 = null; // IdentContext
        this.n2 = null; // IdentNoKeywordContext
        this.open = null; // Token
        this.qe = null; // QueryExpressionContext
        this.close = null; // Token
        this.a1 = null; // IdentContext
        this.a2 = null; // IdentNoKeywordContext
        this.te = null; // TableExpressionContext
    }
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    identNoKeyword() {
        return this.getTypedRuleContext(IdentNoKeywordContext, 0);
    }
    ;
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
    tableExpression() {
        return this.getTypedRuleContext(TableExpressionContext, 0);
    }
    ;
}
class FromPathContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, qp, idkind) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ident = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentContext);
            }
            else {
                return this.getTypedRuleContext(IdentContext, i);
            }
        };
        this.fromArguments = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FromArgumentsContext);
            }
            else {
                return this.getTypedRuleContext(FromArgumentsContext, i);
            }
        };
        this.cardinalityAndFilter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CardinalityAndFilterContext);
            }
            else {
                return this.getTypedRuleContext(CardinalityAndFilterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromPath;
        this.qp = null;
        this.idkind = null;
        this.id = null; // IdentContext
        this.qp = qp || null;
        this.idkind = idkind || null;
    }
}
class ConditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.conditionAnd = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConditionAndContext);
            }
            else {
                return this.getTypedRuleContext(ConditionAndContext, i);
            }
        };
        this.OR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.OR);
            }
            else {
                return this.getToken(languageParser.OR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_condition;
        this.cond = null;
        this.args = [];
        this.orl = [];
        this.c1 = null; // ConditionAndContext
        this.or = null; // Token
        this.c2 = null; // ConditionAndContext
    }
}
class ConditionAndContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.conditionTerm = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConditionTermContext);
            }
            else {
                return this.getTypedRuleContext(ConditionTermContext, i);
            }
        };
        this.AND = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.AND);
            }
            else {
                return this.getToken(languageParser.AND, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionAnd;
        this.cond = null;
        this.args = [];
        this.andl = [];
        this.c1 = null; // ConditionTermContext
        this.and = null; // Token
        this.c2 = null; // ConditionTermContext
    }
}
class ConditionTermContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_conditionTerm;
        this.cond = null;
        this.nt = null; // Token
        this.ct = null; // ConditionTermContext
        this.ex = null; // Token
        this.open = null; // Token
        this.qe = null; // QueryExpressionContext
        this.close = null; // Token
        this.qm = null; // Token
        this.ep = null; // ValuePathContext
        this.expr = null; // ExpressionContext
        this.rel = null; // Token
        this.asa = null; // Token
        this.e2 = null; // ExpressionContext
        this.inn = null; // Token
        this.innu = null; // Token
    }
    NOT() {
        return this.getToken(languageParser.NOT, 0);
    }
    ;
    conditionTerm() {
        return this.getTypedRuleContext(ConditionTermContext, 0);
    }
    ;
    EXISTS() {
        return this.getToken(languageParser.EXISTS, 0);
    }
    ;
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
    valuePath() {
        return this.getTypedRuleContext(ValuePathContext, 0);
    }
    ;
    HideAlternatives() {
        return this.getToken(languageParser.HideAlternatives, 0);
    }
    ;
    IS() {
        return this.getToken(languageParser.IS, 0);
    }
    ;
    predicate() {
        return this.getTypedRuleContext(PredicateContext, 0);
    }
    ;
    NULL() {
        return this.getToken(languageParser.NULL, 0);
    }
    ;
    ANY() {
        return this.getToken(languageParser.ANY, 0);
    }
    ;
    SOME() {
        return this.getToken(languageParser.SOME, 0);
    }
    ;
    ALL() {
        return this.getToken(languageParser.ALL, 0);
    }
    ;
}
class PredicateContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, cond, negated) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_predicate;
        this.cond = null;
        this.negated = null;
        this.ino = null; // Token
        this.e1 = null; // ExpressionContext
        this.bw = null; // Token
        this.e2 = null; // ExpressionContext
        this.e3 = null; // ExpressionContext
        this.lk = null; // Token
        this.e4 = null; // ExpressionContext
        this.e5 = null; // ExpressionContext
        this.cond = cond || null;
        this.negated = negated || null;
    }
    IN() {
        return this.getToken(languageParser.IN, 0);
    }
    ;
    AND() {
        return this.getToken(languageParser.AND, 0);
    }
    ;
    BETWEEN() {
        return this.getToken(languageParser.BETWEEN, 0);
    }
    ;
    LIKE() {
        return this.getToken(languageParser.LIKE, 0);
    }
    ;
    ESCAPE() {
        return this.getToken(languageParser.ESCAPE, 0);
    }
    ;
}
class ExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expressionSum = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionSumContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionSumContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expression;
        this.expr = null;
        this.e1 = null; // ExpressionSumContext
        this.or = null; // Token
        this.e2 = null; // ExpressionSumContext
    }
}
class ExpressionSumContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expressionFactor = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionFactorContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionFactorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expressionSum;
        this.expr = null;
        this.e1 = null; // ExpressionFactorContext
        this.op = null; // Token
        this.e2 = null; // ExpressionFactorContext
    }
}
class ExpressionFactorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expressionTerm = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionTermContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionTermContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expressionFactor;
        this.expr = null;
        this.e1 = null; // ExpressionTermContext
        this.op = null; // Token
        this.e2 = null; // ExpressionTermContext
    }
}
class ExpressionTermContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.condition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConditionContext);
            }
            else {
                return this.getTypedRuleContext(ConditionContext, i);
            }
        };
        this.THEN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.THEN);
            }
            else {
                return this.getToken(languageParser.THEN, i);
            }
        };
        this.WHEN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.WHEN);
            }
            else {
                return this.getToken(languageParser.WHEN, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_expressionTerm;
        this.expr = null;
        this.op = null;
        this.args = [];
        this.unary = null; // Token
        this.e1 = null; // ExpressionTermContext
        this.val = null; // LiteralValueContext
        this.sf = null; // SpecialFunctionContext
        this.ca = null; // Token
        this.e2 = null; // ExpressionContext
        this.ow = null; // Token
        this.ew = null; // ExpressionContext
        this.e3 = null; // ExpressionContext
        this.c = null; // ConditionContext
        this.el = null; // Token
        this.e4 = null; // ExpressionContext
        this.ne = null; // Token
        this.nqp = null; // ValuePathContext
        this.vp = null; // ValuePathContext
        this.over = null; // OverClauseContext
        this.pp = null; // Token
        this.qm = null; // Token
        this.open = null; // Token
        this.qe = null; // QueryExpressionContext
        this.close = null; // Token
        this.c1 = null; // ConditionContext
        this.cn = null; // ExpressionContext
    }
    expressionTerm() {
        return this.getTypedRuleContext(ExpressionTermContext, 0);
    }
    ;
    END() {
        return this.getToken(languageParser.END, 0);
    }
    ;
    literalValue() {
        return this.getTypedRuleContext(LiteralValueContext, 0);
    }
    ;
    specialFunction() {
        return this.getTypedRuleContext(SpecialFunctionContext, 0);
    }
    ;
    CASE() {
        return this.getToken(languageParser.CASE, 0);
    }
    ;
    NEW() {
        return this.getToken(languageParser.NEW, 0);
    }
    ;
    valuePath() {
        return this.getTypedRuleContext(ValuePathContext, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
    ELSE() {
        return this.getToken(languageParser.ELSE, 0);
    }
    ;
    overClause() {
        return this.getTypedRuleContext(OverClauseContext, 0);
    }
    ;
}
class SpecialFunctionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_specialFunction;
        this.ret = {};
        this.art = {};
        this.ca = null; // Token
        this.e = null; // ExpressionContext
    }
    AS() {
        return this.getToken(languageParser.AS, 0);
    }
    ;
    typeRefOptArgs() {
        return this.getTypedRuleContext(TypeRefOptArgsContext, 0);
    }
    ;
    CAST() {
        return this.getToken(languageParser.CAST, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
}
class ValuePathContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, category, location) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ident = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentContext);
            }
            else {
                return this.getTypedRuleContext(IdentContext, i);
            }
        };
        this.pathArguments = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(PathArgumentsContext);
            }
            else {
                return this.getTypedRuleContext(PathArgumentsContext, i);
            }
        };
        this.cardinalityAndFilter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CardinalityAndFilterContext);
            }
            else {
                return this.getTypedRuleContext(CardinalityAndFilterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_valuePath;
        this.category = null;
        this.location = null;
        this.qp = { path: [] };
        this._sync = 'nop';
        this.id = null; // IdentContext
        this.category = category || null;
        this.location = location || null;
    }
}
class FromArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, pathStep) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedExpressionContext);
            }
            else {
                return this.getTypedRuleContext(NamedExpressionContext, i);
            }
        };
        this.ident = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentContext);
            }
            else {
                return this.getTypedRuleContext(IdentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_fromArguments;
        this.pathStep = null;
        this.name = null; // IdentContext
        this.pathStep = pathStep || null;
    }
}
class PathArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, pathStep, considerSpecial) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedExpressionContext);
            }
            else {
                return this.getTypedRuleContext(NamedExpressionContext, i);
            }
        };
        this.funcExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FuncExpressionContext);
            }
            else {
                return this.getTypedRuleContext(FuncExpressionContext, i);
            }
        };
        this.ident = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentContext);
            }
            else {
                return this.getTypedRuleContext(IdentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_pathArguments;
        this.pathStep = null;
        this.considerSpecial = null;
        this.id = null; // Token
        this.name = null; // IdentContext
        this.ob = null; // FunctionOrderByClauseContext
        this.pathStep = pathStep || null;
        this.considerSpecial = considerSpecial || null;
    }
    HelperToken1() {
        return this.getToken(languageParser.HelperToken1, 0);
    }
    ;
    HelperToken2() {
        return this.getToken(languageParser.HelperToken2, 0);
    }
    ;
    functionOrderByClause() {
        return this.getTypedRuleContext(FunctionOrderByClauseContext, 0);
    }
    ;
}
class NamedExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, pathStep, id) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namedExpression;
        this.pathStep = null;
        this.id = null;
        this.elem = null; // ExpressionContext
        this.pathStep = pathStep || null;
        this.id = id || null;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
}
class FuncExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, pathStep, considerSpecial) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.GenericExpr = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.GenericExpr);
            }
            else {
                return this.getToken(languageParser.GenericExpr, i);
            }
        };
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.HideAlternatives = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.HideAlternatives);
            }
            else {
                return this.getToken(languageParser.HideAlternatives, i);
            }
        };
        this.ALL = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.ALL);
            }
            else {
                return this.getToken(languageParser.ALL, i);
            }
        };
        this.GenericSeparator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.GenericSeparator);
            }
            else {
                return this.getToken(languageParser.GenericSeparator, i);
            }
        };
        this.Identifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.Identifier);
            }
            else {
                return this.getToken(languageParser.Identifier, i);
            }
        };
        this.FROM = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.FROM);
            }
            else {
                return this.getToken(languageParser.FROM, i);
            }
        };
        this.IN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.IN);
            }
            else {
                return this.getToken(languageParser.IN, i);
            }
        };
        this.WITH = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.WITH);
            }
            else {
                return this.getToken(languageParser.WITH, i);
            }
        };
        this.GROUP = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.GROUP);
            }
            else {
                return this.getToken(languageParser.GROUP, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_funcExpression;
        this.pathStep = null;
        this.considerSpecial = null;
        this.args = null;
        this.expr = null; // ExpressionContext
        this.pathStep = pathStep || null;
        this.considerSpecial = considerSpecial || null;
    }
    GenericIntro() {
        return this.getToken(languageParser.GenericIntro, 0);
    }
    ;
    DISTINCT() {
        return this.getToken(languageParser.DISTINCT, 0);
    }
    ;
}
class CardinalityAndFilterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, pathStep) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_cardinalityAndFilter;
        this.pathStep = null;
        this._sync = 'nop';
        this.co = null; // ConditionContext
        this.pathStep = pathStep || null;
    }
    optionalWhereForFilter() {
        return this.getTypedRuleContext(OptionalWhereForFilterContext, 0);
    }
    ;
    condition() {
        return this.getTypedRuleContext(ConditionContext, 0);
    }
    ;
    optionalCardinality() {
        return this.getTypedRuleContext(OptionalCardinalityContext, 0);
    }
    ;
}
class OptionalCardinalityContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, pathStep) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalCardinality;
        this.pathStep = null;
        this.trgMax = null; // Token
        this.pathStep = pathStep || null;
    }
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
}
class OptionalWhereForFilterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_optionalWhereForFilter;
    }
    WHERE() {
        return this.getToken(languageParser.WHERE, 0);
    }
    ;
}
class AnnoValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, assignment) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoValue;
        this.assignment = null;
        this.base = null; // AnnoValueBaseContext
        this.at = null; // Token
        this.assignment = assignment || null;
    }
    annoValueBase() {
        return this.getTypedRuleContext(AnnoValueBaseContext, 0);
    }
    ;
    annotationPath() {
        return this.getTypedRuleContext(AnnotationPathContext, 0);
    }
    ;
    annotationPathVariant() {
        return this.getTypedRuleContext(AnnotationPathVariantContext, 0);
    }
    ;
}
class AnnoValueBaseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, assignment) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.flattenedValue = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FlattenedValueContext);
            }
            else {
                return this.getTypedRuleContext(FlattenedValueContext, i);
            }
        };
        this.annoSubValue = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnoSubValueContext);
            }
            else {
                return this.getTypedRuleContext(AnnoSubValueContext, i);
            }
        };
        this.UP = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.UP);
            }
            else {
                return this.getToken(languageParser.UP, i);
            }
        };
        this.TO = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(languageParser.TO);
            }
            else {
                return this.getToken(languageParser.TO, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoValueBase;
        this.assignment = null;
        this.seenEllipsis = false;
        this.head = null; // AnnoSubValueContext
        this.e = null; // Token
        this.upTo = null; // AnnoSubValueContext
        this.tail = null; // AnnoSubValueContext
        this.cb = null; // Token
        this.v1 = null; // LiteralValueContext
        this.plus = null; // Token
        this.min = null; // Token
        this.num = null; // Token
        this.assignment = assignment || null;
    }
    literalValue() {
        return this.getTypedRuleContext(LiteralValueContext, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
}
class FlattenedValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, assignment) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_flattenedValue;
        this.assignment = null;
        this.val = { name: {} };
        this.at = null; // Token
        this.assignment = assignment || null;
    }
    annotationPath() {
        return this.getTypedRuleContext(AnnotationPathContext, 0);
    }
    ;
    annotationPathVariant() {
        return this.getTypedRuleContext(AnnotationPathVariantContext, 0);
    }
    ;
    annoValue() {
        return this.getTypedRuleContext(AnnoValueContext, 0);
    }
    ;
}
class NamedValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, struct) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_namedValue;
        this.struct = null;
        this.val = { name: {} };
        this.at = null; // Token
        this.sub = null; // AnnoSubValueContext
        this.struct = struct || null;
    }
    annotationPath() {
        return this.getTypedRuleContext(AnnotationPathContext, 0);
    }
    ;
    annoSubValue() {
        return this.getTypedRuleContext(AnnoSubValueContext, 0);
    }
    ;
}
class AnnoSubValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namedValue = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamedValueContext);
            }
            else {
                return this.getTypedRuleContext(NamedValueContext, i);
            }
        };
        this.annoSubValue = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AnnoSubValueContext);
            }
            else {
                return this.getTypedRuleContext(AnnoSubValueContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annoSubValue;
        this.val = {};
        this.head = null; // AnnoSubValueContext
        this.tail = null; // AnnoSubValueContext
        this.v1 = null; // LiteralValueContext
        this.plus = null; // Token
        this.min = null; // Token
        this.num = null; // Token
        this.at = null; // Token
    }
    literalValue() {
        return this.getTypedRuleContext(LiteralValueContext, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
    annotationPath() {
        return this.getTypedRuleContext(AnnotationPathContext, 0);
    }
    ;
    annotationPathVariant() {
        return this.getTypedRuleContext(AnnotationPathVariantContext, 0);
    }
    ;
}
class LiteralValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_literalValue;
        this.val = null;
        this.tok = null;
        this.name = null; // IdentContext
    }
    ident() {
        return this.getTypedRuleContext(IdentContext, 0);
    }
    ;
    NULL() {
        return this.getToken(languageParser.NULL, 0);
    }
    ;
    Boolean() {
        return this.getToken(languageParser.Boolean, 0);
    }
    ;
    Number() {
        return this.getToken(languageParser.Number, 0);
    }
    ;
    String() {
        return this.getToken(languageParser.String, 0);
    }
    ;
    QuotedLiteral() {
        return this.getToken(languageParser.QuotedLiteral, 0);
    }
    ;
}
class SimplePathContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, category) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ident = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentContext);
            }
            else {
                return this.getTypedRuleContext(IdentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_simplePath;
        this.art = null;
        this.category = null;
        this._sync = 'nop';
        this.head = null; // IdentContext
        this.tail = null; // IdentContext
        this.art = art || null;
        this.category = category || null;
    }
}
class AnnotationPathContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art, category, headat) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ident = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentContext);
            }
            else {
                return this.getTypedRuleContext(IdentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationPath;
        this.art = null;
        this.category = null;
        this.headat = null;
        this._sync = 'nop';
        this.head = null; // IdentContext
        this.at = null; // Token
        this.tail = null; // IdentContext
        this.art = art || null;
        this.category = category || null;
        this.headat = headat || null;
    }
}
class AnnotationPathVariantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, art) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_annotationPathVariant;
        this.art = null;
        this.variant = {};
        this.art = art || null;
    }
    simplePath() {
        return this.getTypedRuleContext(SimplePathContext, 0);
    }
    ;
}
class IdentNoKeywordContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, category) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_identNoKeyword;
        this.category = null;
        this.id = null;
        this.category = category || null;
    }
    Identifier() {
        return this.getToken(languageParser.Identifier, 0);
    }
    ;
}
class IdentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState, category) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = languageParser.RULE_ident;
        this.category = null;
        this.id = null;
        this.category = category || null;
    }
    Identifier() {
        return this.getToken(languageParser.Identifier, 0);
    }
    ;
    ABSTRACT() {
        return this.getToken(languageParser.ABSTRACT, 0);
    }
    ;
    ACTION() {
        return this.getToken(languageParser.ACTION, 0);
    }
    ;
    ACTIONS() {
        return this.getToken(languageParser.ACTIONS, 0);
    }
    ;
    AND() {
        return this.getToken(languageParser.AND, 0);
    }
    ;
    ANNOTATE() {
        return this.getToken(languageParser.ANNOTATE, 0);
    }
    ;
    ANNOTATION() {
        return this.getToken(languageParser.ANNOTATION, 0);
    }
    ;
    ARRAY() {
        return this.getToken(languageParser.ARRAY, 0);
    }
    ;
    ASC() {
        return this.getToken(languageParser.ASC, 0);
    }
    ;
    ASPECT() {
        return this.getToken(languageParser.ASPECT, 0);
    }
    ;
    ASSOCIATION() {
        return this.getToken(languageParser.ASSOCIATION, 0);
    }
    ;
    BETWEEN() {
        return this.getToken(languageParser.BETWEEN, 0);
    }
    ;
    COLUMNS() {
        return this.getToken(languageParser.COLUMNS, 0);
    }
    ;
    COMPOSITION() {
        return this.getToken(languageParser.COMPOSITION, 0);
    }
    ;
    CONTEXT() {
        return this.getToken(languageParser.CONTEXT, 0);
    }
    ;
    CROSS() {
        return this.getToken(languageParser.CROSS, 0);
    }
    ;
    CURRENT() {
        return this.getToken(languageParser.CURRENT, 0);
    }
    ;
    DEFAULT() {
        return this.getToken(languageParser.DEFAULT, 0);
    }
    ;
    DEFINE() {
        return this.getToken(languageParser.DEFINE, 0);
    }
    ;
    DEFINITIONS() {
        return this.getToken(languageParser.DEFINITIONS, 0);
    }
    ;
    DESC() {
        return this.getToken(languageParser.DESC, 0);
    }
    ;
    ELEMENT() {
        return this.getToken(languageParser.ELEMENT, 0);
    }
    ;
    ELEMENTS() {
        return this.getToken(languageParser.ELEMENTS, 0);
    }
    ;
    ELSE() {
        return this.getToken(languageParser.ELSE, 0);
    }
    ;
    END() {
        return this.getToken(languageParser.END, 0);
    }
    ;
    ENTITY() {
        return this.getToken(languageParser.ENTITY, 0);
    }
    ;
    ENUM() {
        return this.getToken(languageParser.ENUM, 0);
    }
    ;
    ESCAPE() {
        return this.getToken(languageParser.ESCAPE, 0);
    }
    ;
    EVENT() {
        return this.getToken(languageParser.EVENT, 0);
    }
    ;
    EXACT() {
        return this.getToken(languageParser.EXACT, 0);
    }
    ;
    EXCEPT() {
        return this.getToken(languageParser.EXCEPT, 0);
    }
    ;
    EXCLUDING() {
        return this.getToken(languageParser.EXCLUDING, 0);
    }
    ;
    EXTEND() {
        return this.getToken(languageParser.EXTEND, 0);
    }
    ;
    FIRST() {
        return this.getToken(languageParser.FIRST, 0);
    }
    ;
    FLOATING() {
        return this.getToken(languageParser.FLOATING, 0);
    }
    ;
    FOLLOWING() {
        return this.getToken(languageParser.FOLLOWING, 0);
    }
    ;
    FULL() {
        return this.getToken(languageParser.FULL, 0);
    }
    ;
    FUNCTION() {
        return this.getToken(languageParser.FUNCTION, 0);
    }
    ;
    GROUP() {
        return this.getToken(languageParser.GROUP, 0);
    }
    ;
    HAVING() {
        return this.getToken(languageParser.HAVING, 0);
    }
    ;
    INNER() {
        return this.getToken(languageParser.INNER, 0);
    }
    ;
    INTERSECT() {
        return this.getToken(languageParser.INTERSECT, 0);
    }
    ;
    INTO() {
        return this.getToken(languageParser.INTO, 0);
    }
    ;
    IS() {
        return this.getToken(languageParser.IS, 0);
    }
    ;
    JOIN() {
        return this.getToken(languageParser.JOIN, 0);
    }
    ;
    LAST() {
        return this.getToken(languageParser.LAST, 0);
    }
    ;
    LEFT() {
        return this.getToken(languageParser.LEFT, 0);
    }
    ;
    LIKE() {
        return this.getToken(languageParser.LIKE, 0);
    }
    ;
    LIMIT() {
        return this.getToken(languageParser.LIMIT, 0);
    }
    ;
    LOCALIZED() {
        return this.getToken(languageParser.LOCALIZED, 0);
    }
    ;
    MANY() {
        return this.getToken(languageParser.MANY, 0);
    }
    ;
    MASKED() {
        return this.getToken(languageParser.MASKED, 0);
    }
    ;
    MINUS() {
        return this.getToken(languageParser.MINUS, 0);
    }
    ;
    MIXIN() {
        return this.getToken(languageParser.MIXIN, 0);
    }
    ;
    NAMESPACE() {
        return this.getToken(languageParser.NAMESPACE, 0);
    }
    ;
    NULLS() {
        return this.getToken(languageParser.NULLS, 0);
    }
    ;
    OFFSET() {
        return this.getToken(languageParser.OFFSET, 0);
    }
    ;
    ONE() {
        return this.getToken(languageParser.ONE, 0);
    }
    ;
    OR() {
        return this.getToken(languageParser.OR, 0);
    }
    ;
    ORDER() {
        return this.getToken(languageParser.ORDER, 0);
    }
    ;
    OUTER() {
        return this.getToken(languageParser.OUTER, 0);
    }
    ;
    PARAMETERS() {
        return this.getToken(languageParser.PARAMETERS, 0);
    }
    ;
    PARTITION() {
        return this.getToken(languageParser.PARTITION, 0);
    }
    ;
    PRECEDING() {
        return this.getToken(languageParser.PRECEDING, 0);
    }
    ;
    PROJECTION() {
        return this.getToken(languageParser.PROJECTION, 0);
    }
    ;
    REDIRECTED() {
        return this.getToken(languageParser.REDIRECTED, 0);
    }
    ;
    RETURNS() {
        return this.getToken(languageParser.RETURNS, 0);
    }
    ;
    RIGHT() {
        return this.getToken(languageParser.RIGHT, 0);
    }
    ;
    ROW() {
        return this.getToken(languageParser.ROW, 0);
    }
    ;
    ROWS() {
        return this.getToken(languageParser.ROWS, 0);
    }
    ;
    SERVICE() {
        return this.getToken(languageParser.SERVICE, 0);
    }
    ;
    THEN() {
        return this.getToken(languageParser.THEN, 0);
    }
    ;
    UNION() {
        return this.getToken(languageParser.UNION, 0);
    }
    ;
    UP() {
        return this.getToken(languageParser.UP, 0);
    }
    ;
    TO() {
        return this.getToken(languageParser.TO, 0);
    }
    ;
    TYPE() {
        return this.getToken(languageParser.TYPE, 0);
    }
    ;
    USING() {
        return this.getToken(languageParser.USING, 0);
    }
    ;
    UNBOUNDED() {
        return this.getToken(languageParser.UNBOUNDED, 0);
    }
    ;
    VARIABLE() {
        return this.getToken(languageParser.VARIABLE, 0);
    }
    ;
    VIEW() {
        return this.getToken(languageParser.VIEW, 0);
    }
    ;
}
languageParser.StartContext = StartContext;
languageParser.QueryEOFContext = QueryEOFContext;
languageParser.ConditionEOFContext = ConditionEOFContext;
languageParser.NamespaceDeclarationContext = NamespaceDeclarationContext;
languageParser.UsingDeclarationContext = UsingDeclarationContext;
languageParser.InnerUsingContext = InnerUsingContext;
languageParser.ExternalPathContext = ExternalPathContext;
languageParser.AnnotationAssignment_1Context = AnnotationAssignment_1Context;
languageParser.AnnotationAssignment_parenContext = AnnotationAssignment_parenContext;
languageParser.AnnotationAssignment_fixContext = AnnotationAssignment_fixContext;
languageParser.AnnotationAssignment_ll1Context = AnnotationAssignment_ll1Context;
languageParser.AnnotationAssignment_atnContext = AnnotationAssignment_atnContext;
languageParser.RequiredSemiContext = RequiredSemiContext;
languageParser.OptionalSemiContext = OptionalSemiContext;
languageParser.ArtifactDefContext = ArtifactDefContext;
languageParser.ContextDefContext = ContextDefContext;
languageParser.ExtendContextContext = ExtendContextContext;
languageParser.EntityDefContext = EntityDefContext;
languageParser.ProjectionSpecContext = ProjectionSpecContext;
languageParser.ProjectionClausesContext = ProjectionClausesContext;
languageParser.ExcludingClauseContext = ExcludingClauseContext;
languageParser.ProjectionExclusionContext = ProjectionExclusionContext;
languageParser.ExtendEntityContext = ExtendEntityContext;
languageParser.ExtendForEntityContext = ExtendForEntityContext;
languageParser.ExtendProjectionContext = ExtendProjectionContext;
languageParser.ActionFunctionDefContext = ActionFunctionDefContext;
languageParser.ActionFunctionMainDefContext = ActionFunctionMainDefContext;
languageParser.EventDefContext = EventDefContext;
languageParser.AspectDefContext = AspectDefContext;
languageParser.TypeDefContext = TypeDefContext;
languageParser.ExtendTypeContext = ExtendTypeContext;
languageParser.AnnotationDefContext = AnnotationDefContext;
languageParser.ExtendArtifactContext = ExtendArtifactContext;
languageParser.ExtendWithOptElementsOrTypeContext = ExtendWithOptElementsOrTypeContext;
languageParser.AnnotateArtifactContext = AnnotateArtifactContext;
languageParser.AnnotateElementContext = AnnotateElementContext;
languageParser.AnnotateActionContext = AnnotateActionContext;
languageParser.AnnotateParamContext = AnnotateParamContext;
languageParser.EnumSymbolDefContext = EnumSymbolDefContext;
languageParser.DefaultValueContext = DefaultValueContext;
languageParser.ElementDefOrExtendContext = ElementDefOrExtendContext;
languageParser.ElementDefContext = ElementDefContext;
languageParser.MixinElementDefContext = MixinElementDefContext;
languageParser.ElementDefInnerContext = ElementDefInnerContext;
languageParser.ExtendElementContext = ExtendElementContext;
languageParser.SelectItemDefContext = SelectItemDefContext;
languageParser.SelectItemDefBodyContext = SelectItemDefBodyContext;
languageParser.BracedSelectItemListDefContext = BracedSelectItemListDefContext;
languageParser.SelectItemInlineListContext = SelectItemInlineListContext;
languageParser.SelectItemInlineDefContext = SelectItemInlineDefContext;
languageParser.ParameterListDefContext = ParameterListDefContext;
languageParser.ParameterDefContext = ParameterDefContext;
languageParser.NullabilityContext = NullabilityContext;
languageParser.ElementPropertiesContext = ElementPropertiesContext;
languageParser.ViewDefContext = ViewDefContext;
languageParser.IncludeRefContext = IncludeRefContext;
languageParser.TypeSpecContext = TypeSpecContext;
languageParser.ReturnTypeSpecContext = ReturnTypeSpecContext;
languageParser.TypeSpecSemiContext = TypeSpecSemiContext;
languageParser.TypeStructContext = TypeStructContext;
languageParser.TypeCompoStructContext = TypeCompoStructContext;
languageParser.TypeArrayContext = TypeArrayContext;
languageParser.TypeAssociationBaseContext = TypeAssociationBaseContext;
languageParser.TypeAssociationContContext = TypeAssociationContContext;
languageParser.TypeAssociationElementContContext = TypeAssociationElementContContext;
languageParser.TypeToOneContext = TypeToOneContext;
languageParser.TypeToManyContext = TypeToManyContext;
languageParser.CardinalityContext = CardinalityContext;
languageParser.ForeignKeyContext = ForeignKeyContext;
languageParser.TypeTypeOfContext = TypeTypeOfContext;
languageParser.TypeRefOptArgsContext = TypeRefOptArgsContext;
languageParser.TypeRefArgsContext = TypeRefArgsContext;
languageParser.TypeNamedArgListContext = TypeNamedArgListContext;
languageParser.TypeNamedArgContext = TypeNamedArgContext;
languageParser.QueryExpressionContext = QueryExpressionContext;
languageParser.OrderByClauseContext = OrderByClauseContext;
languageParser.FunctionOrderByClauseContext = FunctionOrderByClauseContext;
languageParser.OverOrderByClauseContext = OverOrderByClauseContext;
languageParser.PartitionByClauseContext = PartitionByClauseContext;
languageParser.WindowFrameClauseContext = WindowFrameClauseContext;
languageParser.WindowFrameExtentSpecContext = WindowFrameExtentSpecContext;
languageParser.WindowFrameBoundSpecContext = WindowFrameBoundSpecContext;
languageParser.WindowFrameStartSpecContext = WindowFrameStartSpecContext;
languageParser.OverClauseContext = OverClauseContext;
languageParser.LimitClauseContext = LimitClauseContext;
languageParser.OrderBySpecContext = OrderBySpecContext;
languageParser.QueryTermContext = QueryTermContext;
languageParser.QueryPrimaryContext = QueryPrimaryContext;
languageParser.QuerySourceContext = QuerySourceContext;
languageParser.TableExpressionContext = TableExpressionContext;
languageParser.JoinOpContext = JoinOpContext;
languageParser.JoinCardinalityContext = JoinCardinalityContext;
languageParser.TableTermContext = TableTermContext;
languageParser.FromPathContext = FromPathContext;
languageParser.ConditionContext = ConditionContext;
languageParser.ConditionAndContext = ConditionAndContext;
languageParser.ConditionTermContext = ConditionTermContext;
languageParser.PredicateContext = PredicateContext;
languageParser.ExpressionContext = ExpressionContext;
languageParser.ExpressionSumContext = ExpressionSumContext;
languageParser.ExpressionFactorContext = ExpressionFactorContext;
languageParser.ExpressionTermContext = ExpressionTermContext;
languageParser.SpecialFunctionContext = SpecialFunctionContext;
languageParser.ValuePathContext = ValuePathContext;
languageParser.FromArgumentsContext = FromArgumentsContext;
languageParser.PathArgumentsContext = PathArgumentsContext;
languageParser.NamedExpressionContext = NamedExpressionContext;
languageParser.FuncExpressionContext = FuncExpressionContext;
languageParser.CardinalityAndFilterContext = CardinalityAndFilterContext;
languageParser.OptionalCardinalityContext = OptionalCardinalityContext;
languageParser.OptionalWhereForFilterContext = OptionalWhereForFilterContext;
languageParser.AnnoValueContext = AnnoValueContext;
languageParser.AnnoValueBaseContext = AnnoValueBaseContext;
languageParser.FlattenedValueContext = FlattenedValueContext;
languageParser.NamedValueContext = NamedValueContext;
languageParser.AnnoSubValueContext = AnnoSubValueContext;
languageParser.LiteralValueContext = LiteralValueContext;
languageParser.SimplePathContext = SimplePathContext;
languageParser.AnnotationPathContext = AnnotationPathContext;
languageParser.AnnotationPathVariantContext = AnnotationPathVariantContext;
languageParser.IdentNoKeywordContext = IdentNoKeywordContext;
languageParser.IdentContext = IdentContext;
